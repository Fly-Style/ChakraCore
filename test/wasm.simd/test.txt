                                                            ;                        FunctionEntry  
    MOV           rax, 0x000055A67938C0D0                   ;     (rax).i64       =  MOV            0xXXXXXXXX (&StackLimit).u64
    MOV           rax, [rax + (0)]                          ;     (rax).i64       =  MOV            [(rax).i64].i64
    ADD           rax, 7216                                 ;     (rax).i64       =  ADD            (rax).i64, 7216 (0x1C30).i64
    CMP           rsp, rax                                  ;                        CMP            (rsp).i64, (rax).i64
    JLE           L92                                       ;                        JLE            $L92
                                                            ;                        PrologStart    
    PUSH          rbp                                       ;                        PUSH           (rbp).i64
    MOV           rbp, rsp                                  ;     (rbp).i64       =  MOV            (rsp).i64
    SUB           rsp, 48                                   ;     (rsp).i64       =  SUB            (rsp).i64, 48 (0x30).i64
    PUSH          r15                                       ;                        PUSH           (r15).i64
    PUSH          r14                                       ;                        PUSH           (r14).i64
    PUSH          r13                                       ;                        PUSH           (r13).i64
    PUSH          r12                                       ;                        PUSH           (r12).i64
    PUSH          rbx                                       ;                        PUSH           (rbx).i64
    SUB           rsp, 72                                   ;     (rsp).i64       =  SUB            (rsp).i64, 72 (0x48).i64
                                                            ;                        PrologEnd      
    MOV           rbx, 0x00007FDF9C333578                   ;     s715(rbx).u64   =  MOV            0xXXXXXXXX (Unknown).u64
    MOV           SYM(s715<-24>.u64), rbx                   ;     s715<-24>.u64   =  MOV            s715(rbx).u64
    MOV           r12, 0x00007FE79FB41B28                   ;     s726(r12).u64   =  MOV            0xXXXXXXXX (N2Js13DynamicObjectE Vtable).u64
    MOV           SYM(s726<-16>.u64), r12                   ;     s726<-16>.u64   =  MOV            s726(r12).u64
    MOV           r13, 0x000055A67938D560                   ;     s177(r13).u64   =  MOV            0xXXXXXXXX (&ImplicitCallFlags).u64
    MOV           rax, 0x00007FDF9C33A07C                   ;     s1175(rax).u64  =  MOV            0xXXXXXXXX (&CallCount).u64
    MOV           rcx, [rax + (0)]                          ;     s1176(rcx).u32  =  MOV            [s1175(rax).u64].u32
    SUB           rcx, 1                                    ;     s1176(rcx).u32  =  SUB            s1176(rcx).u32, 1 (0x1).u32
    JB            L90                                       ;                        JB             $L90
    MOV           [rax + (0)], rcx                          ;     [s1175(rax).u64].u32 = MOV        s1176(rcx).u32
    JMP           L91                                       ;                        JMP            $L91
L90:                                                        ; $L90:
    MOV           rdi, rbp                                  ;     s1177(rdi).u64  =  MOV            (rbp).u64
    MOV           rax, TransitionFromSimpleJit              ;     s1179(rax).u64  =  MOV            TransitionFromSimpleJit.u64
    CALL          rax                                       ;                        CALL           s1179(rax).u64
L91:                                                        ; $L91:
    MOV           [r13 + (0)], 1                            ;     [s177(r13).u64 < (&ImplicitCallFlags)>].u8 = MOV  1 (0x1).u8
    MOV           r15, 0x00007FE79FC11DD0                   ;     s18(r15).var    =  MOV            0xXXXXXXXX (NullFrameDisplay).u64
    MOV           SYM(s18<-8>), r15                         ;     s18<-8>.var     =  MOV            s18(r15).var
    MOV           r14, 0x00007FDF9CB74000                   ;     s1208(r14).var  =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           r8, r14                                   ;     s1171(r8).var   =  MOV            s1(r14).var
    MOV           rsi, 839                                  ;     arg2(s1172)(rsi).u32 = MOV        839 (0x347).u32
    MOV           rdi, r8                                   ;     arg1(s1173)(rdi).var = MOV        s1171(r8).var
    MOV           rax, Op_EnsureNoRootProperty              ;     s1174(rax).u64  =  MOV            Op_EnsureNoRootProperty.u64
    CALL          rax                                       ;                        CALL           s1174(rax).u64
    MOV           r14, 0x00007FDF9CB74000                   ;     s1207(r14).var  =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdi, r14                                  ;     s1167(rdi).var  =  MOV            s1(r14).var
    MOV           rsi, 837                                  ;     arg2(s1168)(rsi).u32 = MOV        837 (0x345).u32
    MOV           rax, Op_EnsureNoRootProperty              ;     s1170(rax).u64  =  MOV            Op_EnsureNoRootProperty.u64
    CALL          rax                                       ;                        CALL           s1170(rax).u64
    MOV           r14, 0x00007FDF9CB74000                   ;     s1206(r14).var  =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdi, r14                                  ;     s1163(rdi).var  =  MOV            s1(r14).var
    MOV           rsi, 836                                  ;     arg2(s1164)(rsi).u32 = MOV        836 (0x344).u32
    MOV           rax, Op_EnsureNoRootProperty              ;     s1166(rax).u64  =  MOV            Op_EnsureNoRootProperty.u64
    CALL          rax                                       ;                        CALL           s1166(rax).u64
    MOV           r14, 0x00007FDF9CB74000                   ;     s1205(r14).var  =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdi, r14                                  ;     s1159(rdi).var  =  MOV            s1(r14).var
    MOV           rsi, 221                                  ;     arg2(s1160)(rsi).u32 = MOV        221 (0xDD).u32
    MOV           rax, Op_EnsureNoRootProperty              ;     s1162(rax).u64  =  MOV            Op_EnsureNoRootProperty.u64
    CALL          rax                                       ;                        CALL           s1162(rax).u64
    MOV           r14, 0x00007FDF9CB74000                   ;     s1204(r14).var  =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdi, r14                                  ;     s1155(rdi).var  =  MOV            s1(r14).var
    MOV           rsi, 222                                  ;     arg2(s1156)(rsi).u32 = MOV        222 (0xDE).u32
    MOV           rax, Op_EnsureNoRootProperty              ;     s1158(rax).u64  =  MOV            Op_EnsureNoRootProperty.u64
    CALL          rax                                       ;                        CALL           s1158(rax).u64
    MOV           r14, 0x00007FDF9CB74000                   ;     s1203(r14).var  =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdi, r14                                  ;     s1151(rdi).var  =  MOV            s1(r14).var
    MOV           rsi, 835                                  ;     arg2(s1152)(rsi).u32 = MOV        835 (0x343).u32
    MOV           rax, Op_EnsureNoRootProperty              ;     s1154(rax).u64  =  MOV            Op_EnsureNoRootProperty.u64
    CALL          rax                                       ;                        CALL           s1154(rax).u64
    MOV           r14, 0x00007FDF9CB74000                   ;     s1202(r14).var  =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdi, r14                                  ;     s1147(rdi).var  =  MOV            s1(r14).var
    MOV           rsi, 833                                  ;     arg2(s1148)(rsi).u32 = MOV        833 (0x341).u32
    MOV           rax, Op_EnsureNoRootProperty              ;     s1150(rax).u64  =  MOV            Op_EnsureNoRootProperty.u64
    CALL          rax                                       ;                        CALL           s1150(rax).u64
    MOV           r14, 0x00007FDF9CB74000                   ;     s1201(r14).var  =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdi, r14                                  ;     s1143(rdi).var  =  MOV            s1(r14).var
    MOV           rsi, 832                                  ;     arg2(s1144)(rsi).u32 = MOV        832 (0x340).u32
    MOV           rax, Op_EnsureNoRootProperty              ;     s1146(rax).u64  =  MOV            Op_EnsureNoRootProperty.u64
    CALL          rax                                       ;                        CALL           s1146(rax).u64
    MOV           r14, 0x00007FDF9CB74000                   ;     s1200(r14).var  =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdi, r14                                  ;     s1139(rdi).var  =  MOV            s1(r14).var
    MOV           rsi, 831                                  ;     arg2(s1140)(rsi).u32 = MOV        831 (0x33F).u32
    MOV           rax, Op_EnsureNoRootProperty              ;     s1142(rax).u64  =  MOV            Op_EnsureNoRootProperty.u64
    CALL          rax                                       ;                        CALL           s1142(rax).u64
    MOV           r14, 0x00007FDF9CB74000                   ;     s1199(r14).var  =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdi, r14                                  ;     s1135(rdi).var  =  MOV            s1(r14).var
    MOV           rsi, 830                                  ;     arg2(s1136)(rsi).u32 = MOV        830 (0x33E).u32
    MOV           rax, Op_EnsureNoRootProperty              ;     s1138(rax).u64  =  MOV            Op_EnsureNoRootProperty.u64
    CALL          rax                                       ;                        CALL           s1138(rax).u64
    MOV           r14, 0x00007FDF9CB74000                   ;     s1198(r14).var  =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdi, r14                                  ;     s1131(rdi).var  =  MOV            s1(r14).var
    MOV           rsi, 838                                  ;     arg2(s1132)(rsi).u32 = MOV        838 (0x346).u32
    MOV           rax, Op_EnsureCanDeclGloFunc              ;     s1134(rax).u64  =  MOV            Op_EnsureCanDeclGloFunc.u64
    CALL          rax                                       ;                        CALL           s1134(rax).u64
    MOV           r14, 0x00007FDF9CB74000                   ;     s1197(r14).var  =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdi, r14                                  ;     s1127(rdi).var  =  MOV            s1(r14).var
    MOV           rsi, 838                                  ;     arg2(s1128)(rsi).u32 = MOV        838 (0x346).u32
    MOV           rax, Op_EnsureNoRootRedeclProperty        ;     s1130(rax).u64  =  MOV            Op_EnsureNoRootRedeclProperty.u64
    CALL          rax                                       ;                        CALL           s1130(rax).u64
    MOV           r14, 0x00007FDF9CB74000                   ;     s1196(r14).var  =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdi, r14                                  ;     s1123(rdi).var  =  MOV            s1(r14).var
    MOV           rsi, 834                                  ;     arg2(s1124)(rsi).u32 = MOV        834 (0x342).u32
    MOV           rax, Op_EnsureCanDeclGloFunc              ;     s1126(rax).u64  =  MOV            Op_EnsureCanDeclGloFunc.u64
    CALL          rax                                       ;                        CALL           s1126(rax).u64
    MOV           r14, 0x00007FDF9CB74000                   ;     s1195(r14).var  =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdi, r14                                  ;     s1119(rdi).var  =  MOV            s1(r14).var
    MOV           rsi, 834                                  ;     arg2(s1120)(rsi).u32 = MOV        834 (0x342).u32
    MOV           rax, Op_EnsureNoRootRedeclProperty        ;     s1122(rax).u64  =  MOV            Op_EnsureNoRootRedeclProperty.u64
    CALL          rax                                       ;                        CALL           s1122(rax).u64
    MOV           r14, 0x00007FDF9CB74000                   ;     s1194(r14).var  =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdi, r14                                  ;     s1115(rdi).var  =  MOV            s1(r14).var
    MOV           rsi, 839                                  ;     arg2(s1116)(rsi).u32 = MOV        839 (0x347).u32
    MOV           rax, Op_InitUndeclRootLetFld              ;     s1118(rax).u64  =  MOV            Op_InitUndeclRootLetFld.u64
    CALL          rax                                       ;                        CALL           s1118(rax).u64
    MOV           r14, 0x00007FDF9CB74000                   ;     s1193(r14).var  =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdi, r14                                  ;     s1111(rdi).var  =  MOV            s1(r14).var
    MOV           rsi, 837                                  ;     arg2(s1112)(rsi).u32 = MOV        837 (0x345).u32
    MOV           rax, Op_InitUndeclRootConstFld            ;     s1114(rax).u64  =  MOV            Op_InitUndeclRootConstFld.u64
    CALL          rax                                       ;                        CALL           s1114(rax).u64
    MOV           r14, 0x00007FDF9CB74000                   ;     s1192(r14).var  =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdi, r14                                  ;     s1107(rdi).var  =  MOV            s1(r14).var
    MOV           rsi, 836                                  ;     arg2(s1108)(rsi).u32 = MOV        836 (0x344).u32
    MOV           rax, Op_InitUndeclRootConstFld            ;     s1110(rax).u64  =  MOV            Op_InitUndeclRootConstFld.u64
    CALL          rax                                       ;                        CALL           s1110(rax).u64
    MOV           r14, 0x00007FDF9CB74000                   ;     s1191(r14).var  =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdi, r14                                  ;     s1103(rdi).var  =  MOV            s1(r14).var
    MOV           rsi, 221                                  ;     arg2(s1104)(rsi).u32 = MOV        221 (0xDD).u32
    MOV           rax, Op_InitUndeclRootConstFld            ;     s1106(rax).u64  =  MOV            Op_InitUndeclRootConstFld.u64
    CALL          rax                                       ;                        CALL           s1106(rax).u64
    MOV           r14, 0x00007FDF9CB74000                   ;     s1190(r14).var  =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdi, r14                                  ;     s1099(rdi).var  =  MOV            s1(r14).var
    MOV           rsi, 222                                  ;     arg2(s1100)(rsi).u32 = MOV        222 (0xDE).u32
    MOV           rax, Op_InitUndeclRootConstFld            ;     s1102(rax).u64  =  MOV            Op_InitUndeclRootConstFld.u64
    CALL          rax                                       ;                        CALL           s1102(rax).u64
    MOV           r14, 0x00007FDF9CB74000                   ;     s1189(r14).var  =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdi, r14                                  ;     s1095(rdi).var  =  MOV            s1(r14).var
    MOV           rsi, 835                                  ;     arg2(s1096)(rsi).u32 = MOV        835 (0x343).u32
    MOV           rax, Op_InitUndeclRootConstFld            ;     s1098(rax).u64  =  MOV            Op_InitUndeclRootConstFld.u64
    CALL          rax                                       ;                        CALL           s1098(rax).u64
    MOV           r14, 0x00007FDF9CB74000                   ;     s1188(r14).var  =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdi, r14                                  ;     s1091(rdi).var  =  MOV            s1(r14).var
    MOV           rsi, 833                                  ;     arg2(s1092)(rsi).u32 = MOV        833 (0x341).u32
    MOV           rax, Op_InitUndeclRootLetFld              ;     s1094(rax).u64  =  MOV            Op_InitUndeclRootLetFld.u64
    CALL          rax                                       ;                        CALL           s1094(rax).u64
    MOV           r14, 0x00007FDF9CB74000                   ;     s1187(r14).var  =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdi, r14                                  ;     s1087(rdi).var  =  MOV            s1(r14).var
    MOV           rsi, 832                                  ;     arg2(s1088)(rsi).u32 = MOV        832 (0x340).u32
    MOV           rax, Op_InitUndeclRootLetFld              ;     s1090(rax).u64  =  MOV            Op_InitUndeclRootLetFld.u64
    CALL          rax                                       ;                        CALL           s1090(rax).u64
    MOV           r14, 0x00007FDF9CB74000                   ;     s1186(r14).var  =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdi, r14                                  ;     s1083(rdi).var  =  MOV            s1(r14).var
    MOV           rsi, 831                                  ;     arg2(s1084)(rsi).u32 = MOV        831 (0x33F).u32
    MOV           rax, Op_InitUndeclRootLetFld              ;     s1086(rax).u64  =  MOV            Op_InitUndeclRootLetFld.u64
    CALL          rax                                       ;                        CALL           s1086(rax).u64
    MOV           r14, 0x00007FDF9CB74000                   ;     s1185(r14).var  =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdi, r14                                  ;     s1079(rdi).var  =  MOV            s1(r14).var
    MOV           rsi, 830                                  ;     arg2(s1080)(rsi).u32 = MOV        830 (0x33E).u32
    MOV           rax, Op_InitUndeclRootLetFld              ;     s1082(rax).u64  =  MOV            Op_InitUndeclRootLetFld.u64
    CALL          rax                                       ;                        CALL           s1082(rax).u64
    MOV           rdi, r15                                  ;     s1074(rdi).var  =  MOV            s18(r15).var
    MOV           rsi, 0x00007FDF9C339008                   ;     arg2(s1076)(rsi).u64 = MOV        0xXXXXXXXX (Unknown).u64
    MOV           rax, ScrFunc_OP_NewScFunc                 ;     s1078(rax).u64  =  MOV            ScrFunc_OP_NewScFunc.u64
    CALL          rax                                       ;     s1075(rax).var  =  CALL           s1078(rax).u64
    MOV           r8, rbp                                   ;     s1065(r8).u64   =  MOV            (rbp).u64
    MOV           r14, 0x00007FDF9CB74000                   ;     s1184(r14).var  =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdi, r14                                  ;     s1067(rdi).var  =  MOV            s1(r14).var
    MOV           rcx, rax                                  ;     arg4(s1069)(rcx).var = MOV        s1066(rax).var
    MOV           rdx, 32                                   ;     arg3(s1070)(rdx).u32 = MOV        32 (0x20).u32
    MOV           rsi, 838                                  ;     arg2(s1071)(rsi).u32 = MOV        838 (0x346).u32
    MOV           rax, ProfiledInitFld                      ;     s1073(rax).u64  =  MOV            ProfiledInitFld.u64
    CALL          rax                                       ;                        CALL           s1073(rax).u64
    MOV           rdi, r15                                  ;     s1060(rdi).var  =  MOV            s18(r15).var
    MOV           rsi, 0x00007FDF9C339010                   ;     arg2(s1062)(rsi).u64 = MOV        0xXXXXXXXX (Unknown).u64
    MOV           rax, ScrFunc_OP_NewScFunc                 ;     s1064(rax).u64  =  MOV            ScrFunc_OP_NewScFunc.u64
    CALL          rax                                       ;     s1061(rax).var  =  CALL           s1064(rax).u64
    MOV           r8, rbp                                   ;     s1051(r8).u64   =  MOV            (rbp).u64
    MOV           r14, 0x00007FDF9CB74000                   ;     s1183(r14).var  =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdi, r14                                  ;     s1053(rdi).var  =  MOV            s1(r14).var
    MOV           rcx, rax                                  ;     arg4(s1055)(rcx).var = MOV        s1052(rax).var
    MOV           rdx, 33                                   ;     arg3(s1056)(rdx).u32 = MOV        33 (0x21).u32
    MOV           rsi, 834                                  ;     arg2(s1057)(rsi).u32 = MOV        834 (0x342).u32
    MOV           rax, ProfiledInitFld                      ;     s1059(rax).u64  =  MOV            ProfiledInitFld.u64
    CALL          rax                                       ;                        CALL           s1059(rax).u64
                                                            ; 
                                                            ; 
                                                            ;   Line   5: let passed = true;
                                                            ;   Col    1: ^
                                                            ;                        StatementBoundary  #0
    MOV           rdx, 0x00007FDF9C3408C0                   ;     s1045(rdx).var  =  MOV            0xXXXXXXXX (true)[Boolean].var
    MOV           r14, 0x00007FDF9CB74000                   ;     s1182(r14).var  =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdi, r14                                  ;     s1046(rdi).var  =  MOV            s1(r14).var
    MOV           rsi, 839                                  ;     arg2(s1048)(rsi).u32 = MOV        839 (0x347).u32
    MOV           rax, Op_InitLetFld                        ;     s1050(rax).u64  =  MOV            Op_InitLetFld.u64
    CALL          rax                                       ;                        CALL           s1050(rax).u64
                                                            ; 
                                                            ; 
                                                            ;   Line  14: const INITIAL_SIZE = 1;
                                                            ;   Col    1: ^
                                                            ;                        StatementBoundary  #1
    MOV           rdx, 0x0001000000000001                   ;     s1039(rdx).var  =  MOV            0x1000000000001.var
    MOV           r14, 0x00007FDF9CB74000                   ;     s1181(r14).var  =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdi, r14                                  ;     s1040(rdi).var  =  MOV            s1(r14).var
    MOV           rsi, 837                                  ;     arg2(s1042)(rsi).u32 = MOV        837 (0x345).u32
    MOV           rax, Op_InitConstFld                      ;     s1044(rax).u64  =  MOV            Op_InitConstFld.u64
    CALL          rax                                       ;                        CALL           s1044(rax).u64
                                                            ; 
                                                            ; 
                                                            ;   Line  15: const memObj = new WebAssembly.Memory({initial:INITIAL_SIZE});
                                                            ;   Col    1: ^
                                                            ;                        StatementBoundary  #2
    MOV           rcx, rbp                                  ;     s1031(rcx).u64  =  MOV            (rbp).u64
    MOV           r14, 0x00007FDF9CB74000                   ;     s1180(r14).var  =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdi, r14                                  ;     s1032(rdi).var  =  MOV            s1(r14).var
    MOV           rdx, 19                                   ;     arg3(s1035)(rdx).u32 = MOV        19 (0x13).u32
    MOV           rsi, 208                                  ;     arg2(s1036)(rsi).u32 = MOV        208 (0xD0).u32
    MOV           rax, ProfiledLdRootFld                    ;     s1038(rax).u64  =  MOV            ProfiledLdRootFld.u64
    CALL          rax                                       ;     s1033(rax).var  =  CALL           s1038(rax).u64
    MOV           rcx, rbp                                  ;     s1023(rcx).u64  =  MOV            (rbp).u64
    XOR           rdx, rdx                                  ;     arg3(s1027)(rdx).u32 = XOR        arg3(s1027)(rdx).u32, arg3(s1027)(rdx).u32
    MOV           rsi, 211                                  ;     arg2(s1028)(rsi).u32 = MOV        211 (0xD3).u32
    MOV           rdi, rax                                  ;     arg1(s1029)(rdi).var = MOV        s1024(rax).var
    MOV           rax, ProfiledLdFld                        ;     s1030(rax).u64  =  MOV            ProfiledLdFld.u64
    CALL          rax                                       ;     s1025(rax).var  =  CALL           s1030(rax).u64
    MOV           r14, rax                                  ;     s40(r14).var    =  MOV            s1025(rax).var
    MOV           rax, [rbx + (-24)]                        ;     s1008(rax).u64  =  MOV            [s715(rbx).u64+XX < (Unknown)>].u64
    TEST          rax, rax                                  ;                        TEST           s1008(rax).u64, s1008(rax).u64
    JEQ           L86                                       ;                        JEQ            $L86
    TEST          [rax + (49)], 1                           ;                        TEST           [s1008(rax).u64+49].i8, 1 (0x1).i8
    JEQ           L86                                       ;                        JEQ            $L86
L87:                                                        ; $L87:
    MOV           r15, [r13 + (20280)]                      ;     s20(r15)[UninitializedObject].var = MOV  [s177(r13).u64+XX < (&RecyclerAllocatorFreeList)>].u64
    LEA           rcx, [r15 + (32)]                         ;     s1014(rcx).u64  =  LEA            [s20(r15)[UninitializedObject].var+32].u64
    CMP           rcx, [r13 + (20272)]                      ;                        CMP            s1014(rcx).u64, [s177(r13).u64+XX < (&RecyclerAllocatorEndAddress)>].u64
    JA            L88                                       ;                        JA             $L88
    MOV           [r13 + (20280)], rcx                      ;     [s177(r13).u64+XX < (&RecyclerAllocatorFreeList)>].u64 = MOV  s1014(rcx).u64
L89:                                                        ; $L89:
    LEA           rcx, [r15 + (0)]                          ;     s1019(rcx).u64  =  LEA            [s20(r15)[UninitializedObject].var].u64
    MOV           [r15 + (0)], r12                          ;     [s20(r15)[UninitializedObject].var].u64 = MOV  s726(r12).u64
    SHR           rcx, 12                                   ;     s1019(rcx).u64  =  SHR            s1019(rcx).u64, 12 (0xC).i8
    MOV           rdx, 0x00007FDF9DC20000                   ;     s1020(rdx).i64  =  MOV            0xXXXXXXXX (&WriteBarrierCardTable).u64
    MOV           [rdx + rcx * 0 + (0)], 1                  ;     [s1020(rdx).i64+s1019(rcx).u64].i8 = MOV  1 (0x1).i8
    LEA           rcx, [r15 + (8)]                          ;     s1021(rcx).u64  =  LEA            [s20(r15)[UninitializedObject].var+8].u64
    MOV           [r15 + (8)], rax                          ;     [s20(r15)[UninitializedObject].var+8].u64 = MOV  s1008(rax).u64
    SHR           rcx, 12                                   ;     s1021(rcx).u64  =  SHR            s1021(rcx).u64, 12 (0xC).i8
    MOV           rax, 0x00007FDF9DC20000                   ;     s1022(rax).i64  =  MOV            0xXXXXXXXX (&WriteBarrierCardTable).u64
    NOP           3                                         ;                        NOP            3 (0x3).i8
    MOV           [rax + rcx * 0 + (0)], 1                  ;     [s1022(rax).i64+s1021(rcx).u64].i8 = MOV  1 (0x1).i8
    MOV           rcx, rbp                                  ;     s1000(rcx).u64  =  MOV            (rbp).u64
    MOV           rdi, 0x00007FDF9CB74000                   ;     s1001(rdi).var  =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdx, 20                                   ;     arg3(s1004)(rdx).u32 = MOV        20 (0x14).u32
    MOV           rsi, 837                                  ;     arg2(s1005)(rsi).u32 = MOV        837 (0x345).u32
    MOV           rax, ProfiledLdRootFld                    ;     s1007(rax).u64  =  MOV            ProfiledLdRootFld.u64
    CALL          rax                                       ;     s1002(rax).var  =  CALL           s1007(rax).u64
    MOV           r8, rbp                                   ;     s991(r8).u64    =  MOV            (rbp).u64
    MOV           rdi, r15                                  ;     s993(rdi).var   =  MOV            s20(r15).var
    MOV           rcx, rax                                  ;     arg4(s995)(rcx).var = MOV         s992(rax).var
    MOV           rdx, 1                                    ;     arg3(s996)(rdx).u32 = MOV         1 (0x1).u32
    MOV           rsi, 227                                  ;     arg2(s997)(rsi).u32 = MOV         227 (0xE3).u32
    MOV           rax, ProfiledInitFld                      ;     s999(rax).u64   =  MOV            ProfiledInitFld.u64
    CALL          rax                                       ;                        CALL           s999(rax).u64
    MOV           rdi, r14                                  ;     s956(rdi).var   =  MOV            s40(r14).var
    MOV           rsi, 0x000055A6793BE038                   ;     arg2(s958)(rsi).u64 = MOV         0xXXXXXXXX (ScriptContext).u64
    MOV           rax, NewScObjectNoCtor                    ;     s960(rax).u64   =  MOV            NewScObjectNoCtor.u64
    CALL          rax                                       ;     s957(rax).var   =  CALL           s960(rax).u64
    MOV           r12, rax                                  ;     s955(r12).var   =  MOV            s957(rax).var
    MOV           rax, [r14 + (8)]                          ;     s962(rax).i64   =  MOV            [s40(r14).var!+8].i64
    MOV           rax, [rax + (24)]                         ;     s962(rax).i64   =  MOV            [s962(rax).i64+24].u64
    MOV           rdx, r12                                  ;     (rdx).i64       =  MOV            s955(r12).var
    MOV           rdi, r14                                  ;     (rdi).i64       =  MOV            s40(r14).var
    MOV           rcx, r15                                  ;     arg2(s43)(rcx).var = MOV          s163(r15).var!
    MOV           rsi, 16777218                             ;     (rsi).i64       =  MOV            16777218 (0x1000002).i64
    MOV           SYM(arg4(s964)<24>.u64), rcx              ;     arg4(s964)<24>.u64 = MOV          (rcx).u64
    MOV           SYM(arg3(s965)<16>.u64), rdx              ;     arg3(s965)<16>.u64 = MOV          (rdx).u64
    MOV           SYM(arg2(s966)<8>.u64), rsi               ;     arg2(s966)<8>.u64 = MOV           (rsi).u64
    MOV           SYM(arg1(s967)<0>.u64), rdi               ;     arg1(s967)<0>.u64 = MOV           (rdi).u64
    MOV           r15, [r13 + (0)]                          ;     s968(r15).u8    =  MOV            [s177(r13).u64 < (&ImplicitCallFlags)>].u8
    CALL          rax                                       ;     s963(rax).var   =  CALL           s962(rax).i64
    MOV           rbx, rax                                  ;     s961(rbx).var   =  MOV            s963(rax).var
    MOV           r8, r14                                   ;     s969(r8).var    =  MOV            s40(r14).var
    MOV           rdi, rbp                                  ;     s971(rdi).u64   =  MOV            (rbp).u64
    MOV           r9, 16777218                              ;     arg6(s972)(r9).u32 = MOV          16777218 (0x1000002).u32
    MOV           rcx, rax                                  ;     arg4(s974)(rcx).var = MOV         s970(rax).var
    XOR           rdx, rdx                                  ;     arg3(s975)(rdx).u32 = XOR         arg3(s975)(rdx).u32, arg3(s975)(rdx).u32
    XOR           rsi, rsi                                  ;     arg2(s976)(rsi).u32 = XOR         arg2(s976)(rsi).u32, arg2(s976)(rsi).u32
    MOV           rax, SimpleProfileCall                    ;     s978(rax).u64   =  MOV            SimpleProfileCall.u64
    CALL          rax                                       ;                        CALL           s978(rax).u64
    MOV           [r13 + (0)], r15                          ;     [s177(r13).u64 < (&ImplicitCallFlags)>].u8 = MOV  s968(r15).u8
    MOV           rax, rbx                                  ;     s979(rax).i64   =  MOV            s961(rbx).var
    SHR           rax, 48                                   ;     s979(rax).i64   =  SHR            s979(rax).i64, 48 (0x30).i8
    JNE           L82                                       ;                        JNE            $L82
    MOV           rax, [rbx + (8)]                          ;     s980(rax).i64   =  MOV            [s961(rbx).var+8].i64
    CMP           [rax + (0)], 22                           ;                        CMP            [s980(rax).i64].i32, 22 (0x16).i32
    JGT           L83                                       ;                        JGT            $L83
L82:                                                        ; $L82:
    MOV           rbx, r12                                  ;     s961(rbx).var   =  MOV            s955(r12).var
L83:                                                        ; $L83:
    MOV           rax, [r14 + (8)]                          ;     s981(rax).i64   =  MOV            [s40(r14).var+8].i64
    XOR           rcx, rcx                                  ;     s982(rcx).i32   =  XOR            s982(rcx).i32, s982(rcx).i32
    CMP           [rax + (0)], 27                           ;                        CMP            [s981(rax).i64].i32, 27 (0x1B).i32
    JNE           L84                                       ;                        JNE            $L84
    CMOVNE        r14, rcx                                  ;     s40(r14).var    =  CMOVNE         s982(rcx).u64
    MOV           rax, [r14 + (32)]                         ;     s983(rax).var   =  MOV            [s40(r14).var+32].i64
    MOV           rax, [rax + (38)]                         ;     s984(rax).i8    =  MOV            [s983(rax).var+38].u8
    TEST          rax, rax                                  ;                        TEST           s984(rax).i8, s984(rax).i8
    JNE           L85                                       ;                        JNE            $L85
L84:                                                        ; $L84:
    MOV           rdx, rbx                                  ;     s949(rdx).var   =  MOV            s44(rbx).var!
    MOV           rdi, 0x00007FDF9CB74000                   ;     s950(rdi).var   =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rsi, 836                                  ;     arg2(s952)(rsi).u32 = MOV         836 (0x344).u32
    MOV           rax, Op_InitConstFld                      ;     s954(rax).u64   =  MOV            Op_InitConstFld.u64
    CALL          rax                                       ;                        CALL           s954(rax).u64
                                                            ; 
                                                            ; 
                                                            ;   Line  16: const module = new WebAssembly.Module(readbuffer('math.wasm'));
                                                            ;   Col    1: ^
                                                            ;                        StatementBoundary  #3
    MOV           rcx, rbp                                  ;     s941(rcx).u64   =  MOV            (rbp).u64
    MOV           rdi, 0x00007FDF9CB74000                   ;     s942(rdi).var   =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdx, 19                                   ;     arg3(s945)(rdx).u32 = MOV         19 (0x13).u32
    MOV           rsi, 208                                  ;     arg2(s946)(rsi).u32 = MOV         208 (0xD0).u32
    MOV           rax, ProfiledLdRootFld                    ;     s948(rax).u64   =  MOV            ProfiledLdRootFld.u64
    CALL          rax                                       ;     s943(rax).var   =  CALL           s948(rax).u64
    MOV           rcx, rbp                                  ;     s933(rcx).u64   =  MOV            (rbp).u64
    MOV           rdx, 2                                    ;     arg3(s937)(rdx).u32 = MOV         2 (0x2).u32
    MOV           rsi, 209                                  ;     arg2(s938)(rsi).u32 = MOV         209 (0xD1).u32
    MOV           rdi, rax                                  ;     arg1(s939)(rdi).var = MOV         s934(rax).var
    MOV           rax, ProfiledLdFld                        ;     s940(rax).u64   =  MOV            ProfiledLdFld.u64
    CALL          rax                                       ;     s935(rax).var   =  CALL           s940(rax).u64
    MOV           rbx, rax                                  ;     s47(rbx).var    =  MOV            s935(rax).var
    MOV           rcx, rbp                                  ;     s925(rcx).u64   =  MOV            (rbp).u64
    MOV           rdi, 0x00007FDF9CB74000                   ;     s926(rdi).var   =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdx, 29                                   ;     arg3(s929)(rdx).u32 = MOV         29 (0x1D).u32
    MOV           rsi, 819                                  ;     arg2(s930)(rsi).u32 = MOV         819 (0x333).u32
    MOV           rax, ProfiledLdRootMethodFld              ;     s932(rax).u64   =  MOV            ProfiledLdRootMethodFld.u64
    CALL          rax                                       ;     s927(rax).var   =  CALL           s932(rax).u64
    MOV           r12, rax                                  ;     s50(r12).var    =  MOV            s927(rax).var
    MOV           r14, 0x00007FDF9CB75030                   ;     s162(r14).var   =  MOV            0xXXXXXXXX (undefined)[Undefined].var
    MOV           r15, 0x00007FDF9C3334E0                   ;     s161(r15).var   =  MOV            0xXXXXXXXX ("math.wasm")[String].var
    MOV           rax, r12                                  ;     s904(rax).i64   =  MOV            s50(r12).var!
    SHR           rax, 48                                   ;     s904(rax).i64   =  SHR            s904(rax).i64, 48 (0x30).i8
    JNE           L77                                       ;                        JNE            $L77
L78:                                                        ; $L78:
    MOV           rax, [r12 + (8)]                          ;     s908(rax).i64   =  MOV            [s50(r12).var+8].i64
    MOV           rax, [rax + (24)]                         ;     s908(rax).i64   =  MOV            [s908(rax).i64+24].u64
    MOV           rdi, r12                                  ;     (rdi).i64       =  MOV            s50(r12).var
    MOV           rcx, r15                                  ;     arg2(s53)(rcx).var = MOV          s161(r15).var!
    MOV           rdx, r14                                  ;     arg1(s52)(rdx).var = MOV          s162(r14).var!
    MOV           rsi, 33554434                             ;     (rsi).i64       =  MOV            33554434 (0x2000002).i64
    MOV           SYM(arg4(s910)<24>.u64), rcx              ;     arg4(s910)<24>.u64 = MOV          (rcx).u64
    MOV           SYM(arg3(s911)<16>.u64), rdx              ;     arg3(s911)<16>.u64 = MOV          (rdx).u64
    MOV           SYM(arg2(s912)<8>.u64), rsi               ;     arg2(s912)<8>.u64 = MOV           (rsi).u64
    MOV           SYM(arg1(s913)<0>.u64), rdi               ;     arg1(s913)<0>.u64 = MOV           (rdi).u64
    MOV           r14, [r13 + (0)]                          ;     s914(r14).u8    =  MOV            [s177(r13).u64 < (&ImplicitCallFlags)>].u8
    CALL          rax                                       ;     s909(rax).var   =  CALL           s908(rax).i64
    MOV           r15, rax                                  ;     s54(r15).var    =  MOV            s909(rax).var
    MOV           r8, r12                                   ;     s915(r8).var    =  MOV            s50(r12).var
    MOV           rdi, rbp                                  ;     s917(rdi).u64   =  MOV            (rbp).u64
    MOV           r9, 33554434                              ;     arg6(s918)(r9).u32 = MOV          33554434 (0x2000002).u32
    MOV           rcx, rax                                  ;     arg4(s920)(rcx).var = MOV         s916(rax).var
    MOV           rdx, 29                                   ;     arg3(s921)(rdx).u32 = MOV         29 (0x1D).u32
    MOV           rsi, 2                                    ;     arg2(s922)(rsi).u32 = MOV         2 (0x2).u32
    MOV           rax, SimpleProfileCall                    ;     s924(rax).u64   =  MOV            SimpleProfileCall.u64
    CALL          rax                                       ;                        CALL           s924(rax).u64
    MOV           [r13 + (0)], r14                          ;     [s177(r13).u64 < (&ImplicitCallFlags)>].u8 = MOV  s914(r14).u8
    MOV           rdi, rbx                                  ;     s869(rdi).var   =  MOV            s47(rbx).var
    MOV           rsi, 0x000055A6793BE038                   ;     arg2(s871)(rsi).u64 = MOV         0xXXXXXXXX (ScriptContext).u64
    MOV           rax, NewScObjectNoCtor                    ;     s873(rax).u64   =  MOV            NewScObjectNoCtor.u64
    CALL          rax                                       ;     s870(rax).var   =  CALL           s873(rax).u64
    MOV           r12, rax                                  ;     s868(r12).var   =  MOV            s870(rax).var
    MOV           rax, [rbx + (8)]                          ;     s875(rax).i64   =  MOV            [s47(rbx).var!+8].i64
    MOV           rax, [rax + (24)]                         ;     s875(rax).i64   =  MOV            [s875(rax).i64+24].u64
    MOV           rdx, r12                                  ;     (rdx).i64       =  MOV            s868(r12).var
    MOV           rdi, rbx                                  ;     (rdi).i64       =  MOV            s47(rbx).var
    MOV           rcx, r15                                  ;     arg2(s55)(rcx).var = MOV          s160(r15).var!
    MOV           rsi, 16777218                             ;     (rsi).i64       =  MOV            16777218 (0x1000002).i64
    MOV           SYM(arg4(s877)<24>.u64), rcx              ;     arg4(s877)<24>.u64 = MOV          (rcx).u64
    MOV           SYM(arg3(s878)<16>.u64), rdx              ;     arg3(s878)<16>.u64 = MOV          (rdx).u64
    MOV           SYM(arg2(s879)<8>.u64), rsi               ;     arg2(s879)<8>.u64 = MOV           (rsi).u64
    MOV           SYM(arg1(s880)<0>.u64), rdi               ;     arg1(s880)<0>.u64 = MOV           (rdi).u64
    MOV           r14, [r13 + (0)]                          ;     s881(r14).u8    =  MOV            [s177(r13).u64 < (&ImplicitCallFlags)>].u8
    CALL          rax                                       ;     s876(rax).var   =  CALL           s875(rax).i64
    MOV           r15, rax                                  ;     s874(r15).var   =  MOV            s876(rax).var
    MOV           r8, rbx                                   ;     s882(r8).var    =  MOV            s47(rbx).var
    MOV           rdi, rbp                                  ;     s884(rdi).u64   =  MOV            (rbp).u64
    MOV           r9, 16777218                              ;     arg6(s885)(r9).u32 = MOV          16777218 (0x1000002).u32
    MOV           rcx, rax                                  ;     arg4(s887)(rcx).var = MOV         s883(rax).var
    MOV           rdx, 2                                    ;     arg3(s888)(rdx).u32 = MOV         2 (0x2).u32
    MOV           rsi, 1                                    ;     arg2(s889)(rsi).u32 = MOV         1 (0x1).u32
    MOV           rax, SimpleProfileCall                    ;     s891(rax).u64   =  MOV            SimpleProfileCall.u64
    CALL          rax                                       ;                        CALL           s891(rax).u64
    MOV           [r13 + (0)], r14                          ;     [s177(r13).u64 < (&ImplicitCallFlags)>].u8 = MOV  s881(r14).u8
    MOV           rax, r15                                  ;     s892(rax).i64   =  MOV            s874(r15).var
    SHR           rax, 48                                   ;     s892(rax).i64   =  SHR            s892(rax).i64, 48 (0x30).i8
    JNE           L73                                       ;                        JNE            $L73
    MOV           rax, [r15 + (8)]                          ;     s893(rax).i64   =  MOV            [s874(r15).var+8].i64
    CMP           [rax + (0)], 22                           ;                        CMP            [s893(rax).i64].i32, 22 (0x16).i32
    JGT           L74                                       ;                        JGT            $L74
L73:                                                        ; $L73:
    MOV           r15, r12                                  ;     s874(r15).var   =  MOV            s868(r12).var
L74:                                                        ; $L74:
    MOV           rax, [rbx + (8)]                          ;     s894(rax).i64   =  MOV            [s47(rbx).var+8].i64
    XOR           rcx, rcx                                  ;     s895(rcx).i32   =  XOR            s895(rcx).i32, s895(rcx).i32
    CMP           [rax + (0)], 27                           ;                        CMP            [s894(rax).i64].i32, 27 (0x1B).i32
    JNE           L75                                       ;                        JNE            $L75
    CMOVNE        rbx, rcx                                  ;     s47(rbx).var    =  CMOVNE         s895(rcx).u64
    MOV           rax, [rbx + (32)]                         ;     s896(rax).var   =  MOV            [s47(rbx).var+32].i64
    MOV           rax, [rax + (38)]                         ;     s897(rax).i8    =  MOV            [s896(rax).var+38].u8
    TEST          rax, rax                                  ;                        TEST           s897(rax).i8, s897(rax).i8
    JNE           L76                                       ;                        JNE            $L76
L75:                                                        ; $L75:
    MOV           rdx, r15                                  ;     s862(rdx).var   =  MOV            s56(r15).var!
    MOV           rdi, 0x00007FDF9CB74000                   ;     s863(rdi).var   =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rsi, 221                                  ;     arg2(s865)(rsi).u32 = MOV         221 (0xDD).u32
    MOV           rax, Op_InitConstFld                      ;     s867(rax).u64   =  MOV            Op_InitConstFld.u64
    CALL          rax                                       ;                        CALL           s867(rax).u64
                                                            ; 
                                                            ; 
                                                            ;   Line  17: const instance = new WebAssembly.Instance(module, { "dummy" : { "memory" : memObj } }).exports;
                                                            ;   Col    1: ^
                                                            ;                        StatementBoundary  #4
    MOV           rcx, rbp                                  ;     s854(rcx).u64   =  MOV            (rbp).u64
    MOV           rdi, 0x00007FDF9CB74000                   ;     s855(rdi).var   =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdx, 19                                   ;     arg3(s858)(rdx).u32 = MOV         19 (0x13).u32
    MOV           rsi, 208                                  ;     arg2(s859)(rsi).u32 = MOV         208 (0xD0).u32
    MOV           rax, ProfiledLdRootFld                    ;     s861(rax).u64   =  MOV            ProfiledLdRootFld.u64
    CALL          rax                                       ;     s856(rax).var   =  CALL           s861(rax).u64
    MOV           rcx, rbp                                  ;     s846(rcx).u64   =  MOV            (rbp).u64
    MOV           rdx, 3                                    ;     arg3(s850)(rdx).u32 = MOV         3 (0x3).u32
    MOV           rsi, 210                                  ;     arg2(s851)(rsi).u32 = MOV         210 (0xD2).u32
    MOV           rdi, rax                                  ;     arg1(s852)(rdi).var = MOV         s847(rax).var
    MOV           rax, ProfiledLdFld                        ;     s853(rax).u64   =  MOV            ProfiledLdFld.u64
    CALL          rax                                       ;     s848(rax).var   =  CALL           s853(rax).u64
    MOV           rbx, rax                                  ;     s59(rbx).var    =  MOV            s848(rax).var
    MOV           rcx, rbp                                  ;     s838(rcx).u64   =  MOV            (rbp).u64
    MOV           rdi, 0x00007FDF9CB74000                   ;     s839(rdi).var   =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdx, 21                                   ;     arg3(s842)(rdx).u32 = MOV         21 (0x15).u32
    MOV           rsi, 221                                  ;     arg2(s843)(rsi).u32 = MOV         221 (0xDD).u32
    MOV           rax, ProfiledLdRootFld                    ;     s845(rax).u64   =  MOV            ProfiledLdRootFld.u64
    CALL          rax                                       ;     s840(rax).var   =  CALL           s845(rax).u64
    MOV           r12, rax                                  ;     s159(r12).var   =  MOV            s61(rax).var!
    MOV           SYM(s159<-32>), r12                       ;     s159<-32>.var   =  MOV            s159(r12).var
    MOV           r14, SYM(s715<-24>.u64)                   ;     s715(r14).u64   =  MOV            s715<-24>.u64
    MOV           r15, [r14 + (-16)]                        ;     s823(r15).u64   =  MOV            [s715(r14).u64+XX < (Unknown)>].u64
    TEST          r15, r15                                  ;                        TEST           s823(r15).u64, s823(r15).u64
    JEQ           L66                                       ;                        JEQ            $L66
    TEST          [r15 + (49)], 1                           ;                        TEST           [s823(r15).u64+49].i8, 1 (0x1).i8
    JEQ           L66                                       ;                        JEQ            $L66
L67:                                                        ; $L67:
    MOV           r14, [r13 + (20280)]                      ;     s63(r14)[UninitializedObject].var = MOV  [s177(r13).u64+XX < (&RecyclerAllocatorFreeList)>].u64
    LEA           rax, [r14 + (32)]                         ;     s829(rax).u64   =  LEA            [s63(r14)[UninitializedObject].var+32].u64
    CMP           rax, [r13 + (20272)]                      ;                        CMP            s829(rax).u64, [s177(r13).u64+XX < (&RecyclerAllocatorEndAddress)>].u64
    JA            L68                                       ;                        JA             $L68
    MOV           [r13 + (20280)], rax                      ;     [s177(r13).u64+XX < (&RecyclerAllocatorFreeList)>].u64 = MOV  s829(rax).u64
L69:                                                        ; $L69:
    LEA           rax, [r14 + (0)]                          ;     s834(rax).u64   =  LEA            [s63(r14)[UninitializedObject].var].u64
    MOV           r12, SYM(s726<-16>.u64)                   ;     s726(r12).u64   =  MOV            s726<-16>.u64
    MOV           [r14 + (0)], r12                          ;     [s63(r14)[UninitializedObject].var].u64 = MOV  s726(r12).u64
    SHR           rax, 12                                   ;     s834(rax).u64   =  SHR            s834(rax).u64, 12 (0xC).i8
    MOV           rcx, 0x00007FDF9DC20000                   ;     s835(rcx).i64   =  MOV            0xXXXXXXXX (&WriteBarrierCardTable).u64
    NOP           4                                         ;                        NOP            4 (0x4).i8
    MOV           [rcx + rax * 0 + (0)], 1                  ;     [s835(rcx).i64+s834(rax).u64].i8 = MOV  1 (0x1).i8
    LEA           rax, [r14 + (8)]                          ;     s836(rax).u64   =  LEA            [s63(r14)[UninitializedObject].var+8].u64
    MOV           [r14 + (8)], r15                          ;     [s63(r14)[UninitializedObject].var+8].u64 = MOV  s823(r15).u64
    SHR           rax, 12                                   ;     s836(rax).u64   =  SHR            s836(rax).u64, 12 (0xC).i8
    MOV           rcx, 0x00007FDF9DC20000                   ;     s837(rcx).i64   =  MOV            0xXXXXXXXX (&WriteBarrierCardTable).u64
    MOV           [rcx + rax * 0 + (0)], 1                  ;     [s837(rcx).i64+s836(rax).u64].i8 = MOV  1 (0x1).i8
    MOV           r15, SYM(s715<-24>.u64)                   ;     s715(r15).u64   =  MOV            s715<-24>.u64
    MOV           rax, [r15 + (-8)]                         ;     s808(rax).u64   =  MOV            [s715(r15).u64+XX < (Unknown)>].u64
    TEST          rax, rax                                  ;                        TEST           s808(rax).u64, s808(rax).u64
    JEQ           L62                                       ;                        JEQ            $L62
    TEST          [rax + (49)], 1                           ;                        TEST           [s808(rax).u64+49].i8, 1 (0x1).i8
    JEQ           L62                                       ;                        JEQ            $L62
L63:                                                        ; $L63:
    MOV           r15, [r13 + (20280)]                      ;     s64(r15)[UninitializedObject].var = MOV  [s177(r13).u64+XX < (&RecyclerAllocatorFreeList)>].u64
    LEA           rcx, [r15 + (32)]                         ;     s814(rcx).u64   =  LEA            [s64(r15)[UninitializedObject].var+32].u64
    CMP           rcx, [r13 + (20272)]                      ;                        CMP            s814(rcx).u64, [s177(r13).u64+XX < (&RecyclerAllocatorEndAddress)>].u64
    JA            L64                                       ;                        JA             $L64
    MOV           [r13 + (20280)], rcx                      ;     [s177(r13).u64+XX < (&RecyclerAllocatorFreeList)>].u64 = MOV  s814(rcx).u64
L65:                                                        ; $L65:
    LEA           rcx, [r15 + (0)]                          ;     s819(rcx).u64   =  LEA            [s64(r15)[UninitializedObject].var].u64
    MOV           [r15 + (0)], r12                          ;     [s64(r15)[UninitializedObject].var].u64 = MOV  s726(r12).u64
    SHR           rcx, 12                                   ;     s819(rcx).u64   =  SHR            s819(rcx).u64, 12 (0xC).i8
    MOV           rdx, 0x00007FDF9DC20000                   ;     s820(rdx).i64   =  MOV            0xXXXXXXXX (&WriteBarrierCardTable).u64
    MOV           [rdx + rcx * 0 + (0)], 1                  ;     [s820(rdx).i64+s819(rcx).u64].i8 = MOV  1 (0x1).i8
    LEA           rcx, [r15 + (8)]                          ;     s821(rcx).u64   =  LEA            [s64(r15)[UninitializedObject].var+8].u64
    MOV           [r15 + (8)], rax                          ;     [s64(r15)[UninitializedObject].var+8].u64 = MOV  s808(rax).u64
    SHR           rcx, 12                                   ;     s821(rcx).u64   =  SHR            s821(rcx).u64, 12 (0xC).i8
    MOV           rax, 0x00007FDF9DC20000                   ;     s822(rax).i64   =  MOV            0xXXXXXXXX (&WriteBarrierCardTable).u64
    MOV           [rax + rcx * 0 + (0)], 1                  ;     [s822(rax).i64+s821(rcx).u64].i8 = MOV  1 (0x1).i8
    MOV           rcx, rbp                                  ;     s800(rcx).u64   =  MOV            (rbp).u64
    MOV           rdi, 0x00007FDF9CB74000                   ;     s801(rdi).var   =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdx, 22                                   ;     arg3(s804)(rdx).u32 = MOV         22 (0x16).u32
    MOV           rsi, 836                                  ;     arg2(s805)(rsi).u32 = MOV         836 (0x344).u32
    MOV           rax, ProfiledLdRootFld                    ;     s807(rax).u64   =  MOV            ProfiledLdRootFld.u64
    CALL          rax                                       ;     s802(rax).var   =  CALL           s807(rax).u64
    MOV           r8, rbp                                   ;     s791(r8).u64    =  MOV            (rbp).u64
    MOV           rdi, r15                                  ;     s793(rdi).var   =  MOV            s64(r15).var
    MOV           rcx, rax                                  ;     arg4(s795)(rcx).var = MOV         s792(rax).var
    MOV           rdx, 4                                    ;     arg3(s796)(rdx).u32 = MOV         4 (0x4).u32
    MOV           rsi, 823                                  ;     arg2(s797)(rsi).u32 = MOV         823 (0x337).u32
    MOV           rax, ProfiledInitFld                      ;     s799(rax).u64   =  MOV            ProfiledInitFld.u64
    CALL          rax                                       ;                        CALL           s799(rax).u64
    MOV           r8, rbp                                   ;     s782(r8).u64    =  MOV            (rbp).u64
    MOV           rcx, r15                                  ;     s783(rcx).var   =  MOV            s64(r15).var!
    MOV           rdi, r14                                  ;     s784(rdi).var   =  MOV            s63(r14).var
    MOV           rdx, 5                                    ;     arg3(s787)(rdx).u32 = MOV         5 (0x5).u32
    MOV           rsi, 822                                  ;     arg2(s788)(rsi).u32 = MOV         822 (0x336).u32
    MOV           rax, ProfiledInitFld                      ;     s790(rax).u64   =  MOV            ProfiledInitFld.u64
    CALL          rax                                       ;                        CALL           s790(rax).u64
    MOV           rdi, rbx                                  ;     s746(rdi).var   =  MOV            s59(rbx).var
    MOV           rsi, 0x000055A6793BE038                   ;     arg2(s748)(rsi).u64 = MOV         0xXXXXXXXX (ScriptContext).u64
    MOV           rax, NewScObjectNoCtor                    ;     s750(rax).u64   =  MOV            NewScObjectNoCtor.u64
    CALL          rax                                       ;     s747(rax).var   =  CALL           s750(rax).u64
    MOV           r15, rax                                  ;     s745(r15).var   =  MOV            s747(rax).var
    MOV           rax, [rbx + (8)]                          ;     s752(rax).i64   =  MOV            [s59(rbx).var!+8].i64
    MOV           rax, [rax + (24)]                         ;     s752(rax).i64   =  MOV            [s752(rax).i64+24].u64
    MOV           rdx, r15                                  ;     (rdx).i64       =  MOV            s745(r15).var
    MOV           rdi, rbx                                  ;     (rdi).i64       =  MOV            s59(rbx).var
    MOV           r8, r14                                   ;     arg3(s67)(r8).var = MOV           s158(r14).var!
    MOV           r11, SYM(s159<-32>)                       ;     s159(r11).var   =  MOV            s159<-32>.var
    MOV           rcx, r11                                  ;     arg2(s62)(rcx).var = MOV          s159(r11).var!
    MOV           rsi, 16777219                             ;     (rsi).i64       =  MOV            16777219 (0x1000003).i64
    MOV           SYM(arg5(s754)<32>.u64), r8               ;     arg5(s754)<32>.u64 = MOV          (r8).u64
    MOV           SYM(arg4(s755)<24>.u64), rcx              ;     arg4(s755)<24>.u64 = MOV          (rcx).u64
    MOV           SYM(arg3(s756)<16>.u64), rdx              ;     arg3(s756)<16>.u64 = MOV          (rdx).u64
    MOV           SYM(arg2(s757)<8>.u64), rsi               ;     arg2(s757)<8>.u64 = MOV           (rsi).u64
    MOV           SYM(arg1(s758)<0>.u64), rdi               ;     arg1(s758)<0>.u64 = MOV           (rdi).u64
    MOV           r14, [r13 + (0)]                          ;     s759(r14).u8    =  MOV            [s177(r13).u64 < (&ImplicitCallFlags)>].u8
    CALL          rax                                       ;     s753(rax).var   =  CALL           s752(rax).i64
    MOV           r12, rax                                  ;     s751(r12).var   =  MOV            s753(rax).var
    MOV           r8, rbx                                   ;     s760(r8).var    =  MOV            s59(rbx).var
    MOV           rdi, rbp                                  ;     s762(rdi).u64   =  MOV            (rbp).u64
    MOV           r9, 16777219                              ;     arg6(s763)(r9).u32 = MOV          16777219 (0x1000003).u32
    MOV           rcx, rax                                  ;     arg4(s765)(rcx).var = MOV         s761(rax).var
    MOV           rdx, 3                                    ;     arg3(s766)(rdx).u32 = MOV         3 (0x3).u32
    MOV           rsi, 3                                    ;     arg2(s767)(rsi).u32 = MOV         3 (0x3).u32
    MOV           rax, SimpleProfileCall                    ;     s769(rax).u64   =  MOV            SimpleProfileCall.u64
    CALL          rax                                       ;                        CALL           s769(rax).u64
    MOV           [r13 + (0)], r14                          ;     [s177(r13).u64 < (&ImplicitCallFlags)>].u8 = MOV  s759(r14).u8
    MOV           rax, r12                                  ;     s770(rax).i64   =  MOV            s751(r12).var
    SHR           rax, 48                                   ;     s770(rax).i64   =  SHR            s770(rax).i64, 48 (0x30).i8
    JNE           L58                                       ;                        JNE            $L58
    MOV           rax, [r12 + (8)]                          ;     s771(rax).i64   =  MOV            [s751(r12).var+8].i64
    CMP           [rax + (0)], 22                           ;                        CMP            [s771(rax).i64].i32, 22 (0x16).i32
    JGT           L59                                       ;                        JGT            $L59
L58:                                                        ; $L58:
    MOV           r12, r15                                  ;     s751(r12).var   =  MOV            s745(r15).var
L59:                                                        ; $L59:
    MOV           rax, [rbx + (8)]                          ;     s772(rax).i64   =  MOV            [s59(rbx).var+8].i64
    XOR           rcx, rcx                                  ;     s773(rcx).i32   =  XOR            s773(rcx).i32, s773(rcx).i32
    CMP           [rax + (0)], 27                           ;                        CMP            [s772(rax).i64].i32, 27 (0x1B).i32
    JNE           L60                                       ;                        JNE            $L60
    CMOVNE        rbx, rcx                                  ;     s59(rbx).var    =  CMOVNE         s773(rcx).u64
    MOV           rax, [rbx + (32)]                         ;     s774(rax).var   =  MOV            [s59(rbx).var+32].i64
    MOV           rax, [rax + (38)]                         ;     s775(rax).i8    =  MOV            [s774(rax).var+38].u8
    TEST          rax, rax                                  ;                        TEST           s775(rax).i8, s775(rax).i8
    JNE           L61                                       ;                        JNE            $L61
L60:                                                        ; $L60:
    MOV           rcx, rbp                                  ;     s737(rcx).u64   =  MOV            (rbp).u64
    MOV           rdi, r12                                  ;     s738(rdi).var   =  MOV            s68(r12).var
    MOV           rdx, 6                                    ;     arg3(s741)(rdx).u32 = MOV         6 (0x6).u32
    MOV           rsi, 224                                  ;     arg2(s742)(rsi).u32 = MOV         224 (0xE0).u32
    MOV           rax, ProfiledLdFld                        ;     s744(rax).u64   =  MOV            ProfiledLdFld.u64
    CALL          rax                                       ;     s739(rax).var   =  CALL           s744(rax).u64
    MOV           rdi, 0x00007FDF9CB74000                   ;     s732(rdi).var   =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdx, rax                                  ;     arg3(s733)(rdx).var = MOV         s731(rax).var
    MOV           rsi, 222                                  ;     arg2(s734)(rsi).u32 = MOV         222 (0xDE).u32
    MOV           rax, Op_InitConstFld                      ;     s736(rax).u64   =  MOV            Op_InitConstFld.u64
    CALL          rax                                       ;                        CALL           s736(rax).u64
                                                            ; 
                                                            ; 
                                                            ;   Line  18: const arrays = {
                                                            ;   Col    1: ^
                                                            ;                        StatementBoundary  #5
    MOV           r11, SYM(s715<-24>.u64)                   ;     s715(r11).u64   =  MOV            s715<-24>.u64
    MOV           rbx, [r11 + (0)]                          ;     s714(rbx).u64   =  MOV            [s715(r11).u64 < (Unknown)>].u64
    TEST          rbx, rbx                                  ;                        TEST           s714(rbx).u64, s714(rbx).u64
    JEQ           L51                                       ;                        JEQ            $L51
    TEST          [rbx + (49)], 1                           ;                        TEST           [s714(rbx).u64+49].i8, 1 (0x1).i8
    JEQ           L51                                       ;                        JEQ            $L51
L52:                                                        ; $L52:
    MOV           r12, [r13 + (22072)]                      ;     s71(r12)[UninitializedObject].var = MOV  [s177(r13).u64+XX < (&RecyclerAllocatorFreeList)>].u64
    MOV           SYM(s71<-24>), r12                        ;     s71<-24>.var    =  MOV            s71(r12).var
    LEA           rax, [r12 + (64)]                         ;     s721(rax).u64   =  LEA            [s71(r12)[UninitializedObject].var+64].u64
    CMP           rax, [r13 + (22064)]                      ;                        CMP            s721(rax).u64, [s177(r13).u64+XX < (&RecyclerAllocatorEndAddress)>].u64
    JA            L53                                       ;                        JA             $L53
    MOV           [r13 + (22072)], rax                      ;     [s177(r13).u64+XX < (&RecyclerAllocatorFreeList)>].u64 = MOV  s721(rax).u64
L54:                                                        ; $L54:
    LEA           rax, [r12 + (0)]                          ;     s727(rax).u64   =  LEA            [s71(r12)[UninitializedObject].var].u64
    MOV           r11, SYM(s726<-16>.u64)                   ;     s726(r11).u64   =  MOV            s726<-16>.u64
    MOV           [r12 + (0)], r11                          ;     [s71(r12)[UninitializedObject].var].u64 = MOV  s726(r11).u64
    NOP                                                     ;                        NOP            
    SHR           rax, 12                                   ;     s727(rax).u64   =  SHR            s727(rax).u64, 12 (0xC).i8
    MOV           rcx, 0x00007FDF9DC20000                   ;     s728(rcx).i64   =  MOV            0xXXXXXXXX (&WriteBarrierCardTable).u64
    MOV           [rcx + rax * 0 + (0)], 1                  ;     [s728(rcx).i64+s727(rax).u64].i8 = MOV  1 (0x1).i8
    LEA           rax, [r12 + (8)]                          ;     s729(rax).u64   =  LEA            [s71(r12)[UninitializedObject].var+8].u64
    MOV           [r12 + (8)], rbx                          ;     [s71(r12)[UninitializedObject].var+8].u64 = MOV  s714(rbx).u64
    SHR           rax, 12                                   ;     s729(rax).u64   =  SHR            s729(rax).u64, 12 (0xC).i8
    MOV           rcx, 0x00007FDF9DC20000                   ;     s730(rcx).i64   =  MOV            0xXXXXXXXX (&WriteBarrierCardTable).u64
    MOV           [rcx + rax * 0 + (0)], 1                  ;     [s730(rcx).i64+s729(rax).u64].i8 = MOV  1 (0x1).i8
    MOV           rcx, rbp                                  ;     s706(rcx).u64   =  MOV            (rbp).u64
    MOV           rdi, 0x00007FDF9CB74000                   ;     s707(rdi).var   =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdx, 23                                   ;     arg3(s710)(rdx).u32 = MOV         23 (0x17).u32
    MOV           rsi, 425                                  ;     arg2(s711)(rsi).u32 = MOV         425 (0x1A9).u32
    MOV           rax, ProfiledLdRootFld                    ;     s713(rax).u64   =  MOV            ProfiledLdRootFld.u64
    CALL          rax                                       ;     s708(rax).var   =  CALL           s713(rax).u64
    MOV           rbx, rax                                  ;     s73(rbx).var    =  MOV            s708(rax).var
    MOV           rcx, rbp                                  ;     s698(rcx).u64   =  MOV            (rbp).u64
    MOV           rdi, 0x00007FDF9CB74000                   ;     s699(rdi).var   =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdx, 22                                   ;     arg3(s702)(rdx).u32 = MOV         22 (0x16).u32
    MOV           rsi, 836                                  ;     arg2(s703)(rsi).u32 = MOV         836 (0x344).u32
    MOV           rax, ProfiledLdRootFld                    ;     s705(rax).u64   =  MOV            ProfiledLdRootFld.u64
    CALL          rax                                       ;     s700(rax).var   =  CALL           s705(rax).u64
    MOV           rcx, rbp                                  ;     s690(rcx).u64   =  MOV            (rbp).u64
    MOV           rdx, 7                                    ;     arg3(s694)(rdx).u32 = MOV         7 (0x7).u32
    MOV           rsi, 420                                  ;     arg2(s695)(rsi).u32 = MOV         420 (0x1A4).u32
    MOV           rdi, rax                                  ;     arg1(s696)(rdi).var = MOV         s691(rax).var
    MOV           rax, ProfiledLdFld                        ;     s697(rax).u64   =  MOV            ProfiledLdFld.u64
    CALL          rax                                       ;     s692(rax).var   =  CALL           s697(rax).u64
    MOV           r14, rax                                  ;     s157(r14).var   =  MOV            s77(rax).var!
    MOV           rdi, rbx                                  ;     s656(rdi).var   =  MOV            s73(rbx).var
    MOV           rsi, 0x000055A6793BE038                   ;     arg2(s658)(rsi).u64 = MOV         0xXXXXXXXX (ScriptContext).u64
    MOV           rax, NewScObjectNoCtor                    ;     s660(rax).u64   =  MOV            NewScObjectNoCtor.u64
    CALL          rax                                       ;     s657(rax).var   =  CALL           s660(rax).u64
    MOV           r15, rax                                  ;     s655(r15).var   =  MOV            s657(rax).var
    NOP           2                                         ;                        NOP            2 (0x2).i8
    MOV           rax, [rbx + (8)]                          ;     s662(rax).i64   =  MOV            [s73(rbx).var!+8].i64
    MOV           rax, [rax + (24)]                         ;     s662(rax).i64   =  MOV            [s662(rax).i64+24].u64
    MOV           rdx, r15                                  ;     (rdx).i64       =  MOV            s655(r15).var
    MOV           rdi, rbx                                  ;     (rdi).i64       =  MOV            s73(rbx).var
    MOV           rcx, r14                                  ;     arg2(s78)(rcx).var = MOV          s157(r14).var!
    MOV           rsi, 16777218                             ;     (rsi).i64       =  MOV            16777218 (0x1000002).i64
    MOV           SYM(arg4(s664)<24>.u64), rcx              ;     arg4(s664)<24>.u64 = MOV          (rcx).u64
    MOV           SYM(arg3(s665)<16>.u64), rdx              ;     arg3(s665)<16>.u64 = MOV          (rdx).u64
    MOV           SYM(arg2(s666)<8>.u64), rsi               ;     arg2(s666)<8>.u64 = MOV           (rsi).u64
    MOV           SYM(arg1(s667)<0>.u64), rdi               ;     arg1(s667)<0>.u64 = MOV           (rdi).u64
    MOV           r14, [r13 + (0)]                          ;     s668(r14).u8    =  MOV            [s177(r13).u64 < (&ImplicitCallFlags)>].u8
    CALL          rax                                       ;     s663(rax).var   =  CALL           s662(rax).i64
    MOV           r12, rax                                  ;     s661(r12).var   =  MOV            s663(rax).var
    MOV           rcx, rbx                                  ;     s669(rcx).var   =  MOV            s73(rbx).var
    MOV           rdi, rbp                                  ;     s671(rdi).u64   =  MOV            (rbp).u64
    MOV           r8, 16777218                              ;     arg5(s672)(r8).u32 = MOV          16777218 (0x1000002).u32
    MOV           rdx, rax                                  ;     arg3(s674)(rdx).var = MOV         s670(rax).var
    MOV           rsi, 4                                    ;     arg2(s675)(rsi).u32 = MOV         4 (0x4).u32
    MOV           rax, SimpleProfileCall_DefaultInlineCacheIndex ;   s677(rax).u64 = MOV            SimpleProfileCall_DefaultInlineCacheIndex.u64
    CALL          rax                                       ;                        CALL           s677(rax).u64
    MOV           [r13 + (0)], r14                          ;     [s177(r13).u64 < (&ImplicitCallFlags)>].u8 = MOV  s668(r14).u8
    MOV           rax, r12                                  ;     s678(rax).i64   =  MOV            s661(r12).var
    SHR           rax, 48                                   ;     s678(rax).i64   =  SHR            s678(rax).i64, 48 (0x30).i8
    JNE           L47                                       ;                        JNE            $L47
    MOV           rax, [r12 + (8)]                          ;     s679(rax).i64   =  MOV            [s661(r12).var+8].i64
    CMP           [rax + (0)], 22                           ;                        CMP            [s679(rax).i64].i32, 22 (0x16).i32
    JGT           L48                                       ;                        JGT            $L48
L47:                                                        ; $L47:
    MOV           r12, r15                                  ;     s661(r12).var   =  MOV            s655(r15).var
L48:                                                        ; $L48:
    MOV           rax, [rbx + (8)]                          ;     s680(rax).i64   =  MOV            [s73(rbx).var+8].i64
    XOR           rcx, rcx                                  ;     s681(rcx).i32   =  XOR            s681(rcx).i32, s681(rcx).i32
    CMP           [rax + (0)], 27                           ;                        CMP            [s680(rax).i64].i32, 27 (0x1B).i32
    JNE           L49                                       ;                        JNE            $L49
    CMOVNE        rbx, rcx                                  ;     s73(rbx).var    =  CMOVNE         s681(rcx).u64
    MOV           rax, [rbx + (32)]                         ;     s682(rax).var   =  MOV            [s73(rbx).var+32].i64
    MOV           rax, [rax + (38)]                         ;     s683(rax).i8    =  MOV            [s682(rax).var+38].u8
    TEST          rax, rax                                  ;                        TEST           s683(rax).i8, s683(rax).i8
    JNE           L50                                       ;                        JNE            $L50
L49:                                                        ; $L49:
    MOV           r8, rbp                                   ;     s646(r8).u64    =  MOV            (rbp).u64
    MOV           rcx, r12                                  ;     s647(rcx).var   =  MOV            s79(r12).var!
    MOV           rbx, SYM(s71<-24>)                        ;     s71(rbx).var    =  MOV            s71<-24>.var
    MOV           rdi, rbx                                  ;     s648(rdi).var   =  MOV            s71(rbx).var
    MOV           rdx, 8                                    ;     arg3(s651)(rdx).u32 = MOV         8 (0x8).u32
    MOV           rsi, 824                                  ;     arg2(s652)(rsi).u32 = MOV         824 (0x338).u32
    MOV           rax, ProfiledInitFld                      ;     s654(rax).u64   =  MOV            ProfiledInitFld.u64
    CALL          rax                                       ;                        CALL           s654(rax).u64
    MOV           rcx, rbp                                  ;     s638(rcx).u64   =  MOV            (rbp).u64
    MOV           rdi, 0x00007FDF9CB74000                   ;     s639(rdi).var   =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdx, 24                                   ;     arg3(s642)(rdx).u32 = MOV         24 (0x18).u32
    MOV           rsi, 424                                  ;     arg2(s643)(rsi).u32 = MOV         424 (0x1A8).u32
    MOV           rax, ProfiledLdRootFld                    ;     s645(rax).u64   =  MOV            ProfiledLdRootFld.u64
    CALL          rax                                       ;     s640(rax).var   =  CALL           s645(rax).u64
    MOV           r12, rax                                  ;     s82(r12).var    =  MOV            s640(rax).var
    MOV           rcx, rbp                                  ;     s630(rcx).u64   =  MOV            (rbp).u64
    MOV           rdi, 0x00007FDF9CB74000                   ;     s631(rdi).var   =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdx, 22                                   ;     arg3(s634)(rdx).u32 = MOV         22 (0x16).u32
    MOV           rsi, 836                                  ;     arg2(s635)(rsi).u32 = MOV         836 (0x344).u32
    MOV           rax, ProfiledLdRootFld                    ;     s637(rax).u64   =  MOV            ProfiledLdRootFld.u64
    CALL          rax                                       ;     s632(rax).var   =  CALL           s637(rax).u64
    MOV           rcx, rbp                                  ;     s622(rcx).u64   =  MOV            (rbp).u64
    MOV           rdx, 9                                    ;     arg3(s626)(rdx).u32 = MOV         9 (0x9).u32
    MOV           rsi, 420                                  ;     arg2(s627)(rsi).u32 = MOV         420 (0x1A4).u32
    MOV           rdi, rax                                  ;     arg1(s628)(rdi).var = MOV         s623(rax).var
    MOV           rax, ProfiledLdFld                        ;     s629(rax).u64   =  MOV            ProfiledLdFld.u64
    CALL          rax                                       ;     s624(rax).var   =  CALL           s629(rax).u64
    MOV           r14, rax                                  ;     s156(r14).var   =  MOV            s86(rax).var!
    MOV           rdi, r12                                  ;     s588(rdi).var   =  MOV            s82(r12).var
    MOV           rsi, 0x000055A6793BE038                   ;     arg2(s590)(rsi).u64 = MOV         0xXXXXXXXX (ScriptContext).u64
    MOV           rax, NewScObjectNoCtor                    ;     s592(rax).u64   =  MOV            NewScObjectNoCtor.u64
    CALL          rax                                       ;     s589(rax).var   =  CALL           s592(rax).u64
    MOV           r15, rax                                  ;     s587(r15).var   =  MOV            s589(rax).var
    MOV           rax, [r12 + (8)]                          ;     s594(rax).i64   =  MOV            [s82(r12).var!+8].i64
    MOV           rax, [rax + (24)]                         ;     s594(rax).i64   =  MOV            [s594(rax).i64+24].u64
    MOV           rdx, r15                                  ;     (rdx).i64       =  MOV            s587(r15).var
    MOV           rdi, r12                                  ;     (rdi).i64       =  MOV            s82(r12).var
    MOV           rcx, r14                                  ;     arg2(s87)(rcx).var = MOV          s156(r14).var!
    MOV           rsi, 16777218                             ;     (rsi).i64       =  MOV            16777218 (0x1000002).i64
    MOV           SYM(arg4(s596)<24>.u64), rcx              ;     arg4(s596)<24>.u64 = MOV          (rcx).u64
    MOV           SYM(arg3(s597)<16>.u64), rdx              ;     arg3(s597)<16>.u64 = MOV          (rdx).u64
    MOV           SYM(arg2(s598)<8>.u64), rsi               ;     arg2(s598)<8>.u64 = MOV           (rsi).u64
    MOV           SYM(arg1(s599)<0>.u64), rdi               ;     arg1(s599)<0>.u64 = MOV           (rdi).u64
    MOV           r14, [r13 + (0)]                          ;     s600(r14).u8    =  MOV            [s177(r13).u64 < (&ImplicitCallFlags)>].u8
    CALL          rax                                       ;     s595(rax).var   =  CALL           s594(rax).i64
    MOV           rbx, rax                                  ;     s593(rbx).var   =  MOV            s595(rax).var
    MOV           rcx, r12                                  ;     s601(rcx).var   =  MOV            s82(r12).var
    MOV           rdi, rbp                                  ;     s603(rdi).u64   =  MOV            (rbp).u64
    MOV           r8, 16777218                              ;     arg5(s604)(r8).u32 = MOV          16777218 (0x1000002).u32
    MOV           rdx, rax                                  ;     arg3(s606)(rdx).var = MOV         s602(rax).var
    MOV           rsi, 5                                    ;     arg2(s607)(rsi).u32 = MOV         5 (0x5).u32
    MOV           rax, SimpleProfileCall_DefaultInlineCacheIndex ;   s609(rax).u64 = MOV            SimpleProfileCall_DefaultInlineCacheIndex.u64
    CALL          rax                                       ;                        CALL           s609(rax).u64
    MOV           [r13 + (0)], r14                          ;     [s177(r13).u64 < (&ImplicitCallFlags)>].u8 = MOV  s600(r14).u8
    MOV           rax, rbx                                  ;     s610(rax).i64   =  MOV            s593(rbx).var
    SHR           rax, 48                                   ;     s610(rax).i64   =  SHR            s610(rax).i64, 48 (0x30).i8
    JNE           L40                                       ;                        JNE            $L40
    MOV           rax, [rbx + (8)]                          ;     s611(rax).i64   =  MOV            [s593(rbx).var+8].i64
    CMP           [rax + (0)], 22                           ;                        CMP            [s611(rax).i64].i32, 22 (0x16).i32
    JGT           L41                                       ;                        JGT            $L41
L40:                                                        ; $L40:
    MOV           rbx, r15                                  ;     s593(rbx).var   =  MOV            s587(r15).var
L41:                                                        ; $L41:
    MOV           rax, [r12 + (8)]                          ;     s612(rax).i64   =  MOV            [s82(r12).var+8].i64
    XOR           rcx, rcx                                  ;     s613(rcx).i32   =  XOR            s613(rcx).i32, s613(rcx).i32
    CMP           [rax + (0)], 27                           ;                        CMP            [s612(rax).i64].i32, 27 (0x1B).i32
    JNE           L42                                       ;                        JNE            $L42
    CMOVNE        r12, rcx                                  ;     s82(r12).var    =  CMOVNE         s613(rcx).u64
    MOV           rax, [r12 + (32)]                         ;     s614(rax).var   =  MOV            [s82(r12).var+32].i64
    NOP           2                                         ;                        NOP            2 (0x2).i8
    MOV           rax, [rax + (38)]                         ;     s615(rax).i8    =  MOV            [s614(rax).var+38].u8
    TEST          rax, rax                                  ;                        TEST           s615(rax).i8, s615(rax).i8
    JNE           L43                                       ;                        JNE            $L43
L42:                                                        ; $L42:
    MOV           r8, rbp                                   ;     s578(r8).u64    =  MOV            (rbp).u64
    MOV           rcx, rbx                                  ;     s579(rcx).var   =  MOV            s88(rbx).var!
    MOV           rbx, SYM(s71<-24>)                        ;     s71(rbx).var    =  MOV            s71<-24>.var
    MOV           rdi, rbx                                  ;     s580(rdi).var   =  MOV            s71(rbx).var
    MOV           rdx, 10                                   ;     arg3(s583)(rdx).u32 = MOV         10 (0xA).u32
    MOV           rsi, 825                                  ;     arg2(s584)(rsi).u32 = MOV         825 (0x339).u32
    MOV           rax, ProfiledInitFld                      ;     s586(rax).u64   =  MOV            ProfiledInitFld.u64
    CALL          rax                                       ;                        CALL           s586(rax).u64
    MOV           rcx, rbp                                  ;     s570(rcx).u64   =  MOV            (rbp).u64
    MOV           rdi, 0x00007FDF9CB74000                   ;     s571(rdi).var   =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdx, 25                                   ;     arg3(s574)(rdx).u32 = MOV         25 (0x19).u32
    MOV           rsi, 423                                  ;     arg2(s575)(rsi).u32 = MOV         423 (0x1A7).u32
    MOV           rax, ProfiledLdRootFld                    ;     s577(rax).u64   =  MOV            ProfiledLdRootFld.u64
    CALL          rax                                       ;     s572(rax).var   =  CALL           s577(rax).u64
    MOV           r12, rax                                  ;     s91(r12).var    =  MOV            s572(rax).var
    MOV           rcx, rbp                                  ;     s562(rcx).u64   =  MOV            (rbp).u64
    MOV           rdi, 0x00007FDF9CB74000                   ;     s563(rdi).var   =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdx, 22                                   ;     arg3(s566)(rdx).u32 = MOV         22 (0x16).u32
    MOV           rsi, 836                                  ;     arg2(s567)(rsi).u32 = MOV         836 (0x344).u32
    MOV           rax, ProfiledLdRootFld                    ;     s569(rax).u64   =  MOV            ProfiledLdRootFld.u64
    CALL          rax                                       ;     s564(rax).var   =  CALL           s569(rax).u64
    MOV           rcx, rbp                                  ;     s554(rcx).u64   =  MOV            (rbp).u64
    MOV           rdx, 11                                   ;     arg3(s558)(rdx).u32 = MOV         11 (0xB).u32
    MOV           rsi, 420                                  ;     arg2(s559)(rsi).u32 = MOV         420 (0x1A4).u32
    MOV           rdi, rax                                  ;     arg1(s560)(rdi).var = MOV         s555(rax).var
    MOV           rax, ProfiledLdFld                        ;     s561(rax).u64   =  MOV            ProfiledLdFld.u64
    CALL          rax                                       ;     s556(rax).var   =  CALL           s561(rax).u64
    MOV           r14, rax                                  ;     s155(r14).var   =  MOV            s95(rax).var!
    MOV           rdi, r12                                  ;     s520(rdi).var   =  MOV            s91(r12).var
    MOV           rsi, 0x000055A6793BE038                   ;     arg2(s522)(rsi).u64 = MOV         0xXXXXXXXX (ScriptContext).u64
    MOV           rax, NewScObjectNoCtor                    ;     s524(rax).u64   =  MOV            NewScObjectNoCtor.u64
    CALL          rax                                       ;     s521(rax).var   =  CALL           s524(rax).u64
    MOV           r15, rax                                  ;     s519(r15).var   =  MOV            s521(rax).var
    MOV           rax, [r12 + (8)]                          ;     s526(rax).i64   =  MOV            [s91(r12).var!+8].i64
    MOV           rax, [rax + (24)]                         ;     s526(rax).i64   =  MOV            [s526(rax).i64+24].u64
    MOV           rdx, r15                                  ;     (rdx).i64       =  MOV            s519(r15).var
    MOV           rdi, r12                                  ;     (rdi).i64       =  MOV            s91(r12).var
    MOV           rcx, r14                                  ;     arg2(s96)(rcx).var = MOV          s155(r14).var!
    MOV           rsi, 16777218                             ;     (rsi).i64       =  MOV            16777218 (0x1000002).i64
    MOV           SYM(arg4(s528)<24>.u64), rcx              ;     arg4(s528)<24>.u64 = MOV          (rcx).u64
    MOV           SYM(arg3(s529)<16>.u64), rdx              ;     arg3(s529)<16>.u64 = MOV          (rdx).u64
    MOV           SYM(arg2(s530)<8>.u64), rsi               ;     arg2(s530)<8>.u64 = MOV           (rsi).u64
    MOV           SYM(arg1(s531)<0>.u64), rdi               ;     arg1(s531)<0>.u64 = MOV           (rdi).u64
    MOV           r14, [r13 + (0)]                          ;     s532(r14).u8    =  MOV            [s177(r13).u64 < (&ImplicitCallFlags)>].u8
    CALL          rax                                       ;     s527(rax).var   =  CALL           s526(rax).i64
    MOV           rbx, rax                                  ;     s525(rbx).var   =  MOV            s527(rax).var
    MOV           rcx, r12                                  ;     s533(rcx).var   =  MOV            s91(r12).var
    MOV           rdi, rbp                                  ;     s535(rdi).u64   =  MOV            (rbp).u64
    MOV           r8, 16777218                              ;     arg5(s536)(r8).u32 = MOV          16777218 (0x1000002).u32
    MOV           rdx, rax                                  ;     arg3(s538)(rdx).var = MOV         s534(rax).var
    MOV           rsi, 6                                    ;     arg2(s539)(rsi).u32 = MOV         6 (0x6).u32
    MOV           rax, SimpleProfileCall_DefaultInlineCacheIndex ;   s541(rax).u64 = MOV            SimpleProfileCall_DefaultInlineCacheIndex.u64
    CALL          rax                                       ;                        CALL           s541(rax).u64
    MOV           [r13 + (0)], r14                          ;     [s177(r13).u64 < (&ImplicitCallFlags)>].u8 = MOV  s532(r14).u8
    MOV           rax, rbx                                  ;     s542(rax).i64   =  MOV            s525(rbx).var
    SHR           rax, 48                                   ;     s542(rax).i64   =  SHR            s542(rax).i64, 48 (0x30).i8
    JNE           L33                                       ;                        JNE            $L33
    MOV           rax, [rbx + (8)]                          ;     s543(rax).i64   =  MOV            [s525(rbx).var+8].i64
    CMP           [rax + (0)], 22                           ;                        CMP            [s543(rax).i64].i32, 22 (0x16).i32
    JGT           L34                                       ;                        JGT            $L34
L33:                                                        ; $L33:
    MOV           rbx, r15                                  ;     s525(rbx).var   =  MOV            s519(r15).var
L34:                                                        ; $L34:
    MOV           rax, [r12 + (8)]                          ;     s544(rax).i64   =  MOV            [s91(r12).var+8].i64
    XOR           rcx, rcx                                  ;     s545(rcx).i32   =  XOR            s545(rcx).i32, s545(rcx).i32
    CMP           [rax + (0)], 27                           ;                        CMP            [s544(rax).i64].i32, 27 (0x1B).i32
    JNE           L35                                       ;                        JNE            $L35
    CMOVNE        r12, rcx                                  ;     s91(r12).var    =  CMOVNE         s545(rcx).u64
    MOV           rax, [r12 + (32)]                         ;     s546(rax).var   =  MOV            [s91(r12).var+32].i64
    MOV           rax, [rax + (38)]                         ;     s547(rax).i8    =  MOV            [s546(rax).var+38].u8
    TEST          rax, rax                                  ;                        TEST           s547(rax).i8, s547(rax).i8
    JNE           L36                                       ;                        JNE            $L36
L35:                                                        ; $L35:
    MOV           r8, rbp                                   ;     s510(r8).u64    =  MOV            (rbp).u64
    MOV           rcx, rbx                                  ;     s511(rcx).var   =  MOV            s97(rbx).var!
    MOV           rbx, SYM(s71<-24>)                        ;     s71(rbx).var    =  MOV            s71<-24>.var
    MOV           rdi, rbx                                  ;     s512(rdi).var   =  MOV            s71(rbx).var
    MOV           rdx, 12                                   ;     arg3(s515)(rdx).u32 = MOV         12 (0xC).u32
    MOV           rsi, 826                                  ;     arg2(s516)(rsi).u32 = MOV         826 (0x33A).u32
    MOV           rax, ProfiledInitFld                      ;     s518(rax).u64   =  MOV            ProfiledInitFld.u64
    CALL          rax                                       ;                        CALL           s518(rax).u64
    MOV           rcx, rbp                                  ;     s502(rcx).u64   =  MOV            (rbp).u64
    MOV           rdi, 0x00007FDF9CB74000                   ;     s503(rdi).var   =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdx, 26                                   ;     arg3(s506)(rdx).u32 = MOV         26 (0x1A).u32
    MOV           rsi, 430                                  ;     arg2(s507)(rsi).u32 = MOV         430 (0x1AE).u32
    MOV           rax, ProfiledLdRootFld                    ;     s509(rax).u64   =  MOV            ProfiledLdRootFld.u64
    CALL          rax                                       ;     s504(rax).var   =  CALL           s509(rax).u64
    MOV           r12, rax                                  ;     s100(r12).var   =  MOV            s504(rax).var
    MOV           rcx, rbp                                  ;     s494(rcx).u64   =  MOV            (rbp).u64
    MOV           rdi, 0x00007FDF9CB74000                   ;     s495(rdi).var   =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdx, 22                                   ;     arg3(s498)(rdx).u32 = MOV         22 (0x16).u32
    MOV           rsi, 836                                  ;     arg2(s499)(rsi).u32 = MOV         836 (0x344).u32
    MOV           rax, ProfiledLdRootFld                    ;     s501(rax).u64   =  MOV            ProfiledLdRootFld.u64
    CALL          rax                                       ;     s496(rax).var   =  CALL           s501(rax).u64
    MOV           rcx, rbp                                  ;     s486(rcx).u64   =  MOV            (rbp).u64
    MOV           rdx, 13                                   ;     arg3(s490)(rdx).u32 = MOV         13 (0xD).u32
    MOV           rsi, 420                                  ;     arg2(s491)(rsi).u32 = MOV         420 (0x1A4).u32
    MOV           rdi, rax                                  ;     arg1(s492)(rdi).var = MOV         s487(rax).var
    MOV           rax, ProfiledLdFld                        ;     s493(rax).u64   =  MOV            ProfiledLdFld.u64
    CALL          rax                                       ;     s488(rax).var   =  CALL           s493(rax).u64
    MOV           r14, rax                                  ;     s154(r14).var   =  MOV            s104(rax).var!
    MOV           rdi, r12                                  ;     s452(rdi).var   =  MOV            s100(r12).var
    MOV           rsi, 0x000055A6793BE038                   ;     arg2(s454)(rsi).u64 = MOV         0xXXXXXXXX (ScriptContext).u64
    MOV           rax, NewScObjectNoCtor                    ;     s456(rax).u64   =  MOV            NewScObjectNoCtor.u64
    CALL          rax                                       ;     s453(rax).var   =  CALL           s456(rax).u64
    MOV           r15, rax                                  ;     s451(r15).var   =  MOV            s453(rax).var
    MOV           rax, [r12 + (8)]                          ;     s458(rax).i64   =  MOV            [s100(r12).var!+8].i64
    MOV           rax, [rax + (24)]                         ;     s458(rax).i64   =  MOV            [s458(rax).i64+24].u64
    MOV           rdx, r15                                  ;     (rdx).i64       =  MOV            s451(r15).var
    MOV           rdi, r12                                  ;     (rdi).i64       =  MOV            s100(r12).var
    MOV           rcx, r14                                  ;     arg2(s105)(rcx).var = MOV         s154(r14).var!
    MOV           rsi, 16777218                             ;     (rsi).i64       =  MOV            16777218 (0x1000002).i64
    MOV           SYM(arg4(s460)<24>.u64), rcx              ;     arg4(s460)<24>.u64 = MOV          (rcx).u64
    MOV           SYM(arg3(s461)<16>.u64), rdx              ;     arg3(s461)<16>.u64 = MOV          (rdx).u64
    MOV           SYM(arg2(s462)<8>.u64), rsi               ;     arg2(s462)<8>.u64 = MOV           (rsi).u64
    MOV           SYM(arg1(s463)<0>.u64), rdi               ;     arg1(s463)<0>.u64 = MOV           (rdi).u64
    MOV           r14, [r13 + (0)]                          ;     s464(r14).u8    =  MOV            [s177(r13).u64 < (&ImplicitCallFlags)>].u8
    CALL          rax                                       ;     s459(rax).var   =  CALL           s458(rax).i64
    MOV           rbx, rax                                  ;     s457(rbx).var   =  MOV            s459(rax).var
    MOV           rcx, r12                                  ;     s465(rcx).var   =  MOV            s100(r12).var
    MOV           rdi, rbp                                  ;     s467(rdi).u64   =  MOV            (rbp).u64
    MOV           r8, 16777218                              ;     arg5(s468)(r8).u32 = MOV          16777218 (0x1000002).u32
    MOV           rdx, rax                                  ;     arg3(s470)(rdx).var = MOV         s466(rax).var
    MOV           rsi, 7                                    ;     arg2(s471)(rsi).u32 = MOV         7 (0x7).u32
    MOV           rax, SimpleProfileCall_DefaultInlineCacheIndex ;   s473(rax).u64 = MOV            SimpleProfileCall_DefaultInlineCacheIndex.u64
    CALL          rax                                       ;                        CALL           s473(rax).u64
    MOV           [r13 + (0)], r14                          ;     [s177(r13).u64 < (&ImplicitCallFlags)>].u8 = MOV  s464(r14).u8
    MOV           rax, rbx                                  ;     s474(rax).i64   =  MOV            s457(rbx).var
    SHR           rax, 48                                   ;     s474(rax).i64   =  SHR            s474(rax).i64, 48 (0x30).i8
    JNE           L26                                       ;                        JNE            $L26
    MOV           rax, [rbx + (8)]                          ;     s475(rax).i64   =  MOV            [s457(rbx).var+8].i64
    CMP           [rax + (0)], 22                           ;                        CMP            [s475(rax).i64].i32, 22 (0x16).i32
    JGT           L27                                       ;                        JGT            $L27
L26:                                                        ; $L26:
    MOV           rbx, r15                                  ;     s457(rbx).var   =  MOV            s451(r15).var
L27:                                                        ; $L27:
    NOP                                                     ;                        NOP            
    MOV           rax, [r12 + (8)]                          ;     s476(rax).i64   =  MOV            [s100(r12).var+8].i64
    XOR           rcx, rcx                                  ;     s477(rcx).i32   =  XOR            s477(rcx).i32, s477(rcx).i32
    CMP           [rax + (0)], 27                           ;                        CMP            [s476(rax).i64].i32, 27 (0x1B).i32
    JNE           L28                                       ;                        JNE            $L28
    CMOVNE        r12, rcx                                  ;     s100(r12).var   =  CMOVNE         s477(rcx).u64
    MOV           rax, [r12 + (32)]                         ;     s478(rax).var   =  MOV            [s100(r12).var+32].i64
    MOV           rax, [rax + (38)]                         ;     s479(rax).i8    =  MOV            [s478(rax).var+38].u8
    TEST          rax, rax                                  ;                        TEST           s479(rax).i8, s479(rax).i8
    JNE           L29                                       ;                        JNE            $L29
L28:                                                        ; $L28:
    MOV           r8, rbp                                   ;     s442(r8).u64    =  MOV            (rbp).u64
    MOV           rcx, rbx                                  ;     s443(rcx).var   =  MOV            s106(rbx).var!
    MOV           rbx, SYM(s71<-24>)                        ;     s71(rbx).var    =  MOV            s71<-24>.var
    MOV           rdi, rbx                                  ;     s444(rdi).var   =  MOV            s71(rbx).var
    MOV           rdx, 14                                   ;     arg3(s447)(rdx).u32 = MOV         14 (0xE).u32
    MOV           rsi, 827                                  ;     arg2(s448)(rsi).u32 = MOV         827 (0x33B).u32
    MOV           rax, ProfiledInitFld                      ;     s450(rax).u64   =  MOV            ProfiledInitFld.u64
    CALL          rax                                       ;                        CALL           s450(rax).u64
    MOV           rcx, rbp                                  ;     s434(rcx).u64   =  MOV            (rbp).u64
    MOV           rdi, 0x00007FDF9CB74000                   ;     s435(rdi).var   =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdx, 27                                   ;     arg3(s438)(rdx).u32 = MOV         27 (0x1B).u32
    MOV           rsi, 431                                  ;     arg2(s439)(rsi).u32 = MOV         431 (0x1AF).u32
    MOV           rax, ProfiledLdRootFld                    ;     s441(rax).u64   =  MOV            ProfiledLdRootFld.u64
    CALL          rax                                       ;     s436(rax).var   =  CALL           s441(rax).u64
    MOV           r12, rax                                  ;     s109(r12).var   =  MOV            s436(rax).var
    MOV           rcx, rbp                                  ;     s426(rcx).u64   =  MOV            (rbp).u64
    MOV           rdi, 0x00007FDF9CB74000                   ;     s427(rdi).var   =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdx, 22                                   ;     arg3(s430)(rdx).u32 = MOV         22 (0x16).u32
    MOV           rsi, 836                                  ;     arg2(s431)(rsi).u32 = MOV         836 (0x344).u32
    MOV           rax, ProfiledLdRootFld                    ;     s433(rax).u64   =  MOV            ProfiledLdRootFld.u64
    CALL          rax                                       ;     s428(rax).var   =  CALL           s433(rax).u64
    MOV           rcx, rbp                                  ;     s418(rcx).u64   =  MOV            (rbp).u64
    MOV           rdx, 15                                   ;     arg3(s422)(rdx).u32 = MOV         15 (0xF).u32
    MOV           rsi, 420                                  ;     arg2(s423)(rsi).u32 = MOV         420 (0x1A4).u32
    MOV           rdi, rax                                  ;     arg1(s424)(rdi).var = MOV         s419(rax).var
    MOV           rax, ProfiledLdFld                        ;     s425(rax).u64   =  MOV            ProfiledLdFld.u64
    CALL          rax                                       ;     s420(rax).var   =  CALL           s425(rax).u64
    MOV           r14, rax                                  ;     s153(r14).var   =  MOV            s113(rax).var!
    MOV           rdi, r12                                  ;     s384(rdi).var   =  MOV            s109(r12).var
    MOV           rsi, 0x000055A6793BE038                   ;     arg2(s386)(rsi).u64 = MOV         0xXXXXXXXX (ScriptContext).u64
    MOV           rax, NewScObjectNoCtor                    ;     s388(rax).u64   =  MOV            NewScObjectNoCtor.u64
    CALL          rax                                       ;     s385(rax).var   =  CALL           s388(rax).u64
    MOV           r15, rax                                  ;     s383(r15).var   =  MOV            s385(rax).var
    MOV           rax, [r12 + (8)]                          ;     s390(rax).i64   =  MOV            [s109(r12).var!+8].i64
    MOV           rax, [rax + (24)]                         ;     s390(rax).i64   =  MOV            [s390(rax).i64+24].u64
    MOV           rdx, r15                                  ;     (rdx).i64       =  MOV            s383(r15).var
    MOV           rdi, r12                                  ;     (rdi).i64       =  MOV            s109(r12).var
    MOV           rcx, r14                                  ;     arg2(s114)(rcx).var = MOV         s153(r14).var!
    MOV           rsi, 16777218                             ;     (rsi).i64       =  MOV            16777218 (0x1000002).i64
    MOV           SYM(arg4(s392)<24>.u64), rcx              ;     arg4(s392)<24>.u64 = MOV          (rcx).u64
    MOV           SYM(arg3(s393)<16>.u64), rdx              ;     arg3(s393)<16>.u64 = MOV          (rdx).u64
    MOV           SYM(arg2(s394)<8>.u64), rsi               ;     arg2(s394)<8>.u64 = MOV           (rsi).u64
    MOV           SYM(arg1(s395)<0>.u64), rdi               ;     arg1(s395)<0>.u64 = MOV           (rdi).u64
    MOV           r14, [r13 + (0)]                          ;     s396(r14).u8    =  MOV            [s177(r13).u64 < (&ImplicitCallFlags)>].u8
    CALL          rax                                       ;     s391(rax).var   =  CALL           s390(rax).i64
    MOV           rbx, rax                                  ;     s389(rbx).var   =  MOV            s391(rax).var
    MOV           rcx, r12                                  ;     s397(rcx).var   =  MOV            s109(r12).var
    MOV           rdi, rbp                                  ;     s399(rdi).u64   =  MOV            (rbp).u64
    MOV           r8, 16777218                              ;     arg5(s400)(r8).u32 = MOV          16777218 (0x1000002).u32
    MOV           rdx, rax                                  ;     arg3(s402)(rdx).var = MOV         s398(rax).var
    MOV           rsi, 8                                    ;     arg2(s403)(rsi).u32 = MOV         8 (0x8).u32
    MOV           rax, SimpleProfileCall_DefaultInlineCacheIndex ;   s405(rax).u64 = MOV            SimpleProfileCall_DefaultInlineCacheIndex.u64
    CALL          rax                                       ;                        CALL           s405(rax).u64
    MOV           [r13 + (0)], r14                          ;     [s177(r13).u64 < (&ImplicitCallFlags)>].u8 = MOV  s396(r14).u8
    MOV           rax, rbx                                  ;     s406(rax).i64   =  MOV            s389(rbx).var
    SHR           rax, 48                                   ;     s406(rax).i64   =  SHR            s406(rax).i64, 48 (0x30).i8
    JNE           L19                                       ;                        JNE            $L19
    MOV           rax, [rbx + (8)]                          ;     s407(rax).i64   =  MOV            [s389(rbx).var+8].i64
    CMP           [rax + (0)], 22                           ;                        CMP            [s407(rax).i64].i32, 22 (0x16).i32
    JGT           L20                                       ;                        JGT            $L20
L19:                                                        ; $L19:
    MOV           rbx, r15                                  ;     s389(rbx).var   =  MOV            s383(r15).var
L20:                                                        ; $L20:
    MOV           rax, [r12 + (8)]                          ;     s408(rax).i64   =  MOV            [s109(r12).var+8].i64
    XOR           rcx, rcx                                  ;     s409(rcx).i32   =  XOR            s409(rcx).i32, s409(rcx).i32
    CMP           [rax + (0)], 27                           ;                        CMP            [s408(rax).i64].i32, 27 (0x1B).i32
    JNE           L21                                       ;                        JNE            $L21
    CMOVNE        r12, rcx                                  ;     s109(r12).var   =  CMOVNE         s409(rcx).u64
    MOV           rax, [r12 + (32)]                         ;     s410(rax).var   =  MOV            [s109(r12).var+32].i64
    MOV           rax, [rax + (38)]                         ;     s411(rax).i8    =  MOV            [s410(rax).var+38].u8
    TEST          rax, rax                                  ;                        TEST           s411(rax).i8, s411(rax).i8
    JNE           L22                                       ;                        JNE            $L22
L21:                                                        ; $L21:
    MOV           r8, rbp                                   ;     s374(r8).u64    =  MOV            (rbp).u64
    MOV           rcx, rbx                                  ;     s375(rcx).var   =  MOV            s115(rbx).var!
    MOV           rbx, SYM(s71<-24>)                        ;     s71(rbx).var    =  MOV            s71<-24>.var
    MOV           rdi, rbx                                  ;     s376(rdi).var   =  MOV            s71(rbx).var
    MOV           rdx, 16                                   ;     arg3(s379)(rdx).u32 = MOV         16 (0x10).u32
    MOV           rsi, 828                                  ;     arg2(s380)(rsi).u32 = MOV         828 (0x33C).u32
    MOV           rax, ProfiledInitFld                      ;     s382(rax).u64   =  MOV            ProfiledInitFld.u64
    CALL          rax                                       ;                        CALL           s382(rax).u64
    MOV           rcx, rbp                                  ;     s366(rcx).u64   =  MOV            (rbp).u64
    MOV           rdi, 0x00007FDF9CB74000                   ;     s367(rdi).var   =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdx, 23                                   ;     arg3(s370)(rdx).u32 = MOV         23 (0x17).u32
    MOV           rsi, 425                                  ;     arg2(s371)(rsi).u32 = MOV         425 (0x1A9).u32
    MOV           rax, ProfiledLdRootFld                    ;     s373(rax).u64   =  MOV            ProfiledLdRootFld.u64
    CALL          rax                                       ;     s368(rax).var   =  CALL           s373(rax).u64
    MOV           r12, rax                                  ;     s117(r12).var   =  MOV            s368(rax).var
    MOV           rcx, rbp                                  ;     s358(rcx).u64   =  MOV            (rbp).u64
    MOV           rdi, 0x00007FDF9CB74000                   ;     s359(rdi).var   =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdx, 22                                   ;     arg3(s362)(rdx).u32 = MOV         22 (0x16).u32
    MOV           rsi, 836                                  ;     arg2(s363)(rsi).u32 = MOV         836 (0x344).u32
    MOV           rax, ProfiledLdRootFld                    ;     s365(rax).u64   =  MOV            ProfiledLdRootFld.u64
    CALL          rax                                       ;     s360(rax).var   =  CALL           s365(rax).u64
    MOV           rcx, rbp                                  ;     s350(rcx).u64   =  MOV            (rbp).u64
    MOV           rdx, 17                                   ;     arg3(s354)(rdx).u32 = MOV         17 (0x11).u32
    MOV           rsi, 420                                  ;     arg2(s355)(rsi).u32 = MOV         420 (0x1A4).u32
    MOV           rdi, rax                                  ;     arg1(s356)(rdi).var = MOV         s351(rax).var
    MOV           rax, ProfiledLdFld                        ;     s357(rax).u64   =  MOV            ProfiledLdFld.u64
    CALL          rax                                       ;     s352(rax).var   =  CALL           s357(rax).u64
    MOV           r14, rax                                  ;     s152(r14).var   =  MOV            s121(rax).var!
    MOV           rdi, r12                                  ;     s316(rdi).var   =  MOV            s117(r12).var
    MOV           rsi, 0x000055A6793BE038                   ;     arg2(s318)(rsi).u64 = MOV         0xXXXXXXXX (ScriptContext).u64
    MOV           rax, NewScObjectNoCtor                    ;     s320(rax).u64   =  MOV            NewScObjectNoCtor.u64
    CALL          rax                                       ;     s317(rax).var   =  CALL           s320(rax).u64
    MOV           r15, rax                                  ;     s315(r15).var   =  MOV            s317(rax).var
    MOV           rax, [r12 + (8)]                          ;     s322(rax).i64   =  MOV            [s117(r12).var!+8].i64
    MOV           rax, [rax + (24)]                         ;     s322(rax).i64   =  MOV            [s322(rax).i64+24].u64
    MOV           rdx, r15                                  ;     (rdx).i64       =  MOV            s315(r15).var
    MOV           rdi, r12                                  ;     (rdi).i64       =  MOV            s117(r12).var
    MOV           rcx, r14                                  ;     arg2(s122)(rcx).var = MOV         s152(r14).var!
    MOV           rsi, 16777218                             ;     (rsi).i64       =  MOV            16777218 (0x1000002).i64
    MOV           SYM(arg4(s324)<24>.u64), rcx              ;     arg4(s324)<24>.u64 = MOV          (rcx).u64
    MOV           SYM(arg3(s325)<16>.u64), rdx              ;     arg3(s325)<16>.u64 = MOV          (rdx).u64
    MOV           SYM(arg2(s326)<8>.u64), rsi               ;     arg2(s326)<8>.u64 = MOV           (rsi).u64
    MOV           SYM(arg1(s327)<0>.u64), rdi               ;     arg1(s327)<0>.u64 = MOV           (rdi).u64
    MOV           r14, [r13 + (0)]                          ;     s328(r14).u8    =  MOV            [s177(r13).u64 < (&ImplicitCallFlags)>].u8
    CALL          rax                                       ;     s323(rax).var   =  CALL           s322(rax).i64
    MOV           rbx, rax                                  ;     s321(rbx).var   =  MOV            s323(rax).var
    MOV           rcx, r12                                  ;     s329(rcx).var   =  MOV            s117(r12).var
    MOV           rdi, rbp                                  ;     s331(rdi).u64   =  MOV            (rbp).u64
    MOV           r8, 16777218                              ;     arg5(s332)(r8).u32 = MOV          16777218 (0x1000002).u32
    MOV           rdx, rax                                  ;     arg3(s334)(rdx).var = MOV         s330(rax).var
    MOV           rsi, 9                                    ;     arg2(s335)(rsi).u32 = MOV         9 (0x9).u32
    MOV           rax, SimpleProfileCall_DefaultInlineCacheIndex ;   s337(rax).u64 = MOV            SimpleProfileCall_DefaultInlineCacheIndex.u64
    CALL          rax                                       ;                        CALL           s337(rax).u64
    MOV           [r13 + (0)], r14                          ;     [s177(r13).u64 < (&ImplicitCallFlags)>].u8 = MOV  s328(r14).u8
    MOV           rax, rbx                                  ;     s338(rax).i64   =  MOV            s321(rbx).var
    SHR           rax, 48                                   ;     s338(rax).i64   =  SHR            s338(rax).i64, 48 (0x30).i8
    JNE           L12                                       ;                        JNE            $L12
    MOV           rax, [rbx + (8)]                          ;     s339(rax).i64   =  MOV            [s321(rbx).var+8].i64
    CMP           [rax + (0)], 22                           ;                        CMP            [s339(rax).i64].i32, 22 (0x16).i32
    JGT           L13                                       ;                        JGT            $L13
L12:                                                        ; $L12:
    MOV           rbx, r15                                  ;     s321(rbx).var   =  MOV            s315(r15).var
L13:                                                        ; $L13:
    MOV           rax, [r12 + (8)]                          ;     s340(rax).i64   =  MOV            [s117(r12).var+8].i64
    XOR           rcx, rcx                                  ;     s341(rcx).i32   =  XOR            s341(rcx).i32, s341(rcx).i32
    CMP           [rax + (0)], 27                           ;                        CMP            [s340(rax).i64].i32, 27 (0x1B).i32
    JNE           L14                                       ;                        JNE            $L14
    CMOVNE        r12, rcx                                  ;     s117(r12).var   =  CMOVNE         s341(rcx).u64
    MOV           rax, [r12 + (32)]                         ;     s342(rax).var   =  MOV            [s117(r12).var+32].i64
    MOV           rax, [rax + (38)]                         ;     s343(rax).i8    =  MOV            [s342(rax).var+38].u8
    TEST          rax, rax                                  ;                        TEST           s343(rax).i8, s343(rax).i8
    JNE           L15                                       ;                        JNE            $L15
L14:                                                        ; $L14:
    MOV           r8, rbp                                   ;     s306(r8).u64    =  MOV            (rbp).u64
    MOV           rcx, rbx                                  ;     s307(rcx).var   =  MOV            s123(rbx).var!
    MOV           rbx, SYM(s71<-24>)                        ;     s71(rbx).var    =  MOV            s71<-24>.var
    MOV           rdi, rbx                                  ;     s308(rdi).var   =  MOV            s71(rbx).var
    MOV           rdx, 18                                   ;     arg3(s311)(rdx).u32 = MOV         18 (0x12).u32
    MOV           rsi, 829                                  ;     arg2(s312)(rsi).u32 = MOV         829 (0x33D).u32
    MOV           rax, ProfiledInitFld                      ;     s314(rax).u64   =  MOV            ProfiledInitFld.u64
    CALL          rax                                       ;                        CALL           s314(rax).u64
    MOV           rdx, rbx                                  ;     s300(rdx).var   =  MOV            s71(rbx).var!
    MOV           rdi, 0x00007FDF9CB74000                   ;     s301(rdi).var   =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rsi, 835                                  ;     arg2(s303)(rsi).u32 = MOV         835 (0x343).u32
    MOV           rax, Op_InitConstFld                      ;     s305(rax).u64   =  MOV            Op_InitConstFld.u64
    CALL          rax                                       ;                        CALL           s305(rax).u64
                                                            ; 
                                                            ; 
                                                            ;   Line  33: let testCompOps = function (funcname, args1, args2, op, resultArr) {
                                                            ;   Col    1: ^
                                                            ;                        StatementBoundary  #6
    MOV           rbx, SYM(s18<-8>)                         ;     s18(rbx).var    =  MOV            s18<-8>.var
    MOV           rdi, rbx                                  ;     s295(rdi).var   =  MOV            s18(rbx).var
    MOV           rsi, 0x00007FDF9C339018                   ;     arg2(s297)(rsi).u64 = MOV         0xXXXXXXXX (Unknown).u64
    MOV           rax, ScrFunc_OP_NewScFunc                 ;     s299(rax).u64   =  MOV            ScrFunc_OP_NewScFunc.u64
    CALL          rax                                       ;     s296(rax).var   =  CALL           s299(rax).u64
    MOV           rdi, 0x00007FDF9CB74000                   ;     s290(rdi).var   =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdx, rax                                  ;     arg3(s291)(rdx).var = MOV         s289(rax).var
    MOV           rsi, 833                                  ;     arg2(s292)(rsi).u32 = MOV         833 (0x341).u32
    MOV           rax, Op_InitLetFld                        ;     s294(rax).u64   =  MOV            Op_InitLetFld.u64
    CALL          rax                                       ;                        CALL           s294(rax).u64
                                                            ; 
                                                            ; 
                                                            ;   Line  46: let testMathOps = function (funcname, args1, args2, resultArr) {
                                                            ;   Col    1: ^
                                                            ;                        StatementBoundary  #7
    MOV           rdi, rbx                                  ;     s284(rdi).var   =  MOV            s18(rbx).var
    MOV           rsi, 0x00007FDF9C339020                   ;     arg2(s286)(rsi).u64 = MOV         0xXXXXXXXX (Unknown).u64
    MOV           rax, ScrFunc_OP_NewScFunc                 ;     s288(rax).u64   =  MOV            ScrFunc_OP_NewScFunc.u64
    CALL          rax                                       ;     s285(rax).var   =  CALL           s288(rax).u64
    MOV           rdi, 0x00007FDF9CB74000                   ;     s279(rdi).var   =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdx, rax                                  ;     arg3(s280)(rdx).var = MOV         s278(rax).var
    MOV           rsi, 832                                  ;     arg2(s281)(rsi).u32 = MOV         832 (0x340).u32
    MOV           rax, Op_InitLetFld                        ;     s283(rax).u64   =  MOV            Op_InitLetFld.u64
    CALL          rax                                       ;                        CALL           s283(rax).u64
                                                            ; 
                                                            ; 
                                                            ;   Line  74: let reverse64x2Type = (type) => type === "f64x2" ? "i64x2" : "f64x2";
                                                            ;   Col    1: ^
                                                            ;                        StatementBoundary  #8
    MOV           rdi, rbx                                  ;     s273(rdi).var   =  MOV            s18(rbx).var
    MOV           rsi, 0x00007FDF9C339028                   ;     arg2(s275)(rsi).u64 = MOV         0xXXXXXXXX (Unknown).u64
    MOV           rax, ScrFunc_OP_NewScFunc                 ;     s277(rax).u64   =  MOV            ScrFunc_OP_NewScFunc.u64
    CALL          rax                                       ;     s274(rax).var   =  CALL           s277(rax).u64
    MOV           rdi, 0x00007FDF9CB74000                   ;     s268(rdi).var   =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdx, rax                                  ;     arg3(s269)(rdx).var = MOV         s267(rax).var
    MOV           rsi, 831                                  ;     arg2(s270)(rsi).u32 = MOV         831 (0x33F).u32
    MOV           rax, Op_InitLetFld                        ;     s272(rax).u64   =  MOV            Op_InitLetFld.u64
    CALL          rax                                       ;                        CALL           s272(rax).u64
                                                            ; 
                                                            ; 
                                                            ;   Line  75: let testTruncConvOps = function (funcname, args1, resultArr) {
                                                            ;   Col    1: ^
                                                            ;                        StatementBoundary  #9
    MOV           rsi, 0x00007FDF9C339030                   ;     arg2(s264)(rsi).u64 = MOV         0xXXXXXXXX (Unknown).u64
    MOV           rdi, rbx                                  ;     arg1(s265)(rdi).var = MOV         s262(rbx).var
    MOV           rax, ScrFunc_OP_NewScFunc                 ;     s266(rax).u64   =  MOV            ScrFunc_OP_NewScFunc.u64
    CALL          rax                                       ;     s263(rax).var   =  CALL           s266(rax).u64
    MOV           rdi, 0x00007FDF9CB74000                   ;     s257(rdi).var   =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdx, rax                                  ;     arg3(s258)(rdx).var = MOV         s256(rax).var
    MOV           rsi, 830                                  ;     arg2(s259)(rsi).u32 = MOV         830 (0x33E).u32
    MOV           rax, Op_InitLetFld                        ;     s261(rax).u64   =  MOV            Op_InitLetFld.u64
    CALL          rax                                       ;                        CALL           s261(rax).u64
                                                            ; 
                                                            ; 
                                                            ;   Line 365: testMathOps("func_i8x16_shuffle_test1",
                                                            ;   Col    5: ^
                                                            ;                        StatementBoundary  #10
    MOV           rcx, rbp                                  ;     s248(rcx).u64   =  MOV            (rbp).u64
    MOV           rdi, 0x00007FDF9CB74000                   ;     s249(rdi).var   =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdx, 30                                   ;     arg3(s252)(rdx).u32 = MOV         30 (0x1E).u32
    MOV           rsi, 832                                  ;     arg2(s253)(rsi).u32 = MOV         832 (0x340).u32
    MOV           rax, ProfiledLdRootMethodFld              ;     s255(rax).u64   =  MOV            ProfiledLdRootMethodFld.u64
    CALL          rax                                       ;     s250(rax).var   =  CALL           s255(rax).u64
    NOP           3                                         ;                        NOP            3 (0x3).i8
    MOV           rbx, rax                                  ;     s129(rbx).var   =  MOV            s250(rax).var
    MOV           r12, 0x00007FDF9CB75030                   ;     s151(r12).var   =  MOV            0xXXXXXXXX (undefined)[Undefined].var
    MOV           SYM(s151<-8>), r12                        ;     s151<-8>.var    =  MOV            s151(r12).var
    MOV           r14, 0x00007FDF9C333520                   ;     s150(r14).var   =  MOV            0xXXXXXXXX ("func_i8x16_shuffle_test1")[String].var
    MOV           rcx, 0x00007FDF9D3CCFC0                   ;     arg4(s243)(rcx).u64 = MOV         0xXXXXXXXX (FunctionBodyWeakRef [Global code (#1.0), #1]).u64
    MOV           rdx, 0x00007FDF9CB703A8                   ;     arg3(s244)(rdx).u64 = MOV         0xXXXXXXXX (ArrayCallSiteInfo).u64
    MOV           rsi, 0x000055A6793BE038                   ;     arg2(s245)(rsi).u64 = MOV         0xXXXXXXXX (ScriptContext).u64
    MOV           rdi, 0x00007FDF9C2C2044                   ;     arg1(s246)(rdi).u64 = MOV         0xXXXXXXXX (AuxBufferRef).u64
    MOV           rax, ScrArr_ProfiledNewScIntArray         ;     s247(rax).u64   =  MOV            ScrArr_ProfiledNewScIntArray.u64
    CALL          rax                                       ;     s242(rax).var   =  CALL           s247(rax).u64
    MOV           r15, rax                                  ;     s149(r15).var   =  MOV            s133(rax).var!
    MOV           rcx, 0x00007FDF9D3CCFC0                   ;     arg4(s237)(rcx).u64 = MOV         0xXXXXXXXX (FunctionBodyWeakRef [Global code (#1.0), #1]).u64
    MOV           rdx, 0x00007FDF9CB703B4                   ;     arg3(s238)(rdx).u64 = MOV         0xXXXXXXXX (ArrayCallSiteInfo).u64
    MOV           rsi, 0x000055A6793BE038                   ;     arg2(s239)(rsi).u64 = MOV         0xXXXXXXXX (ScriptContext).u64
    MOV           rdi, 0x00007FDF9C2C2088                   ;     arg1(s240)(rdi).u64 = MOV         0xXXXXXXXX (AuxBufferRef).u64
    MOV           rax, ScrArr_ProfiledNewScIntArray         ;     s241(rax).u64   =  MOV            ScrArr_ProfiledNewScIntArray.u64
    CALL          rax                                       ;     s236(rax).var   =  CALL           s241(rax).u64
    MOV           r12, rax                                  ;     s148(r12).var   =  MOV            s135(rax).var!
    MOV           rcx, 0x00007FDF9D3CCFC0                   ;     arg4(s231)(rcx).u64 = MOV         0xXXXXXXXX (FunctionBodyWeakRef [Global code (#1.0), #1]).u64
    MOV           rdx, 0x00007FDF9CB703C0                   ;     arg3(s232)(rdx).u64 = MOV         0xXXXXXXXX (ArrayCallSiteInfo).u64
    MOV           rsi, 0x000055A6793BE038                   ;     arg2(s233)(rsi).u64 = MOV         0xXXXXXXXX (ScriptContext).u64
    MOV           rdi, 0x00007FDF9C2C20CC                   ;     arg1(s234)(rdi).u64 = MOV         0xXXXXXXXX (AuxBufferRef).u64
    MOV           rax, ScrArr_ProfiledNewScIntArray         ;     s235(rax).u64   =  MOV            ScrArr_ProfiledNewScIntArray.u64
    CALL          rax                                       ;     s230(rax).var   =  CALL           s235(rax).u64
    MOV           rcx, rbx                                  ;     s209(rcx).i64   =  MOV            s129(rbx).var!
    SHR           rcx, 48                                   ;     s209(rcx).i64   =  SHR            s209(rcx).i64, 48 (0x30).i8
    JNE           L7                                        ;                        JNE            $L7
L8:                                                         ; $L8:
    MOV           rcx, [rbx + (8)]                          ;     s213(rcx).i64   =  MOV            [s129(rbx).var+8].i64
    MOV           rcx, [rcx + (24)]                         ;     s213(rcx).i64   =  MOV            [s213(rcx).i64+24].u64
    MOV           SYM(s213<-24>.i64), rcx                   ;     s213<-24>.i64   =  MOV            s213(rcx).i64
    MOV           rdi, rbx                                  ;     (rdi).i64       =  MOV            s129(rbx).var
    MOV           SYM(arg5(s138)<48>), rax                  ;     arg5(s138)<48>.var = MOV          s147(rax).var!
    MOV           r9, r12                                   ;     arg4(s136)(r9).var = MOV          s148(r12).var!
    MOV           r8, r15                                   ;     arg3(s134)(r8).var = MOV          s149(r15).var!
    MOV           rcx, r14                                  ;     arg2(s132)(rcx).var = MOV         s150(r14).var!
    MOV           r11, SYM(s151<-8>)                        ;     s151(r11).var   =  MOV            s151<-8>.var
    MOV           rdx, r11                                  ;     arg1(s131)(rdx).var = MOV         s151(r11).var!
    MOV           rsi, 268435461                            ;     (rsi).i64       =  MOV            268435461 (0x10000005).i64
    MOV           SYM(arg6(s214)<40>.u64), r9               ;     arg6(s214)<40>.u64 = MOV          (r9).u64
    MOV           SYM(arg5(s215)<32>.u64), r8               ;     arg5(s215)<32>.u64 = MOV          (r8).u64
    MOV           SYM(arg4(s216)<24>.u64), rcx              ;     arg4(s216)<24>.u64 = MOV          (rcx).u64
    MOV           SYM(arg3(s217)<16>.u64), rdx              ;     arg3(s217)<16>.u64 = MOV          (rdx).u64
    MOV           SYM(arg2(s218)<8>.u64), rsi               ;     arg2(s218)<8>.u64 = MOV           (rsi).u64
    MOV           SYM(arg1(s219)<0>.u64), rdi               ;     arg1(s219)<0>.u64 = MOV           (rdi).u64
    MOV           r12, [r13 + (0)]                          ;     s220(r12).u8    =  MOV            [s177(r13).u64 < (&ImplicitCallFlags)>].u8
    MOV           r10, SYM(s213<-24>.i64)                   ;     s213(r10).i64   =  MOV            s213<-24>.i64
    CALL          r10                                       ;                        CALL           s213(r10).i64
    MOV           rdi, rbp                                  ;     s222(rdi).u64   =  MOV            (rbp).u64
    MOV           r9, 268435461                             ;     arg6(s223)(r9).u32 = MOV          268435461 (0x10000005).u32
    MOV           r8, rbx                                   ;     arg5(s224)(r8).var = MOV          s221(rbx).var
    XOR           rcx, rcx                                  ;     arg4(s225)(rcx).i32 = XOR         arg4(s225)(rcx).i32, arg4(s225)(rcx).i32
    MOV           rdx, 30                                   ;     arg3(s226)(rdx).u32 = MOV         30 (0x1E).u32
    NOP                                                     ;                        NOP            
    MOV           rsi, 10                                   ;     arg2(s227)(rsi).u32 = MOV         10 (0xA).u32
    MOV           rax, SimpleProfileCall                    ;     s229(rax).u64   =  MOV            SimpleProfileCall.u64
    CALL          rax                                       ;                        CALL           s229(rax).u64
    MOV           [r13 + (0)], r12                          ;     [s177(r13).u64 < (&ImplicitCallFlags)>].u8 = MOV  s220(r12).u8
                                                            ; 
                                                            ; 
                                                            ;   Line 413: if (passed) {
                                                            ;   Col    1: ^
                                                            ;                        StatementBoundary  #11
    MOV           rcx, rbp                                  ;     s201(rcx).u64   =  MOV            (rbp).u64
    MOV           rdi, 0x00007FDF9CB74000                   ;     s202(rdi).var   =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdx, 28                                   ;     arg3(s205)(rdx).u32 = MOV         28 (0x1C).u32
    MOV           rsi, 839                                  ;     arg2(s206)(rsi).u32 = MOV         839 (0x347).u32
    MOV           rax, ProfiledLdRootFld                    ;     s208(rax).u64   =  MOV            ProfiledLdRootFld.u64
    CALL          rax                                       ;     s203(rax).var   =  CALL           s208(rax).u64
    MOV           rsi, 0x000055A6793BE038                   ;     arg2(s198)(rsi).u64 = MOV         0xXXXXXXXX (ScriptContext).u64
    MOV           rdi, rax                                  ;     arg1(s199)(rdi).var = MOV         s195(rax).var
    MOV           rax, Conv_ToBoolean                       ;     s200(rax).u64   =  MOV            Conv_ToBoolean.u64
    CALL          rax                                       ;     s197(rax).var   =  CALL           s200(rax).u64
    TEST          rax, rax                                  ;                        TEST           s196(rax).var, s196(rax).var
    JEQ           L1                                        ;                        JEQ            $L1
                                                            ; 
                                                            ; 
                                                            ;   Line 414: print("Passed");
                                                            ;   Col    5: ^
                                                            ;                        StatementBoundary  #12
    MOV           rcx, rbp                                  ;     s187(rcx).u64   =  MOV            (rbp).u64
    MOV           rdi, 0x00007FDF9CB74000                   ;     s188(rdi).var   =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdx, 31                                   ;     arg3(s191)(rdx).u32 = MOV         31 (0x1F).u32
    MOV           rsi, 817                                  ;     arg2(s192)(rsi).u32 = MOV         817 (0x331).u32
    MOV           rax, ProfiledLdRootMethodFld              ;     s194(rax).u64   =  MOV            ProfiledLdRootMethodFld.u64
    CALL          rax                                       ;     s189(rax).var   =  CALL           s194(rax).u64
    MOV           rbx, rax                                  ;     s141(rbx).var   =  MOV            s189(rax).var
    MOV           r12, 0x00007FDF9CB75030                   ;     s146(r12).var   =  MOV            0xXXXXXXXX (undefined)[Undefined].var
    MOV           r14, 0x00007FDF9C333500                   ;     s145(r14).var   =  MOV            0xXXXXXXXX ("Passed")[String].var
    MOV           rax, rbx                                  ;     s167(rax).i64   =  MOV            s141(rbx).var!
    SHR           rax, 48                                   ;     s167(rax).i64   =  SHR            s167(rax).i64, 48 (0x30).i8
    JNE           L5                                        ;                        JNE            $L5
L6:                                                         ; $L6:
    MOV           rax, [rbx + (8)]                          ;     s171(rax).i64   =  MOV            [s141(rbx).var+8].i64
    MOV           rax, [rax + (24)]                         ;     s171(rax).i64   =  MOV            [s171(rax).i64+24].u64
    MOV           rdi, rbx                                  ;     (rdi).i64       =  MOV            s141(rbx).var
    MOV           rcx, r14                                  ;     arg2(s144)(rcx).var = MOV         s145(r14).var!
    MOV           rdx, r12                                  ;     arg1(s143)(rdx).var = MOV         s146(r12).var!
    MOV           rsi, 268435458                            ;     (rsi).i64       =  MOV            268435458 (0x10000002).i64
    MOV           SYM(arg4(s172)<24>.u64), rcx              ;     arg4(s172)<24>.u64 = MOV          (rcx).u64
    MOV           SYM(arg3(s173)<16>.u64), rdx              ;     arg3(s173)<16>.u64 = MOV          (rdx).u64
    MOV           SYM(arg2(s174)<8>.u64), rsi               ;     arg2(s174)<8>.u64 = MOV           (rsi).u64
    MOV           SYM(arg1(s175)<0>.u64), rdi               ;     arg1(s175)<0>.u64 = MOV           (rdi).u64
    MOV           r12, [r13 + (0)]                          ;     s176(r12).u8    =  MOV            [s177(r13).u64 < (&ImplicitCallFlags)>].u8
    CALL          rax                                       ;                        CALL           s171(rax).i64
    MOV           rdi, rbp                                  ;     s179(rdi).u64   =  MOV            (rbp).u64
    MOV           r9, 268435458                             ;     arg6(s180)(r9).u32 = MOV          268435458 (0x10000002).u32
    MOV           r8, rbx                                   ;     arg5(s181)(r8).var = MOV          s178(rbx).var
    XOR           rcx, rcx                                  ;     arg4(s182)(rcx).i32 = XOR         arg4(s182)(rcx).i32, arg4(s182)(rcx).i32
    MOV           rdx, 31                                   ;     arg3(s183)(rdx).u32 = MOV         31 (0x1F).u32
    MOV           rsi, 11                                   ;     arg2(s184)(rsi).u32 = MOV         11 (0xB).u32
    MOV           rax, SimpleProfileCall                    ;     s186(rax).u64   =  MOV            SimpleProfileCall.u64
    CALL          rax                                       ;                        CALL           s186(rax).u64
    MOV           [r13 + (0)], r12                          ;     [s177(r13).u64 < (&ImplicitCallFlags)>].u8 = MOV  s176(r12).u8
L1:                                                         ; $L1:
                                                            ;                        StatementBoundary  #13
                                                            ;                        StatementBoundary  #-1
    MOV           rdi, 0x00007FDF9C338000                   ;     arg1(s164)(rdi).u64 = MOV         0xXXXXXXXX (FunctionBody [Global code (#1.0), #1]).u64
    MOV           rax, SimpleCleanImplicitCallFlags         ;     s165(rax).u64   =  MOV            SimpleCleanImplicitCallFlags.u64
    CALL          rax                                       ;                        CALL           s165(rax).u64
    MOV           rax, 0x00007FDF9CB75030                   ;     s166(rax).i64   =  MOV            0xXXXXXXXX (undefined)[Undefined].var
    ADD           rsp, 72                                   ;     (rsp).i64       =  ADD            (rsp).i64, 72 (0x48).i64
    POP           rbx                                       ;     (rbx).i64       =  POP            
    POP           r12                                       ;     (r12).i64       =  POP            
    POP           r13                                       ;     (r13).i64       =  POP            
    POP           r14                                       ;     (r14).i64       =  POP            
    POP           r15                                       ;     (r15).i64       =  POP            
    MOV           rsp, rbp                                  ;     (rsp).i64       =  MOV            (rbp).i64
    POP           rbp                                       ;     (rbp).i64       =  POP            
    RET           0, rax                                    ;                        RET            0 (0x0).i32, (rax).i64
                                                            ;                        FunctionExit   
                                                            ; 
                                                            ; 
                                                            ;   Line  15: const memObj = new WebAssembly.Memory({initial:INITIAL_SIZE});
                                                            ;   Col    1: ^
                                                            ;                        StatementBoundary  #2
L86:                                                        ; $L86: [helper]
    MOV           rdx, 0x00007FDF9C333560                   ;     arg3(s1010)(rdx).u64 = MOV        0xXXXXXXXX (Unknown).u64
    MOV           rsi, 0x00007FDF9C2C2000                   ;     arg2(s1011)(rsi).u64 = MOV        0xXXXXXXXX (Unknown).u64
    MOV           rdi, 0x000055A6793BE038                   ;     arg1(s1012)(rdi).u64 = MOV        0xXXXXXXXX (ScriptContext).u64
    MOV           rax, EnsureObjectLiteralType              ;     s1013(rax).u64  =  MOV            EnsureObjectLiteralType.u64
    CALL          rax                                       ;     s1009(rax).u64  =  CALL           s1013(rax).u64
    JMP           L87                                       ;                        JMP            $L87
                                                            ; 
                                                            ; 
                                                            ;   Line  15: const memObj = new WebAssembly.Memory({initial:INITIAL_SIZE});
                                                            ;   Col    1: ^
                                                            ;                        StatementBoundary  #2
L88:                                                        ; $L88: [helper]
    MOV           SYM(s1209<-40>.i64), rax                  ;     s1209<-40>.i64  =  MOV            (rax).i64
    MOV           rsi, 0x000055A67938D7A8                   ;     arg2(s1016)(rsi).u64 = MOV        0xXXXXXXXX (Recycler).u64
    MOV           rdi, 32                                   ;     arg1(s1017)(rdi).u32 = MOV        32 (0x20).u32
    MOV           rax, AllocMemForScObject                  ;     s1018(rax).u64  =  MOV            AllocMemForScObject.u64
    CALL          rax                                       ;     s1015(rax).var  =  CALL           s1018(rax).u64
    MOV           r15, rax                                  ;     s20(r15)[UninitializedObject].var = MOV  s1015(rax).var
    MOV           rax, SYM(s1209<-40>.i64)                  ;     (rax).i64       =  MOV            s1209<-40>.i64
    JMP           L89                                       ;                        JMP            $L89
                                                            ; 
                                                            ; 
                                                            ;   Line  15: const memObj = new WebAssembly.Memory({initial:INITIAL_SIZE});
                                                            ;   Col    1: ^
                                                            ;                        StatementBoundary  #2
L85:                                                        ; $L85: [helper]
    MOV           rsi, rbx                                  ;     s985(rsi).var   =  MOV            s44(rbx).var
    MOV           rdi, r14                                  ;     s986(rdi).var   =  MOV            s40(r14).var
    MOV           rdx, 0x000055A6793BE038                   ;     arg3(s987)(rdx).u64 = MOV         0xXXXXXXXX (ScriptContext).u64
    MOV           rax, UpdateNewScObjectCache               ;     s990(rax).u64   =  MOV            UpdateNewScObjectCache.u64
    CALL          rax                                       ;                        CALL           s990(rax).u64
    JMP           L84                                       ;                        JMP            $L84
                                                            ; 
                                                            ; 
                                                            ;   Line  16: const module = new WebAssembly.Module(readbuffer('math.wasm'));
                                                            ;   Col    1: ^
                                                            ;                        StatementBoundary  #3
L77:                                                        ; $L77: [helper]
    MOV           rsi, 0x000055A6793BE038                   ;     arg2(s905)(rsi).u64 = MOV         0xXXXXXXXX (ScriptContext).u64
    MOV           rdi, -2146823286                          ;     arg1(s906)(rdi).u32 = MOV         -2146823286 (0xFFFFFFFF800A138A).u32
    MOV           rax, Op_RuntimeTypeError                  ;     s907(rax).u64   =  MOV            Op_RuntimeTypeError.u64
    CALL          rax                                       ;                        CALL           s907(rax).u64
    JMP           L78                                       ;                        JMP            $L78
                                                            ; 
                                                            ; 
                                                            ;   Line  16: const module = new WebAssembly.Module(readbuffer('math.wasm'));
                                                            ;   Col    1: ^
                                                            ;                        StatementBoundary  #3
L76:                                                        ; $L76: [helper]
    MOV           rsi, r15                                  ;     s898(rsi).var   =  MOV            s56(r15).var
    MOV           rdx, 0x000055A6793BE038                   ;     arg3(s900)(rdx).u64 = MOV         0xXXXXXXXX (ScriptContext).u64
    MOV           rdi, rbx                                  ;     arg1(s902)(rdi).var = MOV         s899(rbx).var
    MOV           rax, UpdateNewScObjectCache               ;     s903(rax).u64   =  MOV            UpdateNewScObjectCache.u64
    CALL          rax                                       ;                        CALL           s903(rax).u64
    JMP           L75                                       ;                        JMP            $L75
                                                            ; 
                                                            ; 
                                                            ;   Line  17: const instance = new WebAssembly.Instance(module, { "dummy" : { "memory" : memObj } }).exports;
                                                            ;   Col    1: ^
                                                            ;                        StatementBoundary  #4
L66:                                                        ; $L66: [helper]
    MOV           rdx, 0x00007FDF9C333568                   ;     arg3(s825)(rdx).u64 = MOV         0xXXXXXXXX (Unknown).u64
    MOV           rsi, 0x00007FDF9C2C200C                   ;     arg2(s826)(rsi).u64 = MOV         0xXXXXXXXX (Unknown).u64
    MOV           rdi, 0x000055A6793BE038                   ;     arg1(s827)(rdi).u64 = MOV         0xXXXXXXXX (ScriptContext).u64
    MOV           rax, EnsureObjectLiteralType              ;     s828(rax).u64   =  MOV            EnsureObjectLiteralType.u64
    CALL          rax                                       ;     s824(rax).u64   =  CALL           s828(rax).u64
    MOV           r15, rax                                  ;     s823(r15).u64   =  MOV            s824(rax).u64
    JMP           L67                                       ;                        JMP            $L67
                                                            ; 
                                                            ; 
                                                            ;   Line  17: const instance = new WebAssembly.Instance(module, { "dummy" : { "memory" : memObj } }).exports;
                                                            ;   Col    1: ^
                                                            ;                        StatementBoundary  #4
L68:                                                        ; $L68: [helper]
    MOV           rsi, 0x000055A67938D7A8                   ;     arg2(s831)(rsi).u64 = MOV         0xXXXXXXXX (Recycler).u64
    MOV           rdi, 32                                   ;     arg1(s832)(rdi).u32 = MOV         32 (0x20).u32
    MOV           rax, AllocMemForScObject                  ;     s833(rax).u64   =  MOV            AllocMemForScObject.u64
    CALL          rax                                       ;     s830(rax).var   =  CALL           s833(rax).u64
    MOV           r14, rax                                  ;     s63(r14)[UninitializedObject].var = MOV  s830(rax).var
    JMP           L69                                       ;                        JMP            $L69
                                                            ; 
                                                            ; 
                                                            ;   Line  17: const instance = new WebAssembly.Instance(module, { "dummy" : { "memory" : memObj } }).exports;
                                                            ;   Col    1: ^
                                                            ;                        StatementBoundary  #4
L62:                                                        ; $L62: [helper]
    MOV           rdx, 0x00007FDF9C333570                   ;     arg3(s810)(rdx).u64 = MOV         0xXXXXXXXX (Unknown).u64
    MOV           rsi, 0x00007FDF9C2C2018                   ;     arg2(s811)(rsi).u64 = MOV         0xXXXXXXXX (Unknown).u64
    MOV           rdi, 0x000055A6793BE038                   ;     arg1(s812)(rdi).u64 = MOV         0xXXXXXXXX (ScriptContext).u64
    MOV           rax, EnsureObjectLiteralType              ;     s813(rax).u64   =  MOV            EnsureObjectLiteralType.u64
    CALL          rax                                       ;     s809(rax).u64   =  CALL           s813(rax).u64
    JMP           L63                                       ;                        JMP            $L63
                                                            ; 
                                                            ; 
                                                            ;   Line  17: const instance = new WebAssembly.Instance(module, { "dummy" : { "memory" : memObj } }).exports;
                                                            ;   Col    1: ^
                                                            ;                        StatementBoundary  #4
L64:                                                        ; $L64: [helper]
    MOV           SYM(s1209<-40>.i64), rax                  ;     s1209<-40>.i64  =  MOV            (rax).i64
    MOV           rsi, 0x000055A67938D7A8                   ;     arg2(s816)(rsi).u64 = MOV         0xXXXXXXXX (Recycler).u64
    MOV           rdi, 32                                   ;     arg1(s817)(rdi).u32 = MOV         32 (0x20).u32
    MOV           rax, AllocMemForScObject                  ;     s818(rax).u64   =  MOV            AllocMemForScObject.u64
    CALL          rax                                       ;     s815(rax).var   =  CALL           s818(rax).u64
    MOV           r15, rax                                  ;     s64(r15)[UninitializedObject].var = MOV  s815(rax).var
    MOV           rax, SYM(s1209<-40>.i64)                  ;     (rax).i64       =  MOV            s1209<-40>.i64
    JMP           L65                                       ;                        JMP            $L65
                                                            ; 
                                                            ; 
                                                            ;   Line  17: const instance = new WebAssembly.Instance(module, { "dummy" : { "memory" : memObj } }).exports;
                                                            ;   Col    1: ^
                                                            ;                        StatementBoundary  #4
L61:                                                        ; $L61: [helper]
    MOV           rsi, r12                                  ;     s776(rsi).var   =  MOV            s68(r12).var
    MOV           rdx, 0x000055A6793BE038                   ;     arg3(s778)(rdx).u64 = MOV         0xXXXXXXXX (ScriptContext).u64
    MOV           rdi, rbx                                  ;     arg1(s780)(rdi).var = MOV         s777(rbx).var
    MOV           rax, UpdateNewScObjectCache               ;     s781(rax).u64   =  MOV            UpdateNewScObjectCache.u64
    CALL          rax                                       ;                        CALL           s781(rax).u64
    JMP           L60                                       ;                        JMP            $L60
                                                            ; 
                                                            ; 
                                                            ;   Line  18: const arrays = {
                                                            ;   Col    1: ^
                                                            ;                        StatementBoundary  #5
L51:                                                        ; $L51: [helper]
    MOV           rdx, 0x00007FDF9C333578                   ;     arg3(s717)(rdx).u64 = MOV         0xXXXXXXXX (Unknown).u64
    MOV           rsi, 0x00007FDF9C2C2024                   ;     arg2(s718)(rsi).u64 = MOV         0xXXXXXXXX (Unknown).u64
    MOV           rdi, 0x000055A6793BE038                   ;     arg1(s719)(rdi).u64 = MOV         0xXXXXXXXX (ScriptContext).u64
    MOV           rax, EnsureObjectLiteralType              ;     s720(rax).u64   =  MOV            EnsureObjectLiteralType.u64
    CALL          rax                                       ;     s716(rax).u64   =  CALL           s720(rax).u64
    MOV           rbx, rax                                  ;     s714(rbx).u64   =  MOV            s716(rax).u64
    JMP           L52                                       ;                        JMP            $L52
                                                            ; 
                                                            ; 
                                                            ;   Line  18: const arrays = {
                                                            ;   Col    1: ^
                                                            ;                        StatementBoundary  #5
L53:                                                        ; $L53: [helper]
    MOV           rsi, 0x000055A67938D7A8                   ;     arg2(s723)(rsi).u64 = MOV         0xXXXXXXXX (Recycler).u64
    MOV           rdi, 64                                   ;     arg1(s724)(rdi).u32 = MOV         64 (0x40).u32
    MOV           rax, AllocMemForScObject                  ;     s725(rax).u64   =  MOV            AllocMemForScObject.u64
    CALL          rax                                       ;     s722(rax).var   =  CALL           s725(rax).u64
    MOV           r12, rax                                  ;     s71(r12)[UninitializedObject].var = MOV  s722(rax).var
    MOV           SYM(s71<-24>), r12                        ;     s71<-24>.var    =  MOV            s71(r12).var
    JMP           L54                                       ;                        JMP            $L54
                                                            ; 
                                                            ; 
                                                            ;   Line  18: const arrays = {
                                                            ;   Col    1: ^
                                                            ;                        StatementBoundary  #5
L50:                                                        ; $L50: [helper]
    MOV           rsi, r12                                  ;     s684(rsi).var   =  MOV            s79(r12).var
    MOV           rdx, 0x000055A6793BE038                   ;     arg3(s686)(rdx).u64 = MOV         0xXXXXXXXX (ScriptContext).u64
    MOV           rdi, rbx                                  ;     arg1(s688)(rdi).var = MOV         s685(rbx).var
    MOV           rax, UpdateNewScObjectCache               ;     s689(rax).u64   =  MOV            UpdateNewScObjectCache.u64
    CALL          rax                                       ;                        CALL           s689(rax).u64
    JMP           L49                                       ;                        JMP            $L49
                                                            ; 
                                                            ; 
                                                            ;   Line  18: const arrays = {
                                                            ;   Col    1: ^
                                                            ;                        StatementBoundary  #5
L43:                                                        ; $L43: [helper]
    MOV           rsi, rbx                                  ;     s616(rsi).var   =  MOV            s88(rbx).var
    MOV           rdi, r12                                  ;     s617(rdi).var   =  MOV            s82(r12).var
    MOV           rdx, 0x000055A6793BE038                   ;     arg3(s618)(rdx).u64 = MOV         0xXXXXXXXX (ScriptContext).u64
    MOV           rax, UpdateNewScObjectCache               ;     s621(rax).u64   =  MOV            UpdateNewScObjectCache.u64
    CALL          rax                                       ;                        CALL           s621(rax).u64
    JMP           L42                                       ;                        JMP            $L42
                                                            ; 
                                                            ; 
                                                            ;   Line  18: const arrays = {
                                                            ;   Col    1: ^
                                                            ;                        StatementBoundary  #5
L36:                                                        ; $L36: [helper]
    MOV           rsi, rbx                                  ;     s548(rsi).var   =  MOV            s97(rbx).var
    MOV           rdi, r12                                  ;     s549(rdi).var   =  MOV            s91(r12).var
    MOV           rdx, 0x000055A6793BE038                   ;     arg3(s550)(rdx).u64 = MOV         0xXXXXXXXX (ScriptContext).u64
    MOV           rax, UpdateNewScObjectCache               ;     s553(rax).u64   =  MOV            UpdateNewScObjectCache.u64
    CALL          rax                                       ;                        CALL           s553(rax).u64
    JMP           L35                                       ;                        JMP            $L35
                                                            ; 
                                                            ; 
                                                            ;   Line  18: const arrays = {
                                                            ;   Col    1: ^
                                                            ;                        StatementBoundary  #5
L29:                                                        ; $L29: [helper]
    MOV           rsi, rbx                                  ;     s480(rsi).var   =  MOV            s106(rbx).var
    MOV           rdi, r12                                  ;     s481(rdi).var   =  MOV            s100(r12).var
    MOV           rdx, 0x000055A6793BE038                   ;     arg3(s482)(rdx).u64 = MOV         0xXXXXXXXX (ScriptContext).u64
    MOV           rax, UpdateNewScObjectCache               ;     s485(rax).u64   =  MOV            UpdateNewScObjectCache.u64
    CALL          rax                                       ;                        CALL           s485(rax).u64
    JMP           L28                                       ;                        JMP            $L28
                                                            ; 
                                                            ; 
                                                            ;   Line  18: const arrays = {
                                                            ;   Col    1: ^
                                                            ;                        StatementBoundary  #5
L22:                                                        ; $L22: [helper]
    MOV           rsi, rbx                                  ;     s412(rsi).var   =  MOV            s115(rbx).var
    MOV           rdi, r12                                  ;     s413(rdi).var   =  MOV            s109(r12).var
    MOV           rdx, 0x000055A6793BE038                   ;     arg3(s414)(rdx).u64 = MOV         0xXXXXXXXX (ScriptContext).u64
    MOV           rax, UpdateNewScObjectCache               ;     s417(rax).u64   =  MOV            UpdateNewScObjectCache.u64
    CALL          rax                                       ;                        CALL           s417(rax).u64
    JMP           L21                                       ;                        JMP            $L21
                                                            ; 
                                                            ; 
                                                            ;   Line  18: const arrays = {
                                                            ;   Col    1: ^
                                                            ;                        StatementBoundary  #5
L15:                                                        ; $L15: [helper]
    MOV           rsi, rbx                                  ;     s344(rsi).var   =  MOV            s123(rbx).var
    MOV           rdi, r12                                  ;     s345(rdi).var   =  MOV            s117(r12).var
    MOV           rdx, 0x000055A6793BE038                   ;     arg3(s346)(rdx).u64 = MOV         0xXXXXXXXX (ScriptContext).u64
    MOV           rax, UpdateNewScObjectCache               ;     s349(rax).u64   =  MOV            UpdateNewScObjectCache.u64
    CALL          rax                                       ;                        CALL           s349(rax).u64
    JMP           L14                                       ;                        JMP            $L14
                                                            ; 
                                                            ; 
                                                            ;   Line 365: testMathOps("func_i8x16_shuffle_test1",
                                                            ;   Col    5: ^
                                                            ;                        StatementBoundary  #10
L7:                                                         ; $L7: [helper]
    MOV           SYM(s1209<-40>.i64), rax                  ;     s1209<-40>.i64  =  MOV            (rax).i64
    MOV           rsi, 0x000055A6793BE038                   ;     arg2(s210)(rsi).u64 = MOV         0xXXXXXXXX (ScriptContext).u64
    MOV           rdi, -2146823286                          ;     arg1(s211)(rdi).u32 = MOV         -2146823286 (0xFFFFFFFF800A138A).u32
    MOV           rax, Op_RuntimeTypeError                  ;     s212(rax).u64   =  MOV            Op_RuntimeTypeError.u64
    CALL          rax                                       ;                        CALL           s212(rax).u64
    MOV           rax, SYM(s1209<-40>.i64)                  ;     (rax).i64       =  MOV            s1209<-40>.i64
    JMP           L8                                        ;                        JMP            $L8
                                                            ; 
                                                            ; 
                                                            ;   Line 414: print("Passed");
                                                            ;   Col    5: ^
                                                            ;                        StatementBoundary  #12
L5:                                                         ; $L5: [helper]
    MOV           rsi, 0x000055A6793BE038                   ;     arg2(s168)(rsi).u64 = MOV         0xXXXXXXXX (ScriptContext).u64
    MOV           rdi, -2146823286                          ;     arg1(s169)(rdi).u32 = MOV         -2146823286 (0xFFFFFFFF800A138A).u32
    MOV           rax, Op_RuntimeTypeError                  ;     s170(rax).u64   =  MOV            Op_RuntimeTypeError.u64
    CALL          rax                                       ;                        CALL           s170(rax).u64
    JMP           L6                                        ;                        JMP            $L6
                                                            ;                        StatementBoundary  #-1
L92:                                                        ; $L92: [helper]
    MOV           rsi, 0x000055A6793BE038                   ;     (rsi).i64       =  MOV            0xXXXXXXXX (ScriptContext).u64
    MOV           rdi, 7216                                 ;     (rdi).i64       =  MOV            7216 (0x1C30).i64
    MOV           rax, ProbeCurrentStack                    ;     (rax).i64       =  MOV            ProbeCurrentStack.u64
    JMP           rax                                       ;                        JMP            (rax).i64
                                                            ;                        StatementBoundary  #-1
                                                            ;                        FunctionEntry  
    MOV           rax, 0x000055A67938C0D0                   ;     (rax).i64       =  MOV            0xXXXXXXXX (&StackLimit).u64
    MOV           rax, [rax + (0)]                          ;     (rax).i64       =  MOV            [(rax).i64].i64
    ADD           rax, 7280                                 ;     (rax).i64       =  ADD            (rax).i64, 7280 (0x1C70).i64
    CMP           rsp, rax                                  ;                        CMP            (rsp).i64, (rax).i64
    JLE           L60                                       ;                        JLE            $L60
    NOP           3                                         ;                        NOP            3 (0x3).i8
    NOP           4                                         ;                        NOP            4 (0x4).i8
    NOP           4                                         ;                        NOP            4 (0x4).i8
    NOP           4                                         ;                        NOP            4 (0x4).i8
                                                            ;                        PrologStart    
    PUSH          rbp                                       ;                        PUSH           (rbp).i64
    MOV           rbp, rsp                                  ;     (rbp).i64       =  MOV            (rsp).i64
    SUB           rsp, 120                                  ;     (rsp).i64       =  SUB            (rsp).i64, 120 (0x78).i64
    PUSH          r15                                       ;                        PUSH           (r15).i64
    PUSH          r14                                       ;                        PUSH           (r14).i64
    PUSH          r13                                       ;                        PUSH           (r13).i64
    PUSH          r12                                       ;                        PUSH           (r12).i64
    PUSH          rbx                                       ;                        PUSH           (rbx).i64
    SUB           rsp, 64                                   ;     (rsp).i64       =  SUB            (rsp).i64, 64 (0x40).i64
                                                            ;                        PrologEnd      
    MOV           rbx, 0x00007FDF9CB71F10                   ;     s374(rbx).u64   =  MOV            0xXXXXXXXX (Unknown).u64
    MOV           SYM(s374<-48>.u64), rbx                   ;     s374<-48>.u64   =  MOV            s374(rbx).u64
    MOV           r12, 0x000055A67938D560                   ;     s165(r12).u64   =  MOV            0xXXXXXXXX (&ImplicitCallFlags).u64
    MOV           rax, 0x00007FDF9C33A2BC                   ;     s690(rax).u64   =  MOV            0xXXXXXXXX (&CallCount).u64
    MOV           rcx, [rax + (0)]                          ;     s691(rcx).u32   =  MOV            [s690(rax).u64].u32
    SUB           rcx, 1                                    ;     s691(rcx).u32   =  SUB            s691(rcx).u32, 1 (0x1).u32
    JB            L55                                       ;                        JB             $L55
    MOV           [rax + (0)], rcx                          ;     [s690(rax).u64].u32 = MOV         s691(rcx).u32
    JMP           L56                                       ;                        JMP            $L56
L55:                                                        ; $L55:
    MOV           rdi, rbp                                  ;     s692(rdi).u64   =  MOV            (rbp).u64
    MOV           rax, TransitionFromSimpleJit              ;     s694(rax).u64   =  MOV            TransitionFromSimpleJit.u64
    CALL          rax                                       ;                        CALL           s694(rax).u64
L56:                                                        ; $L56:
    MOV           rdi, rbp                                  ;     s695(rdi).u64   =  MOV            (rbp).u64
    MOV           rax, SimpleProfileParameters              ;     s697(rax).u64   =  MOV            SimpleProfileParameters.u64
    CALL          rax                                       ;                        CALL           s697(rax).u64
    MOV           [r12 + (0)], 1                            ;     [s165(r12).u64 < (&ImplicitCallFlags)>].u8 = MOV  1 (0x1).u8
    MOV           rdi, SYM(callInfo<24>.i64)                ;     s688(rdi).i64   =  MOV            callInfo<24>.i64
    AND           rdi, 16777215                             ;     s688(rdi).i64   =  AND            s688(rdi).i64, 16777215 (0xFFFFFF).i64
    SUB           rdi, 5                                    ;     s688(rdi).i64   =  SUB            s688(rdi).i64, 5 (0x5).i64
    JLT           L49                                       ;                        JLT            $L49
L50:                                                        ; $L50:
    MOV           r14, SYM(prm5<64>)                        ;     s12(r14).var    =  MOV            prm5<64>.var!
    MOV           SYM(s12<-64>), r14                        ;     s12<-64>.var    =  MOV            s12(r14).var
L51:                                                        ; $L51:
    MOV           rdi, SYM(prm4<56>)                        ;     s11(rdi).var    =  MOV            prm4<56>.var!
    MOV           SYM(s11<-16>), rdi                        ;     s11<-16>.var    =  MOV            s11(rdi).var
L52:                                                        ; $L52:
    MOV           r13, SYM(prm3<48>)                        ;     s10(r13).var    =  MOV            prm3<48>.var!
L53:                                                        ; $L53:
    MOV           r15, SYM(prm2<40>)                        ;     s9(r15).var     =  MOV            prm2<40>.var!
L54:                                                        ; $L54:
                                                            ; 
                                                            ; 
                                                            ;   Line  48: const len = args1.length;
                                                            ;   Col    5: ^
                                                            ;                        StatementBoundary  #0
    MOV           r8, rbp                                   ;     s678(r8).u64    =  MOV            (rbp).u64
    MOV           r9, r13                                   ;     s679(r9).var    =  MOV            s10(r13).var
    XOR           rcx, rcx                                  ;     arg4(s682)(rcx).u32 = XOR         arg4(s682)(rcx).u32, arg4(s682)(rcx).u32
    XOR           rdx, rdx                                  ;     arg3(s683)(rdx).u32 = XOR         arg3(s683)(rdx).u32, arg3(s683)(rdx).u32
    MOV           rsi, 201                                  ;     arg2(s684)(rsi).u32 = MOV         201 (0xC9).u32
    MOV           rdi, r9                                   ;     arg1(s685)(rdi).var = MOV         s679(r9).var
    MOV           rax, ProfiledLdLen                        ;     s686(rax).u64   =  MOV            ProfiledLdLen.u64
    CALL          rax                                       ;     s680(rax).var   =  CALL           s686(rax).u64
    MOV           SYM(s13<-24>), rax                        ;     s13<-24>.var    =  MOV            s13(rax).var
                                                            ; 
                                                            ; 
                                                            ;   Line  49: const type = funcname.split('_')[1];
                                                            ;   Col    5: ^
                                                            ;                        StatementBoundary  #1
    MOV           rcx, rbp                                  ;     s670(rcx).u64   =  MOV            (rbp).u64
    MOV           rdi, r15                                  ;     s671(rdi).var   =  MOV            s9(r15).var
    MOV           rdx, 1                                    ;     arg3(s674)(rdx).u32 = MOV         1 (0x1).u32
    MOV           rsi, 336                                  ;     arg2(s675)(rsi).u32 = MOV         336 (0x150).u32
    MOV           rax, ProfiledLdMethodFld                  ;     s677(rax).u64   =  MOV            ProfiledLdMethodFld.u64
    CALL          rax                                       ;     s672(rax).var   =  CALL           s677(rax).u64
    MOV           SYM(s9<-32>), r15                         ;     s9<-32>.var     =  MOV            s9(r15).var
    MOV           r15, rax                                  ;     s29[ffunc](r15).var = MOV         s672(rax).var
    MOV           r8, SYM(s9<-32>)                          ;     s9(r8).var      =  MOV            s9<-32>.var
    MOV           rdx, r8                                   ;     s139(rdx).var   =  MOV            s9(r8).var
    MOV           rcx, 0x00007FDF9C339600                   ;     s138(rcx).var   =  MOV            0xXXXXXXXX ("_")[String].var
    MOV           rax, r15                                  ;     s649(rax).i64   =  MOV            s29[ffunc](r15).var!
    SHR           rax, 48                                   ;     s649(rax).i64   =  SHR            s649(rax).i64, 48 (0x30).i8
    JNE           L47                                       ;                        JNE            $L47
L48:                                                        ; $L48:
    MOV           rax, [r15 + (8)]                          ;     s653(rax).i64   =  MOV            [s29[ffunc](r15).var+8].i64
    MOV           rax, [rax + (24)]                         ;     s653(rax).i64   =  MOV            [s653(rax).i64+24].u64
    MOV           rdi, r15                                  ;     (rdi).i64       =  MOV            s29[ffunc](r15).var
    MOV           rsi, 33554434                             ;     (rsi).i64       =  MOV            33554434 (0x2000002).i64
    MOV           SYM(arg4(s655)<24>.u64), rcx              ;     arg4(s655)<24>.u64 = MOV          (rcx).u64
    MOV           SYM(arg3(s656)<16>.u64), rdx              ;     arg3(s656)<16>.u64 = MOV          (rdx).u64
    MOV           SYM(arg2(s657)<8>.u64), rsi               ;     arg2(s657)<8>.u64 = MOV           (rsi).u64
    MOV           SYM(arg1(s658)<0>.u64), rdi               ;     arg1(s658)<0>.u64 = MOV           (rdi).u64
    MOV           SYM(s10<-40>), r13                        ;     s10<-40>.var    =  MOV            s10(r13).var
    MOV           r13, [r12 + (0)]                          ;     s659(r13).u8    =  MOV            [s165(r12).u64 < (&ImplicitCallFlags)>].u8
    MOV           SYM(s9<-32>), r8                          ;     s9<-32>.var     =  MOV            s9(r8).var
    CALL          rax                                       ;     s654(rax).var   =  CALL           s653(rax).i64
    NOP           2                                         ;                        NOP            2 (0x2).i8
    MOV           rbx, rax                                  ;     s33(rbx).var    =  MOV            s654(rax).var
    MOV           r8, r15                                   ;     s660(r8).var    =  MOV            s29[ffunc](r15).var
    MOV           rdi, rbp                                  ;     s662(rdi).u64   =  MOV            (rbp).u64
    MOV           r9, 33554434                              ;     arg6(s663)(r9).u32 = MOV          33554434 (0x2000002).u32
    MOV           rcx, rax                                  ;     arg4(s665)(rcx).var = MOV         s661(rax).var
    MOV           rdx, 1                                    ;     arg3(s666)(rdx).u32 = MOV         1 (0x1).u32
    XOR           rsi, rsi                                  ;     arg2(s667)(rsi).u32 = XOR         arg2(s667)(rsi).u32, arg2(s667)(rsi).u32
    MOV           rax, SimpleProfileCall                    ;     s669(rax).u64   =  MOV            SimpleProfileCall.u64
    CALL          rax                                       ;                        CALL           s669(rax).u64
    MOV           [r12 + (0)], r13                          ;     [s165(r12).u64 < (&ImplicitCallFlags)>].u8 = MOV  s659(r13).u8
    MOV           rsi, 0x0001000000000001                   ;     s639(rsi).var   =  MOV            0x1000000000001.var
    XOR           r9, r9                                    ;     arg6(s642)(r9).i32 = XOR          arg6(s642)(r9).i32, arg6(s642)(r9).i32
    XOR           r8, r8                                    ;     arg5(s643)(r8).i32 = XOR          arg5(s643)(r8).i32, arg5(s643)(r8).i32
    XOR           rcx, rcx                                  ;     arg4(s644)(rcx).u32 = XOR         arg4(s644)(rcx).u32, arg4(s644)(rcx).u32
    MOV           rdx, 0x00007FDF9C3387C0                   ;     arg3(s645)(rdx).u64 = MOV         0xXXXXXXXX (FunctionBody [testMathOps (#1.4), #5]).u64
    MOV           rdi, rbx                                  ;     arg1(s647)(rdi).var = MOV         s640(rbx).var
    MOV           rax, ProfiledLdElem                       ;     s648(rax).u64   =  MOV            ProfiledLdElem.u64
    CALL          rax                                       ;     s641(rax).var   =  CALL           s648(rax).u64
    MOV           rbx, rax                                  ;     s14(rbx).var    =  MOV            s34(rax).var!
    MOV           SYM(s14<-56>), rbx                        ;     s14<-56>.var    =  MOV            s14(rbx).var
                                                            ; 
                                                            ; 
                                                            ;   Line  50: const arr = arrays[type];
                                                            ;   Col    5: ^
                                                            ;                        StatementBoundary  #2
    MOV           rcx, rbp                                  ;     s631(rcx).u64   =  MOV            (rbp).u64
    MOV           rdi, 0x00007FDF9CB74000                   ;     s632(rdi).var   =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdx, 7                                    ;     arg3(s635)(rdx).u32 = MOV         7 (0x7).u32
    MOV           rsi, 835                                  ;     arg2(s636)(rsi).u32 = MOV         835 (0x343).u32
    MOV           rax, ProfiledLdRootFld                    ;     s638(rax).u64   =  MOV            ProfiledLdRootFld.u64
    CALL          rax                                       ;     s633(rax).var   =  CALL           s638(rax).u64
    MOV           rsi, rbx                                  ;     s621(rsi).var   =  MOV            s14(rbx).var
    XOR           r9, r9                                    ;     arg6(s624)(r9).i32 = XOR          arg6(s624)(r9).i32, arg6(s624)(r9).i32
    XOR           r8, r8                                    ;     arg5(s625)(r8).i32 = XOR          arg5(s625)(r8).i32, arg5(s625)(r8).i32
    MOV           rcx, 1                                    ;     arg4(s626)(rcx).u32 = MOV         1 (0x1).u32
    MOV           rdx, 0x00007FDF9C3387C0                   ;     arg3(s627)(rdx).u64 = MOV         0xXXXXXXXX (FunctionBody [testMathOps (#1.4), #5]).u64
    MOV           rdi, rax                                  ;     arg1(s629)(rdi).var = MOV         s622(rax).var
    MOV           rax, ProfiledLdElem                       ;     s630(rax).u64   =  MOV            ProfiledLdElem.u64
    CALL          rax                                       ;     s623(rax).var   =  CALL           s630(rax).u64
    MOV           r13, rax                                  ;     s15(r13).var    =  MOV            s37(rax).var!
    MOV           SYM(s15<-72>), r13                        ;     s15<-72>.var    =  MOV            s15(r13).var
                                                            ; 
                                                            ; 
                                                            ;   Line  52: moveArgsIntoArray(args1, 0, arr);
                                                            ;   Col    5: ^
                                                            ;                        StatementBoundary  #3
    MOV           rcx, rbp                                  ;     s613(rcx).u64   =  MOV            (rbp).u64
    MOV           rdi, 0x00007FDF9CB74000                   ;     s614(rdi).var   =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdx, 11                                   ;     arg3(s617)(rdx).u32 = MOV         11 (0xB).u32
    MOV           rsi, 834                                  ;     arg2(s618)(rsi).u32 = MOV         834 (0x342).u32
    MOV           rax, ProfiledLdRootMethodFld              ;     s620(rax).u64   =  MOV            ProfiledLdRootMethodFld.u64
    CALL          rax                                       ;     s615(rax).var   =  CALL           s620(rax).u64
    MOV           r15, rax                                  ;     s39(r15).var    =  MOV            s615(rax).var
    MOV           rdx, 0x00007FDF9CB75030                   ;     s137(rdx).var   =  MOV            0xXXXXXXXX (undefined)[Undefined].var
    MOV           r10, SYM(s10<-40>)                        ;     s10(r10).var    =  MOV            s10<-40>.var
    MOV           rcx, r10                                  ;     s136(rcx).var   =  MOV            s10(r10).var!
    MOV           r8, 0x0001000000000000                    ;     s135(r8).var    =  MOV            0x1000000000000.var
    MOV           r9, r13                                   ;     s134(r9).var    =  MOV            s15(r13).var
    MOV           rax, r15                                  ;     s592(rax).i64   =  MOV            s39(r15).var!
    SHR           rax, 48                                   ;     s592(rax).i64   =  SHR            s592(rax).i64, 48 (0x30).i8
    JNE           L45                                       ;                        JNE            $L45
L46:                                                        ; $L46:
    MOV           rax, [r15 + (8)]                          ;     s596(rax).i64   =  MOV            [s39(r15).var+8].i64
    MOV           rax, [rax + (24)]                         ;     s596(rax).i64   =  MOV            [s596(rax).i64+24].u64
    MOV           rdi, r15                                  ;     (rdi).i64       =  MOV            s39(r15).var
    MOV           rsi, 268435460                            ;     (rsi).i64       =  MOV            268435460 (0x10000004).i64
    MOV           SYM(arg6(s597)<40>.u64), r9               ;     arg6(s597)<40>.u64 = MOV          (r9).u64
    MOV           SYM(arg5(s598)<32>.u64), r8               ;     arg5(s598)<32>.u64 = MOV          (r8).u64
    MOV           SYM(arg4(s599)<24>.u64), rcx              ;     arg4(s599)<24>.u64 = MOV          (rcx).u64
    MOV           SYM(arg3(s600)<16>.u64), rdx              ;     arg3(s600)<16>.u64 = MOV          (rdx).u64
    MOV           SYM(arg2(s601)<8>.u64), rsi               ;     arg2(s601)<8>.u64 = MOV           (rsi).u64
    MOV           SYM(arg1(s602)<0>.u64), rdi               ;     arg1(s602)<0>.u64 = MOV           (rdi).u64
    MOV           rbx, [r12 + (0)]                          ;     s603(rbx).u8    =  MOV            [s165(r12).u64 < (&ImplicitCallFlags)>].u8
    CALL          rax                                       ;                        CALL           s596(rax).i64
    MOV           r8, r15                                   ;     s604(r8).var    =  MOV            s39(r15).var
    MOV           rdi, rbp                                  ;     s605(rdi).u64   =  MOV            (rbp).u64
    MOV           r9, 268435460                             ;     arg6(s606)(r9).u32 = MOV          268435460 (0x10000004).u32
    XOR           rcx, rcx                                  ;     arg4(s608)(rcx).i32 = XOR         arg4(s608)(rcx).i32, arg4(s608)(rcx).i32
    MOV           rdx, 11                                   ;     arg3(s609)(rdx).u32 = MOV         11 (0xB).u32
    MOV           rsi, 1                                    ;     arg2(s610)(rsi).u32 = MOV         1 (0x1).u32
    MOV           rax, SimpleProfileCall                    ;     s612(rax).u64   =  MOV            SimpleProfileCall.u64
    CALL          rax                                       ;                        CALL           s612(rax).u64
    MOV           [r12 + (0)], rbx                          ;     [s165(r12).u64 < (&ImplicitCallFlags)>].u8 = MOV  s603(rbx).u8
                                                            ; 
                                                            ; 
                                                            ;   Line  53: if (Array.isArray(args2)) { //binary ops
                                                            ;   Col    5: ^
                                                            ;                        StatementBoundary  #4
    MOV           rcx, rbp                                  ;     s584(rcx).u64   =  MOV            (rbp).u64
    MOV           rdi, 0x00007FDF9CB74000                   ;     s585(rdi).var   =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdx, 8                                    ;     arg3(s588)(rdx).u32 = MOV         8 (0x8).u32
    MOV           rsi, 77                                   ;     arg2(s589)(rsi).u32 = MOV         77 (0x4D).u32
    MOV           rax, ProfiledLdRootFld                    ;     s591(rax).u64   =  MOV            ProfiledLdRootFld.u64
    CALL          rax                                       ;     s586(rax).var   =  CALL           s591(rax).u64
    MOV           rbx, rax                                  ;     s19(rbx).var    =  MOV            s586(rax).var
    MOV           rcx, rbp                                  ;     s576(rcx).u64   =  MOV            (rbp).u64
    MOV           rdi, rbx                                  ;     s577(rdi).var   =  MOV            s19(rbx).var
    MOV           rdx, 2                                    ;     arg3(s580)(rdx).u32 = MOV         2 (0x2).u32
    MOV           rsi, 182                                  ;     arg2(s581)(rsi).u32 = MOV         182 (0xB6).u32
    MOV           rax, ProfiledLdMethodFld                  ;     s583(rax).u64   =  MOV            ProfiledLdMethodFld.u64
    CALL          rax                                       ;     s578(rax).var   =  CALL           s583(rax).u64
    MOV           r15, rax                                  ;     s47[ffunc](r15).var = MOV         s578(rax).var
    MOV           rax, SYM(s11<-16>)                        ;     s11(rax).var    =  MOV            s11<-16>.var
    MOV           rcx, rax                                  ;     s132(rcx).var   =  MOV            s11(rax).var
    MOV           rdx, r15                                  ;     s555(rdx).i64   =  MOV            s47[ffunc](r15).var!
    SHR           rdx, 48                                   ;     s555(rdx).i64   =  SHR            s555(rdx).i64, 48 (0x30).i8
    JNE           L43                                       ;                        JNE            $L43
L44:                                                        ; $L44:
    MOV           rdx, [r15 + (8)]                          ;     s559(rdx).i64   =  MOV            [s47[ffunc](r15).var+8].i64
    MOV           rdx, [rdx + (24)]                         ;     s559(rdx).i64   =  MOV            [s559(rdx).i64+24].u64
    MOV           SYM(s559<-40>.i64), rdx                   ;     s559<-40>.i64   =  MOV            s559(rdx).i64
    MOV           rdi, r15                                  ;     (rdi).i64       =  MOV            s47[ffunc](r15).var
    MOV           rdx, rbx                                  ;     arg1(s49)(rdx).var = MOV          s133(rbx).var!
    MOV           rsi, 33554434                             ;     (rsi).i64       =  MOV            33554434 (0x2000002).i64
    MOV           SYM(arg4(s561)<24>.u64), rcx              ;     arg4(s561)<24>.u64 = MOV          (rcx).u64
    MOV           SYM(arg3(s562)<16>.u64), rdx              ;     arg3(s562)<16>.u64 = MOV          (rdx).u64
    MOV           SYM(arg2(s563)<8>.u64), rsi               ;     arg2(s563)<8>.u64 = MOV           (rsi).u64
    MOV           SYM(arg1(s564)<0>.u64), rdi               ;     arg1(s564)<0>.u64 = MOV           (rdi).u64
    MOV           rbx, [r12 + (0)]                          ;     s565(rbx).u8    =  MOV            [s165(r12).u64 < (&ImplicitCallFlags)>].u8
    MOV           r11, SYM(s559<-40>.i64)                   ;     s559(r11).i64   =  MOV            s559<-40>.i64
    CALL          rax, r11                                  ;     s560(rax).var   =  CALL           s559(r11).i64
    MOV           rcx, rax                                  ;     s51(rcx).var    =  MOV            s560(rax).var
    MOV           SYM(s51<-40>), rcx                        ;     s51<-40>.var    =  MOV            s51(rcx).var
    MOV           r8, r15                                   ;     s566(r8).var    =  MOV            s47[ffunc](r15).var
    MOV           rdi, rbp                                  ;     s568(rdi).u64   =  MOV            (rbp).u64
    MOV           r9, 33554434                              ;     arg6(s569)(r9).u32 = MOV          33554434 (0x2000002).u32
    MOV           rcx, rax                                  ;     arg4(s571)(rcx).var = MOV         s567(rax).var
    MOV           rdx, 2                                    ;     arg3(s572)(rdx).u32 = MOV         2 (0x2).u32
    MOV           rsi, 2                                    ;     arg2(s573)(rsi).u32 = MOV         2 (0x2).u32
    MOV           rax, SimpleProfileCall                    ;     s575(rax).u64   =  MOV            SimpleProfileCall.u64
    CALL          rax                                       ;                        CALL           s575(rax).u64
    MOV           [r12 + (0)], rbx                          ;     [s165(r12).u64 < (&ImplicitCallFlags)>].u8 = MOV  s565(rbx).u8
    MOV           r11, SYM(s51<-40>)                        ;     s51(r11).var    =  MOV            s51<-40>.var
    MOV           rdi, r11                                  ;     s549(rdi).var   =  MOV            s51(r11).var!
    MOV           rsi, 0x000055A6793BE038                   ;     arg2(s552)(rsi).u64 = MOV         0xXXXXXXXX (ScriptContext).u64
    MOV           rax, Conv_ToBoolean                       ;     s554(rax).u64   =  MOV            Conv_ToBoolean.u64
    CALL          rax                                       ;     s551(rax).var   =  CALL           s554(rax).u64
    MOV           rcx, rbp                                  ;     s541(rcx).u64   =  MOV            (rbp).u64
    MOV           rdi, 0x00007FDF9CB74000                   ;     s542(rdi).var   =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    TEST          rax, rax                                  ;                        TEST           s550(rax).var, s550(rax).var
    JEQ           L10                                       ;                        JEQ            $L10
                                                            ; 
                                                            ; 
                                                            ;   Line  54: moveArgsIntoArray(args2, len, arr);
                                                            ;   Col    9: ^
                                                            ;                        StatementBoundary  #5
    MOV           rdx, 11                                   ;     arg3(s545)(rdx).u32 = MOV         11 (0xB).u32
    MOV           rsi, 834                                  ;     arg2(s546)(rsi).u32 = MOV         834 (0x342).u32
    MOV           rax, ProfiledLdRootMethodFld              ;     s548(rax).u64   =  MOV            ProfiledLdRootMethodFld.u64
    CALL          rax                                       ;     s543(rax).var   =  CALL           s548(rax).u64
    MOV           rbx, rax                                  ;     s52(rbx).var    =  MOV            s543(rax).var
    MOV           r15, 0x00007FDF9CB75030                   ;     s131(r15).var   =  MOV            0xXXXXXXXX (undefined)[Undefined].var
    MOV           rax, SYM(s11<-16>)                        ;     s11(rax).var    =  MOV            s11<-16>.var
    MOV           rcx, rax                                  ;     s130(rcx).var   =  MOV            s11(rax).var!
    MOV           r10, SYM(s13<-24>)                        ;     s13(r10).var    =  MOV            s13<-24>.var
    MOV           r8, r10                                   ;     s129(r8).var    =  MOV            s13(r10).var!
    MOV           r9, r13                                   ;     s128(r9).var    =  MOV            s15(r13).var
    MOV           rdx, rbx                                  ;     s520(rdx).i64   =  MOV            s52(rbx).var!
    SHR           rdx, 48                                   ;     s520(rdx).i64   =  SHR            s520(rdx).i64, 48 (0x30).i8
    JNE           L41                                       ;                        JNE            $L41
L42:                                                        ; $L42:
    MOV           rdx, [rbx + (8)]                          ;     s524(rdx).i64   =  MOV            [s52(rbx).var+8].i64
    MOV           rdx, [rdx + (24)]                         ;     s524(rdx).i64   =  MOV            [s524(rdx).i64+24].u64
    MOV           SYM(s524<-24>.i64), rdx                   ;     s524<-24>.i64   =  MOV            s524(rdx).i64
    MOV           rdi, rbx                                  ;     (rdi).i64       =  MOV            s52(rbx).var
    MOV           rdx, r15                                  ;     arg1(s54)(rdx).var = MOV          s131(r15).var!
    MOV           rsi, 268435460                            ;     (rsi).i64       =  MOV            268435460 (0x10000004).i64
    MOV           SYM(arg6(s525)<40>.u64), r9               ;     arg6(s525)<40>.u64 = MOV          (r9).u64
    MOV           SYM(arg5(s526)<32>.u64), r8               ;     arg5(s526)<32>.u64 = MOV          (r8).u64
    MOV           SYM(arg4(s527)<24>.u64), rcx              ;     arg4(s527)<24>.u64 = MOV          (rcx).u64
    MOV           SYM(arg3(s528)<16>.u64), rdx              ;     arg3(s528)<16>.u64 = MOV          (rdx).u64
    MOV           SYM(arg2(s529)<8>.u64), rsi               ;     arg2(s529)<8>.u64 = MOV           (rsi).u64
    MOV           SYM(arg1(s530)<0>.u64), rdi               ;     arg1(s530)<0>.u64 = MOV           (rdi).u64
    MOV           r15, [r12 + (0)]                          ;     s531(r15).u8    =  MOV            [s165(r12).u64 < (&ImplicitCallFlags)>].u8
    MOV           r11, SYM(s524<-24>.i64)                   ;     s524(r11).i64   =  MOV            s524<-24>.i64
    CALL          r11                                       ;                        CALL           s524(r11).i64
    MOV           rdi, rbp                                  ;     s533(rdi).u64   =  MOV            (rbp).u64
    MOV           r9, 268435460                             ;     arg6(s534)(r9).u32 = MOV          268435460 (0x10000004).u32
    MOV           r8, rbx                                   ;     arg5(s535)(r8).var = MOV          s532(rbx).var
    XOR           rcx, rcx                                  ;     arg4(s536)(rcx).i32 = XOR         arg4(s536)(rcx).i32, arg4(s536)(rcx).i32
    MOV           rdx, 11                                   ;     arg3(s537)(rdx).u32 = MOV         11 (0xB).u32
    MOV           rsi, 3                                    ;     arg2(s538)(rsi).u32 = MOV         3 (0x3).u32
    MOV           rax, SimpleProfileCall                    ;     s540(rax).u64   =  MOV            SimpleProfileCall.u64
    CALL          rax                                       ;                        CALL           s540(rax).u64
    MOV           [r12 + (0)], r15                          ;     [s165(r12).u64 < (&ImplicitCallFlags)>].u8 = MOV  s531(r15).u8
                                                            ; 
                                                            ; 
                                                            ;   Line  55: instance[funcname]();
                                                            ;   Col    9: ^
                                                            ;                        StatementBoundary  #6
    MOV           rcx, rbp                                  ;     s512(rcx).u64   =  MOV            (rbp).u64
    MOV           rdi, 0x00007FDF9CB74000                   ;     s513(rdi).var   =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdx, 9                                    ;     arg3(s516)(rdx).u32 = MOV         9 (0x9).u32
    MOV           rsi, 222                                  ;     arg2(s517)(rsi).u32 = MOV         222 (0xDE).u32
    MOV           rax, ProfiledLdRootFld                    ;     s519(rax).u64   =  MOV            ProfiledLdRootFld.u64
    CALL          rax                                       ;     s514(rax).var   =  CALL           s519(rax).u64
    MOV           rbx, rax                                  ;     s59(rbx).var    =  MOV            s514(rax).var
    MOV           r15, SYM(s9<-32>)                         ;     s9(r15).var     =  MOV            s9<-32>.var
    MOV           rsi, r15                                  ;     s505(rsi).var   =  MOV            s9(r15).var!
    MOV           rdi, rbx                                  ;     s506(rdi).var   =  MOV            s59(rbx).var
    MOV           rdx, 0x000055A6793BE038                   ;     arg3(s508)(rdx).u64 = MOV         0xXXXXXXXX (ScriptContext).u64
    MOV           rax, Op_GetMethodElement                  ;     s511(rax).u64   =  MOV            Op_GetMethodElement.u64
    CALL          rax                                       ;     s507(rax).var   =  CALL           s511(rax).u64
    MOV           SYM(s9<-32>), r15                         ;     s9<-32>.var     =  MOV            s9(r15).var
    MOV           r15, rax                                  ;     s60(r15).var    =  MOV            s507(rax).var
    MOV           rax, r15                                  ;     s488(rax).i64   =  MOV            s60(r15).var!
    SHR           rax, 48                                   ;     s488(rax).i64   =  SHR            s488(rax).i64, 48 (0x30).i8
    JNE           L39                                       ;                        JNE            $L39
L40:                                                        ; $L40:
    MOV           rax, [r15 + (8)]                          ;     s492(rax).i64   =  MOV            [s60(r15).var+8].i64
    MOV           rax, [rax + (24)]                         ;     s492(rax).i64   =  MOV            [s492(rax).i64+24].u64
    MOV           rdi, r15                                  ;     (rdi).i64       =  MOV            s60(r15).var
    MOV           rdx, rbx                                  ;     arg1(s62)(rdx).var = MOV          s127(rbx).var!
    MOV           rsi, 268435457                            ;     (rsi).i64       =  MOV            268435457 (0x10000001).i64
    MOV           SYM(arg3(s493)<16>.u64), rdx              ;     arg3(s493)<16>.u64 = MOV          (rdx).u64
    MOV           SYM(arg2(s494)<8>.u64), rsi               ;     arg2(s494)<8>.u64 = MOV           (rsi).u64
    MOV           SYM(arg1(s495)<0>.u64), rdi               ;     arg1(s495)<0>.u64 = MOV           (rdi).u64
    MOV           rbx, [r12 + (0)]                          ;     s496(rbx).u8    =  MOV            [s165(r12).u64 < (&ImplicitCallFlags)>].u8
    CALL          rax                                       ;                        CALL           s492(rax).i64
    MOV           rcx, r15                                  ;     s497(rcx).var   =  MOV            s60(r15).var
    MOV           rdi, rbp                                  ;     s498(rdi).u64   =  MOV            (rbp).u64
    MOV           r8, 268435457                             ;     arg5(s499)(r8).u32 = MOV          268435457 (0x10000001).u32
    XOR           rdx, rdx                                  ;     arg3(s501)(rdx).i32 = XOR         arg3(s501)(rdx).i32, arg3(s501)(rdx).i32
    MOV           rsi, 4                                    ;     arg2(s502)(rsi).u32 = MOV         4 (0x4).u32
    MOV           rax, SimpleProfileCall_DefaultInlineCacheIndex ;   s504(rax).u64 = MOV            SimpleProfileCall_DefaultInlineCacheIndex.u64
    CALL          rax                                       ;                        CALL           s504(rax).u64
    MOV           [r12 + (0)], rbx                          ;     [s165(r12).u64 < (&ImplicitCallFlags)>].u8 = MOV  s496(rbx).u8
    JMP           L8                                        ;                        JMP            $L8
L10:                                                        ; $L10:
                                                            ; 
                                                            ; 
                                                            ;   Line  57: if (Number.isInteger(args2)) {
                                                            ;   Col   10: ^
                                                            ;                        StatementBoundary  #7
    MOV           rdx, 10                                   ;     arg3(s484)(rdx).u32 = MOV         10 (0xA).u32
    MOV           rsi, 261                                  ;     arg2(s485)(rsi).u32 = MOV         261 (0x105).u32
    MOV           rax, ProfiledLdRootFld                    ;     s487(rax).u64   =  MOV            ProfiledLdRootFld.u64
    CALL          rax                                       ;     s482(rax).var   =  CALL           s487(rax).u64
    MOV           rbx, rax                                  ;     s64(rbx).var    =  MOV            s482(rax).var
    MOV           rcx, rbp                                  ;     s472(rcx).u64   =  MOV            (rbp).u64
    MOV           rdi, rbx                                  ;     s473(rdi).var   =  MOV            s64(rbx).var
    MOV           rdx, 3                                    ;     arg3(s476)(rdx).u32 = MOV         3 (0x3).u32
    MOV           rsi, 187                                  ;     arg2(s477)(rsi).u32 = MOV         187 (0xBB).u32
    MOV           rax, ProfiledLdMethodFld                  ;     s479(rax).u64   =  MOV            ProfiledLdMethodFld.u64
    CALL          rax                                       ;     s474(rax).var   =  CALL           s479(rax).u64
    MOV           r15, rax                                  ;     s66(r15).var    =  MOV            s474(rax).var
    MOV           rax, SYM(s11<-16>)                        ;     s11(rax).var    =  MOV            s11<-16>.var
    MOV           rcx, rax                                  ;     s125(rcx).var   =  MOV            s11(rax).var
    MOV           rdx, r15                                  ;     s451(rdx).i64   =  MOV            s66(r15).var!
    SHR           rdx, 48                                   ;     s451(rdx).i64   =  SHR            s451(rdx).i64, 48 (0x30).i8
    JNE           L37                                       ;                        JNE            $L37
L38:                                                        ; $L38:
    MOV           rdx, [r15 + (8)]                          ;     s455(rdx).i64   =  MOV            [s66(r15).var+8].i64
    MOV           rdx, [rdx + (24)]                         ;     s455(rdx).i64   =  MOV            [s455(rdx).i64+24].u64
    MOV           SYM(s455<-24>.i64), rdx                   ;     s455<-24>.i64   =  MOV            s455(rdx).i64
    MOV           rdi, r15                                  ;     (rdi).i64       =  MOV            s66(r15).var
    MOV           rdx, rbx                                  ;     arg1(s68)(rdx).var = MOV          s126(rbx).var!
    MOV           rsi, 33554434                             ;     (rsi).i64       =  MOV            33554434 (0x2000002).i64
    MOV           SYM(arg4(s457)<24>.u64), rcx              ;     arg4(s457)<24>.u64 = MOV          (rcx).u64
    MOV           SYM(arg3(s458)<16>.u64), rdx              ;     arg3(s458)<16>.u64 = MOV          (rdx).u64
    MOV           SYM(arg2(s459)<8>.u64), rsi               ;     arg2(s459)<8>.u64 = MOV           (rsi).u64
    MOV           SYM(arg1(s460)<0>.u64), rdi               ;     arg1(s460)<0>.u64 = MOV           (rdi).u64
    MOV           rbx, [r12 + (0)]                          ;     s461(rbx).u8    =  MOV            [s165(r12).u64 < (&ImplicitCallFlags)>].u8
    MOV           r11, SYM(s455<-24>.i64)                   ;     s455(r11).i64   =  MOV            s455<-24>.i64
    CALL          rax, r11                                  ;     s456(rax).var   =  CALL           s455(r11).i64
    MOV           rcx, rax                                  ;     s70(rcx).var    =  MOV            s456(rax).var
    MOV           SYM(s70<-24>), rcx                        ;     s70<-24>.var    =  MOV            s70(rcx).var
    MOV           r8, r15                                   ;     s462(r8).var    =  MOV            s66(r15).var
    MOV           rdi, rbp                                  ;     s464(rdi).u64   =  MOV            (rbp).u64
    MOV           r9, 33554434                              ;     arg6(s465)(r9).u32 = MOV          33554434 (0x2000002).u32
    MOV           rcx, rax                                  ;     arg4(s467)(rcx).var = MOV         s463(rax).var
    MOV           rdx, 3                                    ;     arg3(s468)(rdx).u32 = MOV         3 (0x3).u32
    MOV           rsi, 5                                    ;     arg2(s469)(rsi).u32 = MOV         5 (0x5).u32
    MOV           rax, SimpleProfileCall                    ;     s471(rax).u64   =  MOV            SimpleProfileCall.u64
    CALL          rax                                       ;                        CALL           s471(rax).u64
    MOV           [r12 + (0)], rbx                          ;     [s165(r12).u64 < (&ImplicitCallFlags)>].u8 = MOV  s461(rbx).u8
    MOV           r11, SYM(s70<-24>)                        ;     s70(r11).var    =  MOV            s70<-24>.var
    MOV           rdi, r11                                  ;     s445(rdi).var   =  MOV            s70(r11).var!
    MOV           rsi, 0x000055A6793BE038                   ;     arg2(s448)(rsi).u64 = MOV         0xXXXXXXXX (ScriptContext).u64
    MOV           rax, Conv_ToBoolean                       ;     s450(rax).u64   =  MOV            Conv_ToBoolean.u64
    CALL          rax                                       ;     s447(rax).var   =  CALL           s450(rax).u64
    MOV           rcx, rbp                                  ;     s437(rcx).u64   =  MOV            (rbp).u64
    MOV           rdi, 0x00007FDF9CB74000                   ;     s438(rdi).var   =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdx, 9                                    ;     arg3(s441)(rdx).u32 = MOV         9 (0x9).u32
    MOV           rsi, 222                                  ;     arg2(s442)(rsi).u32 = MOV         222 (0xDE).u32
    TEST          rax, rax                                  ;                        TEST           s446(rax).var, s446(rax).var
    JEQ           L9                                        ;                        JEQ            $L9
                                                            ; 
                                                            ; 
                                                            ;   Line  58: instance[funcname](args2); //shift amount for shl/shr
                                                            ;   Col    9: ^
                                                            ;                        StatementBoundary  #8
    MOV           rax, ProfiledLdRootFld                    ;     s444(rax).u64   =  MOV            ProfiledLdRootFld.u64
    CALL          rax                                       ;     s439(rax).var   =  CALL           s444(rax).u64
    NOP           4                                         ;                        NOP            4 (0x4).i8
    MOV           rbx, rax                                  ;     s71(rbx).var    =  MOV            s439(rax).var
    MOV           r15, SYM(s9<-32>)                         ;     s9(r15).var     =  MOV            s9<-32>.var
    MOV           rsi, r15                                  ;     s430(rsi).var   =  MOV            s9(r15).var!
    MOV           rdi, rbx                                  ;     s431(rdi).var   =  MOV            s71(rbx).var
    MOV           rdx, 0x000055A6793BE038                   ;     arg3(s433)(rdx).u64 = MOV         0xXXXXXXXX (ScriptContext).u64
    MOV           rax, Op_GetMethodElement                  ;     s436(rax).u64   =  MOV            Op_GetMethodElement.u64
    CALL          rax                                       ;     s432(rax).var   =  CALL           s436(rax).u64
    MOV           SYM(s9<-32>), r15                         ;     s9<-32>.var     =  MOV            s9(r15).var
    MOV           r15, rax                                  ;     s72(r15).var    =  MOV            s432(rax).var
    MOV           r10, SYM(s11<-16>)                        ;     s11(r10).var    =  MOV            s11<-16>.var
    MOV           rcx, r10                                  ;     s123(rcx).var   =  MOV            s11(r10).var!
    MOV           rax, r15                                  ;     s412(rax).i64   =  MOV            s72(r15).var!
    SHR           rax, 48                                   ;     s412(rax).i64   =  SHR            s412(rax).i64, 48 (0x30).i8
    JNE           L35                                       ;                        JNE            $L35
L36:                                                        ; $L36:
    MOV           rax, [r15 + (8)]                          ;     s416(rax).i64   =  MOV            [s72(r15).var+8].i64
    MOV           rax, [rax + (24)]                         ;     s416(rax).i64   =  MOV            [s416(rax).i64+24].u64
    MOV           rdi, r15                                  ;     (rdi).i64       =  MOV            s72(r15).var
    MOV           rdx, rbx                                  ;     arg1(s74)(rdx).var = MOV          s124(rbx).var!
    MOV           rsi, 268435458                            ;     (rsi).i64       =  MOV            268435458 (0x10000002).i64
    MOV           SYM(arg4(s417)<24>.u64), rcx              ;     arg4(s417)<24>.u64 = MOV          (rcx).u64
    MOV           SYM(arg3(s418)<16>.u64), rdx              ;     arg3(s418)<16>.u64 = MOV          (rdx).u64
    MOV           SYM(arg2(s419)<8>.u64), rsi               ;     arg2(s419)<8>.u64 = MOV           (rsi).u64
    MOV           SYM(arg1(s420)<0>.u64), rdi               ;     arg1(s420)<0>.u64 = MOV           (rdi).u64
    MOV           rbx, [r12 + (0)]                          ;     s421(rbx).u8    =  MOV            [s165(r12).u64 < (&ImplicitCallFlags)>].u8
    CALL          rax                                       ;                        CALL           s416(rax).i64
    MOV           rcx, r15                                  ;     s422(rcx).var   =  MOV            s72(r15).var
    MOV           rdi, rbp                                  ;     s423(rdi).u64   =  MOV            (rbp).u64
    MOV           r8, 268435458                             ;     arg5(s424)(r8).u32 = MOV          268435458 (0x10000002).u32
    XOR           rdx, rdx                                  ;     arg3(s426)(rdx).i32 = XOR         arg3(s426)(rdx).i32, arg3(s426)(rdx).i32
    MOV           rsi, 6                                    ;     arg2(s427)(rsi).u32 = MOV         6 (0x6).u32
    MOV           rax, SimpleProfileCall_DefaultInlineCacheIndex ;   s429(rax).u64 = MOV            SimpleProfileCall_DefaultInlineCacheIndex.u64
    CALL          rax                                       ;                        CALL           s429(rax).u64
    MOV           [r12 + (0)], rbx                          ;     [s165(r12).u64 < (&ImplicitCallFlags)>].u8 = MOV  s421(rbx).u8
    JMP           L8                                        ;                        JMP            $L8
L9:                                                         ; $L9:
                                                            ; 
                                                            ; 
                                                            ;   Line  61: instance[funcname](); //unary ops
                                                            ;   Col    9: ^
                                                            ;                        StatementBoundary  #9
    MOV           rax, ProfiledLdRootFld                    ;     s411(rax).u64   =  MOV            ProfiledLdRootFld.u64
    CALL          rax                                       ;     s406(rax).var   =  CALL           s411(rax).u64
    MOV           rbx, rax                                  ;     s76(rbx).var    =  MOV            s406(rax).var
    MOV           r11, SYM(s9<-32>)                         ;     s9(r11).var     =  MOV            s9<-32>.var
    MOV           rsi, r11                                  ;     s397(rsi).var   =  MOV            s9(r11).var!
    MOV           rdi, rbx                                  ;     s398(rdi).var   =  MOV            s76(rbx).var
    MOV           rdx, 0x000055A6793BE038                   ;     arg3(s400)(rdx).u64 = MOV         0xXXXXXXXX (ScriptContext).u64
    MOV           rax, Op_GetMethodElement                  ;     s403(rax).u64   =  MOV            Op_GetMethodElement.u64
    CALL          rax                                       ;     s399(rax).var   =  CALL           s403(rax).u64
    MOV           r15, rax                                  ;     s77(r15).var    =  MOV            s399(rax).var
    MOV           rax, r15                                  ;     s380(rax).i64   =  MOV            s77(r15).var!
    SHR           rax, 48                                   ;     s380(rax).i64   =  SHR            s380(rax).i64, 48 (0x30).i8
    JNE           L33                                       ;                        JNE            $L33
L34:                                                        ; $L34:
    MOV           rax, [r15 + (8)]                          ;     s384(rax).i64   =  MOV            [s77(r15).var+8].i64
    MOV           rax, [rax + (24)]                         ;     s384(rax).i64   =  MOV            [s384(rax).i64+24].u64
    MOV           rdi, r15                                  ;     (rdi).i64       =  MOV            s77(r15).var
    MOV           rdx, rbx                                  ;     arg1(s79)(rdx).var = MOV          s122(rbx).var!
    MOV           rsi, 268435457                            ;     (rsi).i64       =  MOV            268435457 (0x10000001).i64
    MOV           SYM(arg3(s385)<16>.u64), rdx              ;     arg3(s385)<16>.u64 = MOV          (rdx).u64
    MOV           SYM(arg2(s386)<8>.u64), rsi               ;     arg2(s386)<8>.u64 = MOV           (rsi).u64
    MOV           SYM(arg1(s387)<0>.u64), rdi               ;     arg1(s387)<0>.u64 = MOV           (rdi).u64
    MOV           rbx, [r12 + (0)]                          ;     s388(rbx).u8    =  MOV            [s165(r12).u64 < (&ImplicitCallFlags)>].u8
    CALL          rax                                       ;                        CALL           s384(rax).i64
    MOV           rcx, r15                                  ;     s389(rcx).var   =  MOV            s77(r15).var
    MOV           rdi, rbp                                  ;     s390(rdi).u64   =  MOV            (rbp).u64
    MOV           r8, 268435457                             ;     arg5(s391)(r8).u32 = MOV          268435457 (0x10000001).u32
    XOR           rdx, rdx                                  ;     arg3(s393)(rdx).i32 = XOR         arg3(s393)(rdx).i32, arg3(s393)(rdx).i32
    NOP           3                                         ;                        NOP            3 (0x3).i8
    MOV           rsi, 7                                    ;     arg2(s394)(rsi).u32 = MOV         7 (0x7).u32
    MOV           rax, SimpleProfileCall_DefaultInlineCacheIndex ;   s396(rax).u64 = MOV            SimpleProfileCall_DefaultInlineCacheIndex.u64
    CALL          rax                                       ;                        CALL           s396(rax).u64
    MOV           [r12 + (0)], rbx                          ;     [s165(r12).u64 < (&ImplicitCallFlags)>].u8 = MOV  s388(rbx).u8
L8:                                                         ; $L8:
                                                            ; 
                                                            ; 
                                                            ;   Line  64: let i = 0; i < resultArr.length; i++) {
                                                            ;   Col   10: ^
                                                            ;                        StatementBoundary  #10
    MOV           rbx, 0x0001000000000000                   ;     s16(rbx).var    =  MOV            0x1000000000000.var
    MOV           r15, [r12 + (0)]                          ;     s80(r15).u8     =  MOV            [s165(r12).u64 < (&ImplicitCallFlags)>].u8
    MOV           SYM(s80<-32>.u8), r15                     ;     s80<-32>.u8     =  MOV            s80(r15).u8
    MOV           [r12 + (0)], 1                            ;     [s165(r12).u64 < (&ImplicitCallFlags)>].u8 = MOV  1 (0x1).u8
    MOV           rdi, rbp                                  ;     s375(rdi).u64   =  MOV            (rbp).u64
    XOR           rsi, rsi                                  ;     arg2(s377)(rsi).u32 = XOR         arg2(s377)(rsi).u32, arg2(s377)(rsi).u32
    MOV           rax, SimpleGetScheduledEntryPoint         ;     s379(rax).u64   =  MOV            SimpleGetScheduledEntryPoint.u64
    CALL          rax                                       ;     s376(rax).u64   =  CALL           s379(rax).u64
    MOV           r15, rax                                  ;     s81(r15).u64    =  MOV            s376(rax).u64
    MOV           SYM(s81<-16>.u64), r15                    ;     s81<-16>.u64    =  MOV            s81(r15).u64
L2:                                                         ; $L2: >>>>>>>>>>>>>  LOOP TOP  >>>>>>>>>>>>>
    MOV           rdi, rbp                                  ;     s364(rdi).u64   =  MOV            (rbp).u64
    XOR           rdx, rdx                                  ;     arg3(s365)(rdx).u32 = XOR         arg3(s365)(rdx).u32, arg3(s365)(rdx).u32
    XOR           rsi, rsi                                  ;     arg2(s366)(rsi).u32 = XOR         arg2(s366)(rsi).u32, arg2(s366)(rsi).u32
    MOV           rax, SimpleRecordLoopImplicitCallFlags    ;     s368(rax).u64   =  MOV            SimpleRecordLoopImplicitCallFlags.u64
    CALL          rax                                       ;                        CALL           s368(rax).u64
    TEST          r15, r15                                  ;                        TEST           s81(r15).u64, s81(r15).u64
    JEQ           L31                                       ;                        JEQ            $L31
    MOV           rdi, r15                                  ;     s369(rdi).u64   =  MOV            s81(r15).u64
    MOV           rax, SimpleIsLoopCodeGenDone              ;     s372(rax).u64   =  MOV            SimpleIsLoopCodeGenDone.u64
    CALL          rax                                       ;     s370(rax).u8    =  CALL           s372(rax).u64
    MOV           r15, SYM(s374<-48>.u64)                   ;     s374(r15).u64   =  MOV            s374<-48>.u64
    JMP           L32                                       ;                        JMP            $L32
L31:                                                        ; $L31:
    MOV           r15, SYM(s374<-48>.u64)                   ;     s374(r15).u64   =  MOV            s374<-48>.u64
    MOV           rcx, [r15 + (0)]                          ;     s373(rcx).u32   =  MOV            [s374(r15).u64 < (Unknown)>].u32
    INC           rcx                                       ;     s373(rcx).u32   =  INC            s373(rcx).u32
    MOV           [r15 + (0)], rcx                          ;     [s374(r15).u64 < (Unknown)>].u32 = MOV  s373(rcx).u32
    XOR           rax, rax                                  ;     s82(rax).u8     =  XOR            s82(rax).u8, s82(rax).u8
    CMP           rcx, 150                                  ;                        CMP            s373(rcx).u32, 150 (0x96).u32
    JLT           L32                                       ;                        JLT            $L32
    MOV           rax, 1                                    ;     s82(rax).u32    =  MOV            1 (0x1).u32
L32:                                                        ; $L32:
    TEST          rax, rax                                  ;                        TEST           s82(rax).u8!, s82(rax).u8
    JNE           L28                                       ;                        JNE            $L28
L27:                                                        ; $L27:
                                                            ; 
                                                            ; 
                                                            ;   Line  64: i < resultArr.length; i++) {
                                                            ;   Col   21: ^
                                                            ;                        StatementBoundary  #11
    MOV           r8, rbp                                   ;     s355(r8).u64    =  MOV            (rbp).u64
    MOV           rdi, r14                                  ;     s356(rdi).var   =  MOV            s12(r14).var
    MOV           rcx, 1                                    ;     arg4(s359)(rcx).u32 = MOV         1 (0x1).u32
    MOV           rdx, 4                                    ;     arg3(s360)(rdx).u32 = MOV         4 (0x4).u32
    MOV           rsi, 201                                  ;     arg2(s361)(rsi).u32 = MOV         201 (0xC9).u32
    MOV           rax, ProfiledLdLen                        ;     s363(rax).u64   =  MOV            ProfiledLdLen.u64
    CALL          rax                                       ;     s357(rax).var   =  CALL           s363(rax).u64
    MOV           rdi, rbx                                  ;     s348(rdi).var   =  MOV            s16(rbx).var
    MOV           rdx, 0x000055A6793BE038                   ;     arg3(s351)(rdx).u64 = MOV         0xXXXXXXXX (ScriptContext).u64
    MOV           rsi, rax                                  ;     arg2(s352)(rsi).var = MOV         s347(rax).var
    MOV           rax, Op_Less                              ;     s354(rax).u64   =  MOV            Op_Less.u64
    CALL          rax                                       ;     s350(rax).i64   =  CALL           s354(rax).u64
    TEST          rax, rax                                  ;                        TEST           s349(rax).i64, s349(rax).i64
    JEQ           L6                                        ;                        JEQ            $L6
                                                            ; 
                                                            ; 
                                                            ;   Line  65: if ((type === "f32x4" || type === "f64x2") && Number.isNaN(resultArr[i])) {
                                                            ;   Col    9: ^
                                                            ;                        StatementBoundary  #12
    MOV           rsi, 0x00007FDF9C3395C0                   ;     s339(rsi).var   =  MOV            0xXXXXXXXX ("f32x4")[String].var
    MOV           r15, SYM(s14<-56>)                        ;     s14(r15).var    =  MOV            s14<-56>.var
    MOV           rdi, r15                                  ;     s340(rdi).var   =  MOV            s14(r15).var
    MOV           rdx, 0x000055A6793BE038                   ;     arg3(s343)(rdx).u64 = MOV         0xXXXXXXXX (ScriptContext).u64
    MOV           rax, Op_StrictEqual                       ;     s346(rax).u64   =  MOV            Op_StrictEqual.u64
    CALL          rax                                       ;     s342(rax).i64   =  CALL           s346(rax).u64
    TEST          rax, rax                                  ;                        TEST           s341(rax).i64, s341(rax).i64
    JNE           L5                                        ;                        JNE            $L5
    MOV           rsi, 0x00007FDF9C339640                   ;     s331(rsi).var   =  MOV            0xXXXXXXXX ("f64x2")[String].var
    MOV           rdi, r15                                  ;     s332(rdi).var   =  MOV            s14(r15).var
    MOV           rdx, 0x000055A6793BE038                   ;     arg3(s335)(rdx).u64 = MOV         0xXXXXXXXX (ScriptContext).u64
    MOV           rax, Op_StrictEqual                       ;     s338(rax).u64   =  MOV            Op_StrictEqual.u64
    CALL          rax                                       ;     s334(rax).i64   =  CALL           s338(rax).u64
    TEST          rax, rax                                  ;                        TEST           s333(rax).i64, s333(rax).i64
    JEQ           L59                                       ;                        JEQ            $L59
L5:                                                         ; $L5:
    MOV           rcx, rbp                                  ;     s323(rcx).u64   =  MOV            (rbp).u64
    MOV           rdi, 0x00007FDF9CB74000                   ;     s324(rdi).var   =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdx, 10                                   ;     arg3(s327)(rdx).u32 = MOV         10 (0xA).u32
    MOV           rsi, 261                                  ;     arg2(s328)(rsi).u32 = MOV         261 (0x105).u32
    MOV           rax, ProfiledLdRootFld                    ;     s330(rax).u64   =  MOV            ProfiledLdRootFld.u64
    CALL          rax                                       ;     s325(rax).var   =  CALL           s330(rax).u64
    MOV           r15, rax                                  ;     s85(r15).var    =  MOV            s325(rax).var
    MOV           rcx, rbp                                  ;     s315(rcx).u64   =  MOV            (rbp).u64
    MOV           rdi, r15                                  ;     s316(rdi).var   =  MOV            s85(r15).var
    MOV           rdx, 5                                    ;     arg3(s319)(rdx).u32 = MOV         5 (0x5).u32
    MOV           rsi, 188                                  ;     arg2(s320)(rsi).u32 = MOV         188 (0xBC).u32
    MOV           rax, ProfiledLdMethodFld                  ;     s322(rax).u64   =  MOV            ProfiledLdMethodFld.u64
    CALL          rax                                       ;     s317(rax).var   =  CALL           s322(rax).u64
    MOV           r14, rax                                  ;     s87(r14).var    =  MOV            s317(rax).var
    MOV           rsi, rbx                                  ;     s305(rsi).var   =  MOV            s16(rbx).var
    MOV           rax, SYM(s12<-64>)                        ;     s12(rax).var    =  MOV            s12<-64>.var
    MOV           rdi, rax                                  ;     s306(rdi).var   =  MOV            s12(rax).var
    XOR           r9, r9                                    ;     arg6(s308)(r9).i32 = XOR          arg6(s308)(r9).i32, arg6(s308)(r9).i32
    XOR           r8, r8                                    ;     arg5(s309)(r8).i32 = XOR          arg5(s309)(r8).i32, arg5(s309)(r8).i32
    MOV           rcx, 2                                    ;     arg4(s310)(rcx).u32 = MOV         2 (0x2).u32
    MOV           rdx, 0x00007FDF9C3387C0                   ;     arg3(s311)(rdx).u64 = MOV         0xXXXXXXXX (FunctionBody [testMathOps (#1.4), #5]).u64
    MOV           rax, ProfiledLdElem                       ;     s314(rax).u64   =  MOV            ProfiledLdElem.u64
    CALL          rax                                       ;     s307(rax).var   =  CALL           s314(rax).u64
    MOV           rcx, r14                                  ;     s284(rcx).i64   =  MOV            s87(r14).var!
    SHR           rcx, 48                                   ;     s284(rcx).i64   =  SHR            s284(rcx).i64, 48 (0x30).i8
    JNE           L25                                       ;                        JNE            $L25
L26:                                                        ; $L26:
    MOV           rcx, [r14 + (8)]                          ;     s288(rcx).i64   =  MOV            [s87(r14).var+8].i64
    MOV           rcx, [rcx + (24)]                         ;     s288(rcx).i64   =  MOV            [s288(rcx).i64+24].u64
    MOV           SYM(s288<-24>.i64), rcx                   ;     s288<-24>.i64   =  MOV            s288(rcx).i64
    MOV           rdi, r14                                  ;     (rdi).i64       =  MOV            s87(r14).var
    MOV           rcx, rax                                  ;     arg2(s90)(rcx).var = MOV          s120(rax).var!
    MOV           rdx, r15                                  ;     arg1(s89)(rdx).var = MOV          s121(r15).var!
    MOV           rsi, 33554434                             ;     (rsi).i64       =  MOV            33554434 (0x2000002).i64
    MOV           SYM(arg4(s290)<24>.u64), rcx              ;     arg4(s290)<24>.u64 = MOV          (rcx).u64
    MOV           SYM(arg3(s291)<16>.u64), rdx              ;     arg3(s291)<16>.u64 = MOV          (rdx).u64
    MOV           SYM(arg2(s292)<8>.u64), rsi               ;     arg2(s292)<8>.u64 = MOV           (rsi).u64
    MOV           SYM(arg1(s293)<0>.u64), rdi               ;     arg1(s293)<0>.u64 = MOV           (rdi).u64
    MOV           r15, [r12 + (0)]                          ;     s294(r15).u8    =  MOV            [s165(r12).u64 < (&ImplicitCallFlags)>].u8
    MOV           r11, SYM(s288<-24>.i64)                   ;     s288(r11).i64   =  MOV            s288<-24>.i64
    CALL          rax, r11                                  ;     s289(rax).var   =  CALL           s288(r11).i64
    MOV           r13, rax                                  ;     s91(r13).var    =  MOV            s289(rax).var
    MOV           r8, r14                                   ;     s295(r8).var    =  MOV            s87(r14).var
    MOV           rdi, rbp                                  ;     s297(rdi).u64   =  MOV            (rbp).u64
    MOV           r9, 33554434                              ;     arg6(s298)(r9).u32 = MOV          33554434 (0x2000002).u32
    MOV           rcx, rax                                  ;     arg4(s300)(rcx).var = MOV         s296(rax).var
    MOV           rdx, 5                                    ;     arg3(s301)(rdx).u32 = MOV         5 (0x5).u32
    MOV           rsi, 8                                    ;     arg2(s302)(rsi).u32 = MOV         8 (0x8).u32
    MOV           rax, SimpleProfileCall                    ;     s304(rax).u64   =  MOV            SimpleProfileCall.u64
    CALL          rax                                       ;                        CALL           s304(rax).u64
    MOV           [r12 + (0)], r15                          ;     [s165(r12).u64 < (&ImplicitCallFlags)>].u8 = MOV  s294(r15).u8
    MOV           rdi, r13                                  ;     s278(rdi).var   =  MOV            s91(r13).var!
    MOV           rsi, 0x000055A6793BE038                   ;     arg2(s281)(rsi).u64 = MOV         0xXXXXXXXX (ScriptContext).u64
    MOV           rax, Conv_ToBoolean                       ;     s283(rax).u64   =  MOV            Conv_ToBoolean.u64
    CALL          rax                                       ;     s280(rax).var   =  CALL           s283(rax).u64
    TEST          rax, rax                                  ;                        TEST           s279(rax).var, s279(rax).var
    JEQ           L59                                       ;                        JEQ            $L59
                                                            ; 
                                                            ; 
                                                            ;   Line  66: assertEquals(true, Number.isNaN(arr[i]));
                                                            ;   Col   13: ^
                                                            ;                        StatementBoundary  #13
    MOV           rcx, rbp                                  ;     s270(rcx).u64   =  MOV            (rbp).u64
    MOV           rdi, 0x00007FDF9CB74000                   ;     s271(rdi).var   =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdx, 12                                   ;     arg3(s274)(rdx).u32 = MOV         12 (0xC).u32
    MOV           rsi, 838                                  ;     arg2(s275)(rsi).u32 = MOV         838 (0x346).u32
    MOV           rax, ProfiledLdRootMethodFld              ;     s277(rax).u64   =  MOV            ProfiledLdRootMethodFld.u64
    CALL          rax                                       ;     s272(rax).var   =  CALL           s277(rax).u64
    MOV           r13, rax                                  ;     s93(r13).var    =  MOV            s272(rax).var
    MOV           r14, 0x00007FDF9CB75030                   ;     s117(r14).var   =  MOV            0xXXXXXXXX (undefined)[Undefined].var
    MOV           SYM(s117<-24>), r14                       ;     s117<-24>.var   =  MOV            s117(r14).var
    MOV           r15, 0x00007FDF9C3408C0                   ;     s116(r15).var   =  MOV            0xXXXXXXXX (true)[Boolean].var
    MOV           SYM(s116<-40>), r15                       ;     s116<-40>.var   =  MOV            s116(r15).var
    MOV           rcx, rbp                                  ;     s262(rcx).u64   =  MOV            (rbp).u64
    MOV           rdi, 0x00007FDF9CB74000                   ;     s263(rdi).var   =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdx, 10                                   ;     arg3(s266)(rdx).u32 = MOV         10 (0xA).u32
    MOV           rsi, 261                                  ;     arg2(s267)(rsi).u32 = MOV         261 (0x105).u32
    MOV           rax, ProfiledLdRootFld                    ;     s269(rax).u64   =  MOV            ProfiledLdRootFld.u64
    CALL          rax                                       ;     s264(rax).var   =  CALL           s269(rax).u64
    MOV           r14, rax                                  ;     s97(r14).var    =  MOV            s264(rax).var
    MOV           rcx, rbp                                  ;     s254(rcx).u64   =  MOV            (rbp).u64
    MOV           rdi, r14                                  ;     s255(rdi).var   =  MOV            s97(r14).var
    MOV           rdx, 6                                    ;     arg3(s258)(rdx).u32 = MOV         6 (0x6).u32
    MOV           rsi, 188                                  ;     arg2(s259)(rsi).u32 = MOV         188 (0xBC).u32
    MOV           rax, ProfiledLdMethodFld                  ;     s261(rax).u64   =  MOV            ProfiledLdMethodFld.u64
    CALL          rax                                       ;     s256(rax).var   =  CALL           s261(rax).u64
    NOP                                                     ;                        NOP            
    MOV           r15, rax                                  ;     s99(r15).var    =  MOV            s256(rax).var
    MOV           rsi, rbx                                  ;     s244(rsi).var   =  MOV            s16(rbx).var
    MOV           rax, SYM(s15<-72>)                        ;     s15(rax).var    =  MOV            s15<-72>.var
    MOV           rdi, rax                                  ;     s245(rdi).var   =  MOV            s15(rax).var
    XOR           r9, r9                                    ;     arg6(s247)(r9).i32 = XOR          arg6(s247)(r9).i32, arg6(s247)(r9).i32
    XOR           r8, r8                                    ;     arg5(s248)(r8).i32 = XOR          arg5(s248)(r8).i32, arg5(s248)(r8).i32
    MOV           rcx, 3                                    ;     arg4(s249)(rcx).u32 = MOV         3 (0x3).u32
    MOV           rdx, 0x00007FDF9C3387C0                   ;     arg3(s250)(rdx).u64 = MOV         0xXXXXXXXX (FunctionBody [testMathOps (#1.4), #5]).u64
    MOV           rax, ProfiledLdElem                       ;     s253(rax).u64   =  MOV            ProfiledLdElem.u64
    CALL          rax                                       ;     s246(rax).var   =  CALL           s253(rax).u64
    MOV           rcx, r15                                  ;     s223(rcx).i64   =  MOV            s99(r15).var!
    SHR           rcx, 48                                   ;     s223(rcx).i64   =  SHR            s223(rcx).i64, 48 (0x30).i8
    JNE           L23                                       ;                        JNE            $L23
L24:                                                        ; $L24:
    MOV           rcx, [r15 + (8)]                          ;     s227(rcx).i64   =  MOV            [s99(r15).var+8].i64
    MOV           rcx, [rcx + (24)]                         ;     s227(rcx).i64   =  MOV            [s227(rcx).i64+24].u64
    MOV           SYM(s227<-80>.i64), rcx                   ;     s227<-80>.i64   =  MOV            s227(rcx).i64
    MOV           rdi, r15                                  ;     (rdi).i64       =  MOV            s99(r15).var
    MOV           rcx, rax                                  ;     arg2(s102)(rcx).var = MOV         s118(rax).var!
    MOV           rdx, r14                                  ;     arg1(s101)(rdx).var = MOV         s119(r14).var!
    MOV           rsi, 33554434                             ;     (rsi).i64       =  MOV            33554434 (0x2000002).i64
    MOV           SYM(arg4(s229)<24>.u64), rcx              ;     arg4(s229)<24>.u64 = MOV          (rcx).u64
    MOV           SYM(arg3(s230)<16>.u64), rdx              ;     arg3(s230)<16>.u64 = MOV          (rdx).u64
    MOV           SYM(arg2(s231)<8>.u64), rsi               ;     arg2(s231)<8>.u64 = MOV           (rsi).u64
    MOV           SYM(arg1(s232)<0>.u64), rdi               ;     arg1(s232)<0>.u64 = MOV           (rdi).u64
    MOV           r14, [r12 + (0)]                          ;     s233(r14).u8    =  MOV            [s165(r12).u64 < (&ImplicitCallFlags)>].u8
    MOV           r11, SYM(s227<-80>.i64)                   ;     s227(r11).i64   =  MOV            s227<-80>.i64
    CALL          rax, r11                                  ;     s228(rax).var   =  CALL           s227(r11).i64
    MOV           rcx, rax                                  ;     s103(rcx).var   =  MOV            s228(rax).var
    MOV           SYM(s103<-80>), rcx                       ;     s103<-80>.var   =  MOV            s103(rcx).var
    MOV           r8, r15                                   ;     s234(r8).var    =  MOV            s99(r15).var
    MOV           rdi, rbp                                  ;     s236(rdi).u64   =  MOV            (rbp).u64
    MOV           r9, 33554434                              ;     arg6(s237)(r9).u32 = MOV          33554434 (0x2000002).u32
    MOV           rcx, rax                                  ;     arg4(s239)(rcx).var = MOV         s235(rax).var
    MOV           rdx, 6                                    ;     arg3(s240)(rdx).u32 = MOV         6 (0x6).u32
    MOV           rsi, 10                                   ;     arg2(s241)(rsi).u32 = MOV         10 (0xA).u32
    MOV           rax, SimpleProfileCall                    ;     s243(rax).u64   =  MOV            SimpleProfileCall.u64
    CALL          rax                                       ;                        CALL           s243(rax).u64
    MOV           [r12 + (0)], r14                          ;     [s165(r12).u64 < (&ImplicitCallFlags)>].u8 = MOV  s233(r14).u8
    MOV           r11, SYM(s103<-80>)                       ;     s103(r11).var   =  MOV            s103<-80>.var
    MOV           r14, r11                                  ;     s115(r14).var   =  MOV            s103(r11).var!
    MOV           rax, r13                                  ;     s203(rax).i64   =  MOV            s93(r13).var!
    SHR           rax, 48                                   ;     s203(rax).i64   =  SHR            s203(rax).i64, 48 (0x30).i8
    JNE           L21                                       ;                        JNE            $L21
L22:                                                        ; $L22:
    MOV           rax, [r13 + (8)]                          ;     s207(rax).i64   =  MOV            [s93(r13).var+8].i64
    MOV           rax, [rax + (24)]                         ;     s207(rax).i64   =  MOV            [s207(rax).i64+24].u64
    MOV           rdi, r13                                  ;     (rdi).i64       =  MOV            s93(r13).var
    MOV           r8, r14                                   ;     arg3(s104)(r8).var = MOV          s115(r14).var!
    MOV           r11, SYM(s116<-40>)                       ;     s116(r11).var   =  MOV            s116<-40>.var
    NOP           2                                         ;                        NOP            2 (0x2).i8
    MOV           rcx, r11                                  ;     arg2(s96)(rcx).var = MOV          s116(r11).var!
    MOV           r10, SYM(s117<-24>)                       ;     s117(r10).var   =  MOV            s117<-24>.var
    MOV           rdx, r10                                  ;     arg1(s95)(rdx).var = MOV          s117(r10).var!
    MOV           rsi, 268435459                            ;     (rsi).i64       =  MOV            268435459 (0x10000003).i64
    MOV           SYM(arg5(s208)<32>.u64), r8               ;     arg5(s208)<32>.u64 = MOV          (r8).u64
    MOV           SYM(arg4(s209)<24>.u64), rcx              ;     arg4(s209)<24>.u64 = MOV          (rcx).u64
    MOV           SYM(arg3(s210)<16>.u64), rdx              ;     arg3(s210)<16>.u64 = MOV          (rdx).u64
    MOV           SYM(arg2(s211)<8>.u64), rsi               ;     arg2(s211)<8>.u64 = MOV           (rsi).u64
    MOV           SYM(arg1(s212)<0>.u64), rdi               ;     arg1(s212)<0>.u64 = MOV           (rdi).u64
    MOV           r14, [r12 + (0)]                          ;     s213(r14).u8    =  MOV            [s165(r12).u64 < (&ImplicitCallFlags)>].u8
    CALL          rax                                       ;                        CALL           s207(rax).i64
    MOV           r8, r13                                   ;     s214(r8).var    =  MOV            s93(r13).var
    MOV           rdi, rbp                                  ;     s215(rdi).u64   =  MOV            (rbp).u64
    MOV           r9, 268435459                             ;     arg6(s216)(r9).u32 = MOV          268435459 (0x10000003).u32
    XOR           rcx, rcx                                  ;     arg4(s218)(rcx).i32 = XOR         arg4(s218)(rcx).i32, arg4(s218)(rcx).i32
    MOV           rdx, 12                                   ;     arg3(s219)(rdx).u32 = MOV         12 (0xC).u32
    MOV           rsi, 9                                    ;     arg2(s220)(rsi).u32 = MOV         9 (0x9).u32
    MOV           rax, SimpleProfileCall                    ;     s222(rax).u64   =  MOV            SimpleProfileCall.u64
    CALL          rax                                       ;                        CALL           s222(rax).u64
    MOV           [r12 + (0)], r14                          ;     [s165(r12).u64 < (&ImplicitCallFlags)>].u8 = MOV  s213(r14).u8
    JMP           L3                                        ;                        JMP            $L3
L59:                                                        ; $L59:
                                                            ; 
                                                            ; 
                                                            ;   Line  68: assertEquals(resultArr[i], arr[i]);
                                                            ;   Col   13: ^
                                                            ;                        StatementBoundary  #14
    MOV           rcx, rbp                                  ;     s195(rcx).u64   =  MOV            (rbp).u64
    MOV           rdi, 0x00007FDF9CB74000                   ;     s196(rdi).var   =  MOV            0xXXXXXXXX (GlobalObject)[Object].var
    MOV           rdx, 12                                   ;     arg3(s199)(rdx).u32 = MOV         12 (0xC).u32
    MOV           rsi, 838                                  ;     arg2(s200)(rsi).u32 = MOV         838 (0x346).u32
    MOV           rax, ProfiledLdRootMethodFld              ;     s202(rax).u64   =  MOV            ProfiledLdRootMethodFld.u64
    CALL          rax                                       ;     s197(rax).var   =  CALL           s202(rax).u64
    MOV           r13, rax                                  ;     s105(r13).var   =  MOV            s197(rax).var
    MOV           r14, 0x00007FDF9CB75030                   ;     s114(r14).var   =  MOV            0xXXXXXXXX (undefined)[Undefined].var
    MOV           rsi, rbx                                  ;     s185(rsi).var   =  MOV            s16(rbx).var
    MOV           r15, SYM(s12<-64>)                        ;     s12(r15).var    =  MOV            s12<-64>.var
    MOV           rdi, r15                                  ;     s186(rdi).var   =  MOV            s12(r15).var
    XOR           r9, r9                                    ;     arg6(s188)(r9).i32 = XOR          arg6(s188)(r9).i32, arg6(s188)(r9).i32
    XOR           r8, r8                                    ;     arg5(s189)(r8).i32 = XOR          arg5(s189)(r8).i32, arg5(s189)(r8).i32
    MOV           rcx, 4                                    ;     arg4(s190)(rcx).u32 = MOV         4 (0x4).u32
    MOV           rdx, 0x00007FDF9C3387C0                   ;     arg3(s191)(rdx).u64 = MOV         0xXXXXXXXX (FunctionBody [testMathOps (#1.4), #5]).u64
    MOV           rax, ProfiledLdElem                       ;     s194(rax).u64   =  MOV            ProfiledLdElem.u64
    CALL          rax                                       ;     s187(rax).var   =  CALL           s194(rax).u64
    MOV           r15, rax                                  ;     s113(r15).var   =  MOV            s108(rax).var!
    MOV           rsi, rbx                                  ;     s175(rsi).var   =  MOV            s16(rbx).var
    MOV           rax, SYM(s15<-72>)                        ;     s15(rax).var    =  MOV            s15<-72>.var
    MOV           rdi, rax                                  ;     s176(rdi).var   =  MOV            s15(rax).var
    XOR           r9, r9                                    ;     arg6(s178)(r9).i32 = XOR          arg6(s178)(r9).i32, arg6(s178)(r9).i32
    XOR           r8, r8                                    ;     arg5(s179)(r8).i32 = XOR          arg5(s179)(r8).i32, arg5(s179)(r8).i32
    MOV           rcx, 5                                    ;     arg4(s180)(rcx).u32 = MOV         5 (0x5).u32
    MOV           rdx, 0x00007FDF9C3387C0                   ;     arg3(s181)(rdx).u64 = MOV         0xXXXXXXXX (FunctionBody [testMathOps (#1.4), #5]).u64
    MOV           rax, ProfiledLdElem                       ;     s184(rax).u64   =  MOV            ProfiledLdElem.u64
    CALL          rax                                       ;     s177(rax).var   =  CALL           s184(rax).u64
    MOV           rcx, r13                                  ;     s154(rcx).i64   =  MOV            s105(r13).var!
    SHR           rcx, 48                                   ;     s154(rcx).i64   =  SHR            s154(rcx).i64, 48 (0x30).i8
    JNE           L19                                       ;                        JNE            $L19
L20:                                                        ; $L20:
    MOV           rcx, [r13 + (8)]                          ;     s158(rcx).i64   =  MOV            [s105(r13).var+8].i64
    MOV           rcx, [rcx + (24)]                         ;     s158(rcx).i64   =  MOV            [s158(rcx).i64+24].u64
    MOV           SYM(s158<-24>.i64), rcx                   ;     s158<-24>.i64   =  MOV            s158(rcx).i64
    MOV           rdi, r13                                  ;     (rdi).i64       =  MOV            s105(r13).var
    MOV           r8, rax                                   ;     arg3(s111)(r8).var = MOV          s112(rax).var!
    MOV           rcx, r15                                  ;     arg2(s109)(rcx).var = MOV         s113(r15).var!
    MOV           rdx, r14                                  ;     arg1(s107)(rdx).var = MOV         s114(r14).var!
    MOV           rsi, 268435459                            ;     (rsi).i64       =  MOV            268435459 (0x10000003).i64
    MOV           SYM(arg5(s159)<32>.u64), r8               ;     arg5(s159)<32>.u64 = MOV          (r8).u64
    MOV           SYM(arg4(s160)<24>.u64), rcx              ;     arg4(s160)<24>.u64 = MOV          (rcx).u64
    MOV           SYM(arg3(s161)<16>.u64), rdx              ;     arg3(s161)<16>.u64 = MOV          (rdx).u64
    MOV           SYM(arg2(s162)<8>.u64), rsi               ;     arg2(s162)<8>.u64 = MOV           (rsi).u64
    MOV           SYM(arg1(s163)<0>.u64), rdi               ;     arg1(s163)<0>.u64 = MOV           (rdi).u64
    MOV           r14, [r12 + (0)]                          ;     s164(r14).u8    =  MOV            [s165(r12).u64 < (&ImplicitCallFlags)>].u8
    MOV           r11, SYM(s158<-24>.i64)                   ;     s158(r11).i64   =  MOV            s158<-24>.i64
    CALL          r11                                       ;                        CALL           s158(r11).i64
    MOV           r8, r13                                   ;     s166(r8).var    =  MOV            s105(r13).var
    MOV           rdi, rbp                                  ;     s167(rdi).u64   =  MOV            (rbp).u64
    MOV           r9, 268435459                             ;     arg6(s168)(r9).u32 = MOV          268435459 (0x10000003).u32
    XOR           rcx, rcx                                  ;     arg4(s170)(rcx).i32 = XOR         arg4(s170)(rcx).i32, arg4(s170)(rcx).i32
    MOV           rdx, 12                                   ;     arg3(s171)(rdx).u32 = MOV         12 (0xC).u32
    MOV           rsi, 11                                   ;     arg2(s172)(rsi).u32 = MOV         11 (0xB).u32
    MOV           rax, SimpleProfileCall                    ;     s174(rax).u64   =  MOV            SimpleProfileCall.u64
    CALL          rax                                       ;                        CALL           s174(rax).u64
    MOV           [r12 + (0)], r14                          ;     [s165(r12).u64 < (&ImplicitCallFlags)>].u8 = MOV  s164(r14).u8
L3:                                                         ; $L3:
                                                            ; 
                                                            ; 
                                                            ;   Line  64: i++) {
                                                            ;   Col   43: ^
                                                            ;                        StatementBoundary  #15
    MOV           rdi, rbx                                  ;     s149(rdi).var   =  MOV            s16(rbx).var!
    MOV           rsi, 0x000055A6793BE038                   ;     arg2(s151)(rsi).u64 = MOV         0xXXXXXXXX (ScriptContext).u64
    MOV           rax, Op_Increment                         ;     s153(rax).u64   =  MOV            Op_Increment.u64
    CALL          rax                                       ;     s150(rax).var   =  CALL           s153(rax).u64
    MOV           rbx, rax                                  ;     s16(rbx).var    =  MOV            s150(rax).var
    MOV           r13, SYM(s15<-72>)                        ;     s15(r13).var    =  MOV            s15<-72>.var
    MOV           r14, SYM(s12<-64>)                        ;     s12(r14).var    =  MOV            s12<-64>.var
    MOV           r15, SYM(s81<-16>.u64)                    ;     s81(r15).u64    =  MOV            s81<-16>.u64
    JMP           L2                                        ;                        JMP            $L2
L6:                                                         ; $L6:
    MOV           r11, SYM(s80<-32>.u8)                     ;     s80(r11).u8     =  MOV            s80<-32>.u8
    MOV           rdi, rbp                                  ;     s144(rdi).u64   =  MOV            (rbp).u64
    MOVZX         rdx, r11                                  ;     arg3(s145)(rdx).u32 = MOVZX       s143(r11).u8
    XOR           rsi, rsi                                  ;     arg2(s146)(rsi).u32 = XOR         arg2(s146)(rsi).u32, arg2(s146)(rsi).u32
    MOV           rax, SimpleRecordLoopImplicitCallFlags    ;     s148(rax).u64   =  MOV            SimpleRecordLoopImplicitCallFlags.u64
    CALL          rax                                       ;                        CALL           s148(rax).u64
    MOV           rbx, 0x00007FDF9CB75030                   ;     s0(rbx).var     =  MOV            0xXXXXXXXX (undefined)[Undefined].var
                                                            ; 
                                                            ; 
                                                            ;   Line  72: }
                                                            ;   Col    1: ^
                                                            ;                        StatementBoundary  #16
                                                            ;                        StatementBoundary  #-1
    MOV           rdi, 0x00007FDF9C3387C0                   ;     arg1(s140)(rdi).u64 = MOV         0xXXXXXXXX (FunctionBody [testMathOps (#1.4), #5]).u64
    MOV           rax, SimpleCleanImplicitCallFlags         ;     s141(rax).u64   =  MOV            SimpleCleanImplicitCallFlags.u64
    CALL          rax                                       ;                        CALL           s141(rax).u64
    MOV           rax, rbx                                  ;     s142(rax).i64   =  MOV            s0(rbx).var!
L30:                                                        ; $L30 (Epilogue):
    ADD           rsp, 64                                   ;     (rsp).i64       =  ADD            (rsp).i64, 64 (0x40).i64
    POP           rbx                                       ;     (rbx).i64       =  POP            
    POP           r12                                       ;     (r12).i64       =  POP            
    POP           r13                                       ;     (r13).i64       =  POP            
    POP           r14                                       ;     (r14).i64       =  POP            
    POP           r15                                       ;     (r15).i64       =  POP            
    MOV           rsp, rbp                                  ;     (rsp).i64       =  MOV            (rbp).i64
    POP           rbp                                       ;     (rbp).i64       =  POP            
    RET           0, rax                                    ;                        RET            0 (0x0).i32, (rax).i64
                                                            ;                        FunctionExit   
                                                            ;                        StatementBoundary  #-1
L49:                                                        ; $L49: [helper]
    MOV           r8, 0x00007FDF9CB75030                    ;     s689(r8).u64    =  MOV            0xXXXXXXXX (undefined).var
    MOV           r14, r8                                   ;     s12(r14).var    =  MOV            s689(r8).u64
    MOV           SYM(s12<-64>), r14                        ;     s12<-64>.var    =  MOV            s12(r14).var
    ADD           rdi, 1                                    ;     s688(rdi).i64   =  ADD            s688(rdi).i64, 1 (0x1).i64
    JEQ           L51                                       ;                        JEQ            $L51
    MOV           r15, r8                                   ;     s11(r15).var    =  MOV            s689(r8).u64
    MOV           SYM(s11<-16>), r15                        ;     s11<-16>.var    =  MOV            s11(r15).var
    ADD           rdi, 1                                    ;     s688(rdi).i64   =  ADD            s688(rdi).i64, 1 (0x1).i64
    JEQ           L57                                       ;                        JEQ            $L57
    MOV           r13, r8                                   ;     s10(r13).var    =  MOV            s689(r8).u64
    ADD           rdi, 1                                    ;     s688(rdi).i64   =  ADD            s688(rdi).i64, 1 (0x1).i64
    NOP           3                                         ;                        NOP            3 (0x3).i8
    JEQ           L58                                       ;                        JEQ            $L58
    MOV           r15, r8                                   ;     s9(r15).var     =  MOV            s689(r8).u64
    MOV           rdi, SYM(s11<-16>)                        ;     s11(rdi).var    =  MOV            s11<-16>.var
    JMP           L54                                       ;                        JMP            $L54
                                                            ;                        StatementBoundary  #-1
L57:                                                        ; $L57: [helper]
    MOV           rdi, r15                                  ;     s11(rdi).i64    =  MOV            s11(r15).i64
    JMP           L52                                       ;                        JMP            $L52
                                                            ;                        StatementBoundary  #-1
L58:                                                        ; $L58: [helper]
    MOV           rdi, r15                                  ;     s11(rdi).i64    =  MOV            s11(r15).i64
    JMP           L53                                       ;                        JMP            $L53
                                                            ; 
                                                            ; 
                                                            ;   Line  49: const type = funcname.split('_')[1];
                                                            ;   Col    5: ^
                                                            ;                        StatementBoundary  #1
L47:                                                        ; $L47: [helper]
    MOV           SYM(s700<-104>.i64), rcx                  ;     s700<-104>.i64  =  MOV            (rcx).i64
    MOV           SYM(s699<-96>.i64), rdx                   ;     s699<-96>.i64   =  MOV            (rdx).i64
    MOV           SYM(s698<-88>.i64), r8                    ;     s698<-88>.i64   =  MOV            (r8).i64
    MOV           rsi, 0x000055A6793BE038                   ;     arg2(s650)(rsi).u64 = MOV         0xXXXXXXXX (ScriptContext).u64
    MOV           rdi, -2146823286                          ;     arg1(s651)(rdi).u32 = MOV         -2146823286 (0xFFFFFFFF800A138A).u32
    MOV           rax, Op_RuntimeTypeError                  ;     s652(rax).u64   =  MOV            Op_RuntimeTypeError.u64
    CALL          rax                                       ;                        CALL           s652(rax).u64
    NOP           2                                         ;                        NOP            2 (0x2).i8
    MOV           r8, SYM(s698<-88>.i64)                    ;     (r8).i64        =  MOV            s698<-88>.i64
    MOV           rdx, SYM(s699<-96>.i64)                   ;     (rdx).i64       =  MOV            s699<-96>.i64
    MOV           rcx, SYM(s700<-104>.i64)                  ;     (rcx).i64       =  MOV            s700<-104>.i64
    JMP           L48                                       ;                        JMP            $L48
                                                            ; 
                                                            ; 
                                                            ;   Line  52: moveArgsIntoArray(args1, 0, arr);
                                                            ;   Col    5: ^
                                                            ;                        StatementBoundary  #3
L45:                                                        ; $L45: [helper]
    MOV           SYM(s701<-112>.i64), r9                   ;     s701<-112>.i64  =  MOV            (r9).i64
    MOV           SYM(s700<-104>.i64), r8                   ;     s700<-104>.i64  =  MOV            (r8).i64
    MOV           SYM(s699<-96>.i64), rcx                   ;     s699<-96>.i64   =  MOV            (rcx).i64
    MOV           SYM(s698<-88>.i64), rdx                   ;     s698<-88>.i64   =  MOV            (rdx).i64
    MOV           rsi, 0x000055A6793BE038                   ;     arg2(s593)(rsi).u64 = MOV         0xXXXXXXXX (ScriptContext).u64
    MOV           rdi, -2146823286                          ;     arg1(s594)(rdi).u32 = MOV         -2146823286 (0xFFFFFFFF800A138A).u32
    MOV           rax, Op_RuntimeTypeError                  ;     s595(rax).u64   =  MOV            Op_RuntimeTypeError.u64
    CALL          rax                                       ;                        CALL           s595(rax).u64
    MOV           rdx, SYM(s698<-88>.i64)                   ;     (rdx).i64       =  MOV            s698<-88>.i64
    MOV           rcx, SYM(s699<-96>.i64)                   ;     (rcx).i64       =  MOV            s699<-96>.i64
    MOV           r8, SYM(s700<-104>.i64)                   ;     (r8).i64        =  MOV            s700<-104>.i64
    MOV           r9, SYM(s701<-112>.i64)                   ;     (r9).i64        =  MOV            s701<-112>.i64
    JMP           L46                                       ;                        JMP            $L46
                                                            ; 
                                                            ; 
                                                            ;   Line  53: if (Array.isArray(args2)) { //binary ops
                                                            ;   Col    5: ^
                                                            ;                        StatementBoundary  #4
L43:                                                        ; $L43: [helper]
    MOV           SYM(s699<-96>.i64), rcx                   ;     s699<-96>.i64   =  MOV            (rcx).i64
    MOV           SYM(s698<-88>.i64), rax                   ;     s698<-88>.i64   =  MOV            (rax).i64
    MOV           rsi, 0x000055A6793BE038                   ;     arg2(s556)(rsi).u64 = MOV         0xXXXXXXXX (ScriptContext).u64
    MOV           rdi, -2146823286                          ;     arg1(s557)(rdi).u32 = MOV         -2146823286 (0xFFFFFFFF800A138A).u32
    MOV           rax, Op_RuntimeTypeError                  ;     s558(rax).u64   =  MOV            Op_RuntimeTypeError.u64
    CALL          rax                                       ;                        CALL           s558(rax).u64
    MOV           rax, SYM(s698<-88>.i64)                   ;     (rax).i64       =  MOV            s698<-88>.i64
    MOV           rcx, SYM(s699<-96>.i64)                   ;     (rcx).i64       =  MOV            s699<-96>.i64
    JMP           L44                                       ;                        JMP            $L44
                                                            ; 
                                                            ; 
                                                            ;   Line  54: moveArgsIntoArray(args2, len, arr);
                                                            ;   Col    9: ^
                                                            ;                        StatementBoundary  #5
L41:                                                        ; $L41: [helper]
    MOV           SYM(s701<-112>.i64), r9                   ;     s701<-112>.i64  =  MOV            (r9).i64
    MOV           SYM(s700<-104>.i64), r8                   ;     s700<-104>.i64  =  MOV            (r8).i64
    MOV           SYM(s699<-96>.i64), rcx                   ;     s699<-96>.i64   =  MOV            (rcx).i64
    MOV           SYM(s698<-88>.i64), rax                   ;     s698<-88>.i64   =  MOV            (rax).i64
    MOV           rsi, 0x000055A6793BE038                   ;     arg2(s521)(rsi).u64 = MOV         0xXXXXXXXX (ScriptContext).u64
    MOV           rdi, -2146823286                          ;     arg1(s522)(rdi).u32 = MOV         -2146823286 (0xFFFFFFFF800A138A).u32
    MOV           rax, Op_RuntimeTypeError                  ;     s523(rax).u64   =  MOV            Op_RuntimeTypeError.u64
    CALL          rax                                       ;                        CALL           s523(rax).u64
    MOV           rax, SYM(s698<-88>.i64)                   ;     (rax).i64       =  MOV            s698<-88>.i64
    MOV           rcx, SYM(s699<-96>.i64)                   ;     (rcx).i64       =  MOV            s699<-96>.i64
    MOV           r8, SYM(s700<-104>.i64)                   ;     (r8).i64        =  MOV            s700<-104>.i64
    MOV           r9, SYM(s701<-112>.i64)                   ;     (r9).i64        =  MOV            s701<-112>.i64
    JMP           L42                                       ;                        JMP            $L42
                                                            ; 
                                                            ; 
                                                            ;   Line  55: instance[funcname]();
                                                            ;   Col    9: ^
                                                            ;                        StatementBoundary  #6
L39:                                                        ; $L39: [helper]
    MOV           rsi, 0x000055A6793BE038                   ;     arg2(s489)(rsi).u64 = MOV         0xXXXXXXXX (ScriptContext).u64
    MOV           rdi, -2146823286                          ;     arg1(s490)(rdi).u32 = MOV         -2146823286 (0xFFFFFFFF800A138A).u32
    MOV           rax, Op_RuntimeTypeError                  ;     s491(rax).u64   =  MOV            Op_RuntimeTypeError.u64
    CALL          rax                                       ;                        CALL           s491(rax).u64
    JMP           L40                                       ;                        JMP            $L40
                                                            ; 
                                                            ; 
                                                            ;   Line  57: if (Number.isInteger(args2)) {
                                                            ;   Col   10: ^
                                                            ;                        StatementBoundary  #7
L37:                                                        ; $L37: [helper]
    MOV           SYM(s699<-96>.i64), rcx                   ;     s699<-96>.i64   =  MOV            (rcx).i64
    MOV           SYM(s698<-88>.i64), rax                   ;     s698<-88>.i64   =  MOV            (rax).i64
    MOV           rsi, 0x000055A6793BE038                   ;     arg2(s452)(rsi).u64 = MOV         0xXXXXXXXX (ScriptContext).u64
    MOV           rdi, -2146823286                          ;     arg1(s453)(rdi).u32 = MOV         -2146823286 (0xFFFFFFFF800A138A).u32
    MOV           rax, Op_RuntimeTypeError                  ;     s454(rax).u64   =  MOV            Op_RuntimeTypeError.u64
    CALL          rax                                       ;                        CALL           s454(rax).u64
    MOV           rax, SYM(s698<-88>.i64)                   ;     (rax).i64       =  MOV            s698<-88>.i64
    MOV           rcx, SYM(s699<-96>.i64)                   ;     (rcx).i64       =  MOV            s699<-96>.i64
    JMP           L38                                       ;                        JMP            $L38
                                                            ; 
                                                            ; 
                                                            ;   Line  58: instance[funcname](args2); //shift amount for shl/shr
                                                            ;   Col    9: ^
                                                            ;                        StatementBoundary  #8
L35:                                                        ; $L35: [helper]
    MOV           SYM(s698<-88>.i64), rcx                   ;     s698<-88>.i64   =  MOV            (rcx).i64
    MOV           rsi, 0x000055A6793BE038                   ;     arg2(s413)(rsi).u64 = MOV         0xXXXXXXXX (ScriptContext).u64
    MOV           rdi, -2146823286                          ;     arg1(s414)(rdi).u32 = MOV         -2146823286 (0xFFFFFFFF800A138A).u32
    MOV           rax, Op_RuntimeTypeError                  ;     s415(rax).u64   =  MOV            Op_RuntimeTypeError.u64
    CALL          rax                                       ;                        CALL           s415(rax).u64
    MOV           rcx, SYM(s698<-88>.i64)                   ;     (rcx).i64       =  MOV            s698<-88>.i64
    JMP           L36                                       ;                        JMP            $L36
                                                            ; 
                                                            ; 
                                                            ;   Line  61: instance[funcname](); //unary ops
                                                            ;   Col    9: ^
                                                            ;                        StatementBoundary  #9
L33:                                                        ; $L33: [helper]
    MOV           rsi, 0x000055A6793BE038                   ;     arg2(s381)(rsi).u64 = MOV         0xXXXXXXXX (ScriptContext).u64
    MOV           rdi, -2146823286                          ;     arg1(s382)(rdi).u32 = MOV         -2146823286 (0xFFFFFFFF800A138A).u32
    MOV           rax, Op_RuntimeTypeError                  ;     s383(rax).u64   =  MOV            Op_RuntimeTypeError.u64
    CALL          rax                                       ;                        CALL           s383(rax).u64
    JMP           L34                                       ;                        JMP            $L34
                                                            ; 
                                                            ; 
                                                            ;   Line  64: let i = 0; i < resultArr.length; i++) {
                                                            ;   Col   10: ^
                                                            ;                        StatementBoundary  #10
L28:                                                        ; $L28: [helper]
L29:                                                        ; $L29: [helper]
    MOV           rdi, 0x000055A6793E7668                   ;     (rdi).u64       =  MOV            0xXXXXXXXX (BailOutRecord).u64
    MOV           rax, SaveAllRegistersAndBailOut           ;     (rax).u64       =  MOV            SaveAllRegistersAndBailOut.u64
    CALL          rax                                       ;                        CALL           (rax).u64                                      Bailout: #0124 (BailOnSimpleJitToFullJitLoopBody)
    JMP           L30                                       ;                        JMP            $L30
                                                            ; 
                                                            ; 
                                                            ;   Line  65: if ((type === "f32x4" || type === "f64x2") && Number.isNaN(resultArr[i])) {
                                                            ;   Col    9: ^
                                                            ;                        StatementBoundary  #12
L25:                                                        ; $L25: [helper]
    MOV           SYM(s698<-88>.i64), rax                   ;     s698<-88>.i64   =  MOV            (rax).i64
    MOV           rsi, 0x000055A6793BE038                   ;     arg2(s285)(rsi).u64 = MOV         0xXXXXXXXX (ScriptContext).u64
    MOV           rdi, -2146823286                          ;     arg1(s286)(rdi).u32 = MOV         -2146823286 (0xFFFFFFFF800A138A).u32
    MOV           rax, Op_RuntimeTypeError                  ;     s287(rax).u64   =  MOV            Op_RuntimeTypeError.u64
    CALL          rax                                       ;                        CALL           s287(rax).u64
    MOV           rax, SYM(s698<-88>.i64)                   ;     (rax).i64       =  MOV            s698<-88>.i64
    JMP           L26                                       ;                        JMP            $L26
                                                            ; 
                                                            ; 
                                                            ;   Line  66: assertEquals(true, Number.isNaN(arr[i]));
                                                            ;   Col   13: ^
                                                            ;                        StatementBoundary  #13
L23:                                                        ; $L23: [helper]
    MOV           SYM(s698<-88>.i64), rax                   ;     s698<-88>.i64   =  MOV            (rax).i64
    MOV           rsi, 0x000055A6793BE038                   ;     arg2(s224)(rsi).u64 = MOV         0xXXXXXXXX (ScriptContext).u64
    MOV           rdi, -2146823286                          ;     arg1(s225)(rdi).u32 = MOV         -2146823286 (0xFFFFFFFF800A138A).u32
    MOV           rax, Op_RuntimeTypeError                  ;     s226(rax).u64   =  MOV            Op_RuntimeTypeError.u64
    CALL          rax                                       ;                        CALL           s226(rax).u64
    MOV           rax, SYM(s698<-88>.i64)                   ;     (rax).i64       =  MOV            s698<-88>.i64
    JMP           L24                                       ;                        JMP            $L24
                                                            ; 
                                                            ; 
                                                            ;   Line  66: assertEquals(true, Number.isNaN(arr[i]));
                                                            ;   Col   13: ^
                                                            ;                        StatementBoundary  #13
L21:                                                        ; $L21: [helper]
    MOV           rsi, 0x000055A6793BE038                   ;     arg2(s204)(rsi).u64 = MOV         0xXXXXXXXX (ScriptContext).u64
    NOP                                                     ;                        NOP            
    MOV           rdi, -2146823286                          ;     arg1(s205)(rdi).u32 = MOV         -2146823286 (0xFFFFFFFF800A138A).u32
    MOV           rax, Op_RuntimeTypeError                  ;     s206(rax).u64   =  MOV            Op_RuntimeTypeError.u64
    CALL          rax                                       ;                        CALL           s206(rax).u64
    JMP           L22                                       ;                        JMP            $L22
                                                            ; 
                                                            ; 
                                                            ;   Line  68: assertEquals(resultArr[i], arr[i]);
                                                            ;   Col   13: ^
                                                            ;                        StatementBoundary  #14
L19:                                                        ; $L19: [helper]
    MOV           SYM(s698<-88>.i64), rax                   ;     s698<-88>.i64   =  MOV            (rax).i64
    MOV           rsi, 0x000055A6793BE038                   ;     arg2(s155)(rsi).u64 = MOV         0xXXXXXXXX (ScriptContext).u64
    MOV           rdi, -2146823286                          ;     arg1(s156)(rdi).u32 = MOV         -2146823286 (0xFFFFFFFF800A138A).u32
    MOV           rax, Op_RuntimeTypeError                  ;     s157(rax).u64   =  MOV            Op_RuntimeTypeError.u64
    CALL          rax                                       ;                        CALL           s157(rax).u64
    MOV           rax, SYM(s698<-88>.i64)                   ;     (rax).i64       =  MOV            s698<-88>.i64
    JMP           L20                                       ;                        JMP            $L20
                                                            ;                        StatementBoundary  #-1
L60:                                                        ; $L60: [helper]
    MOV           rsi, 0x000055A6793BE038                   ;     (rsi).i64       =  MOV            0xXXXXXXXX (ScriptContext).u64
    MOV           rdi, 7280                                 ;     (rdi).i64       =  MOV            7280 (0x1C70).i64
    MOV           rax, ProbeCurrentStack                    ;     (rax).i64       =  MOV            ProbeCurrentStack.u64
    JMP           rax                                       ;                        JMP            (rax).i64
                                                            ;                        StatementBoundary  #-1
                                                            ;                        FunctionEntry  
    MOV           rax, 0x000055A67938C0D0                   ;     (rax).i64       =  MOV            0xXXXXXXXX (&StackLimit).u64
    MOV           rax, [rax + (0)]                          ;     (rax).i64       =  MOV            [(rax).i64].i64
    ADD           rax, 7200                                 ;     (rax).i64       =  ADD            (rax).i64, 7200 (0x1C20).i64
    CMP           rsp, rax                                  ;                        CMP            (rsp).i64, (rax).i64
    JLE           L22                                       ;                        JLE            $L22
    NOP           2                                         ;                        NOP            2 (0x2).i8
                                                            ;                        PrologStart    
    PUSH          rbp                                       ;                        PUSH           (rbp).i64
    MOV           rbp, rsp                                  ;     (rbp).i64       =  MOV            (rsp).i64
    SUB           rsp, 48                                   ;     (rsp).i64       =  SUB            (rsp).i64, 48 (0x30).i64
    PUSH          r15                                       ;                        PUSH           (r15).i64
    PUSH          r14                                       ;                        PUSH           (r14).i64
    PUSH          r13                                       ;                        PUSH           (r13).i64
    PUSH          r12                                       ;                        PUSH           (r12).i64
    PUSH          rbx                                       ;                        PUSH           (rbx).i64
    SUB           rsp, 56                                   ;     (rsp).i64       =  SUB            (rsp).i64, 56 (0x38).i64
                                                            ;                        PrologEnd      
    MOV           rbx, 0x000055A67938D560                   ;     s88(rbx).u64    =  MOV            0xXXXXXXXX (&ImplicitCallFlags).u64
    MOV           SYM(s88<-16>.u64), rbx                    ;     s88<-16>.u64    =  MOV            s88(rbx).u64
    MOV           r12, 0x00007FDF9CB71E20                   ;     s87(r12).u64    =  MOV            0xXXXXXXXX (Unknown).u64
    MOV           SYM(s87<-40>.u64), r12                    ;     s87<-40>.u64    =  MOV            s87(r12).u64
    MOV           rax, 0x00007FDF9C33A19C                   ;     s97(rax).u64    =  MOV            0xXXXXXXXX (&CallCount).u64
    MOV           rcx, [rax + (0)]                          ;     s98(rcx).u32    =  MOV            [s97(rax).u64].u32
    SUB           rcx, 1                                    ;     s98(rcx).u32    =  SUB            s98(rcx).u32, 1 (0x1).u32
    JB            L20                                       ;                        JB             $L20
    MOV           [rax + (0)], rcx                          ;     [s97(rax).u64].u32 = MOV          s98(rcx).u32
    JMP           L21                                       ;                        JMP            $L21
L20:                                                        ; $L20:
    MOV           rdi, rbp                                  ;     s99(rdi).u64    =  MOV            (rbp).u64
    MOV           rax, TransitionFromSimpleJit              ;     s101(rax).u64   =  MOV            TransitionFromSimpleJit.u64
    CALL          rax                                       ;                        CALL           s101(rax).u64
L21:                                                        ; $L21:
    MOV           rdi, rbp                                  ;     s102(rdi).u64   =  MOV            (rbp).u64
    MOV           rax, SimpleProfileParameters              ;     s104(rax).u64   =  MOV            SimpleProfileParameters.u64
    CALL          rax                                       ;                        CALL           s104(rax).u64
    MOV           [rbx + (0)], 1                            ;     [s88(rbx).u64 < (&ImplicitCallFlags)>].u8 = MOV  1 (0x1).u8
    MOV           rax, 0x0001000000000000                   ;     s2(rax).var     =  MOV            0x1000000000000.var
    MOV           rcx, SYM(callInfo<24>.i64)                ;     s95(rcx).i64    =  MOV            callInfo<24>.i64
    AND           rcx, 16777215                             ;     s95(rcx).i64    =  AND            s95(rcx).i64, 16777215 (0xFFFFFF).i64
    SUB           rcx, 4                                    ;     s95(rcx).i64    =  SUB            s95(rcx).i64, 4 (0x4).i64
    JLT           L15                                       ;                        JLT            $L15
L16:                                                        ; $L16:
    MOV           r13, SYM(prm4<56>)                        ;     s6(r13).var     =  MOV            prm4<56>.var!
    MOV           SYM(s6<-32>), r13                         ;     s6<-32>.var     =  MOV            s6(r13).var
L17:                                                        ; $L17:
    MOV           r14, SYM(prm3<48>)                        ;     s5(r14).var     =  MOV            prm3<48>.var!
L18:                                                        ; $L18:
    MOV           r15, SYM(prm2<40>)                        ;     s4(r15).var     =  MOV            prm2<40>.var!
L19:                                                        ; $L19:
                                                            ; 
                                                            ; 
                                                            ;   Line  28: let i = 0; i < args.length; i++) {
                                                            ;   Col   10: ^
                                                            ;                        StatementBoundary  #0
    MOV           rbx, rax                                  ;     s7(rbx).var     =  MOV            s2(rax).var!
    MOV           rax, SYM(s88<-16>.u64)                    ;     s88(rax).u64    =  MOV            s88<-16>.u64
    MOV           rcx, [rax + (0)]                          ;     s15(rcx).u8     =  MOV            [s88(rax).u64 < (&ImplicitCallFlags)>].u8
    MOV           SYM(s15<-17>.u8), rcx                     ;     s15<-17>.u8     =  MOV            s15(rcx).u8
    MOV           [rax + (0)], 1                            ;     [s88(rax).u64 < (&ImplicitCallFlags)>].u8 = MOV  1 (0x1).u8
    MOV           rdi, rbp                                  ;     s89(rdi).u64    =  MOV            (rbp).u64
    XOR           rsi, rsi                                  ;     arg2(s91)(rsi).u32 = XOR          arg2(s91)(rsi).u32, arg2(s91)(rsi).u32
    MOV           rax, SimpleGetScheduledEntryPoint         ;     s93(rax).u64    =  MOV            SimpleGetScheduledEntryPoint.u64
    CALL          rax                                       ;     s90(rax).u64    =  CALL           s93(rax).u64
    MOV           r13, rax                                  ;     s16(r13).u64    =  MOV            s90(rax).u64
L2:                                                         ; $L2: >>>>>>>>>>>>>  LOOP TOP  >>>>>>>>>>>>>
    MOV           rdi, rbp                                  ;     s77(rdi).u64    =  MOV            (rbp).u64
    XOR           rdx, rdx                                  ;     arg3(s78)(rdx).u32 = XOR          arg3(s78)(rdx).u32, arg3(s78)(rdx).u32
    XOR           rsi, rsi                                  ;     arg2(s79)(rsi).u32 = XOR          arg2(s79)(rsi).u32, arg2(s79)(rsi).u32
    MOV           rax, SimpleRecordLoopImplicitCallFlags    ;     s81(rax).u64    =  MOV            SimpleRecordLoopImplicitCallFlags.u64
    CALL          rax                                       ;                        CALL           s81(rax).u64
    TEST          r13, r13                                  ;                        TEST           s16(r13).u64, s16(r13).u64
    JEQ           L13                                       ;                        JEQ            $L13
    MOV           rdi, r13                                  ;     s82(rdi).u64    =  MOV            s16(r13).u64
    NOP           4                                         ;                        NOP            4 (0x4).i8
    MOV           rax, SimpleIsLoopCodeGenDone              ;     s85(rax).u64    =  MOV            SimpleIsLoopCodeGenDone.u64
    CALL          rax                                       ;     s83(rax).u8     =  CALL           s85(rax).u64
    JMP           L14                                       ;                        JMP            $L14
L13:                                                        ; $L13:
    MOV           rcx, [r12 + (0)]                          ;     s86(rcx).u32    =  MOV            [s87(r12).u64 < (Unknown)>].u32
    INC           rcx                                       ;     s86(rcx).u32    =  INC            s86(rcx).u32
    MOV           [r12 + (0)], rcx                          ;     [s87(r12).u64 < (Unknown)>].u32 = MOV  s86(rcx).u32
    XOR           rax, rax                                  ;     s17(rax).u8     =  XOR            s17(rax).u8, s17(rax).u8
    CMP           rcx, 150                                  ;                        CMP            s86(rcx).u32, 150 (0x96).u32
    JLT           L14                                       ;                        JLT            $L14
    MOV           rax, 1                                    ;     s17(rax).u32    =  MOV            1 (0x1).u32
L14:                                                        ; $L14:
    TEST          rax, rax                                  ;                        TEST           s17(rax).u8!, s17(rax).u8
    JNE           L10                                       ;                        JNE            $L10
L9:                                                         ; $L9:
                                                            ; 
                                                            ; 
                                                            ;   Line  28: i < args.length; i++) {
                                                            ;   Col   21: ^
                                                            ;                        StatementBoundary  #1
    MOV           r8, rbp                                   ;     s68(r8).u64     =  MOV            (rbp).u64
    MOV           rdi, r15                                  ;     s69(rdi).var    =  MOV            s4(r15).var
    XOR           rcx, rcx                                  ;     arg4(s72)(rcx).u32 = XOR          arg4(s72)(rcx).u32, arg4(s72)(rcx).u32
    XOR           rdx, rdx                                  ;     arg3(s73)(rdx).u32 = XOR          arg3(s73)(rdx).u32, arg3(s73)(rdx).u32
    MOV           rsi, 201                                  ;     arg2(s74)(rsi).u32 = MOV          201 (0xC9).u32
    MOV           rax, ProfiledLdLen                        ;     s76(rax).u64    =  MOV            ProfiledLdLen.u64
    CALL          rax                                       ;     s70(rax).var    =  CALL           s76(rax).u64
    MOV           rdi, rbx                                  ;     s61(rdi).var    =  MOV            s7(rbx).var
    MOV           rdx, 0x000055A6793BE038                   ;     arg3(s64)(rdx).u64 = MOV          0xXXXXXXXX (ScriptContext).u64
    MOV           rsi, rax                                  ;     arg2(s65)(rsi).var = MOV          s60(rax).var
    MOV           rax, Op_Less                              ;     s67(rax).u64    =  MOV            Op_Less.u64
    CALL          rax                                       ;     s63(rax).i64    =  CALL           s67(rax).u64
    TEST          rax, rax                                  ;                        TEST           s62(rax).i64, s62(rax).i64
    JEQ           L3                                        ;                        JEQ            $L3
                                                            ; 
                                                            ; 
                                                            ;   Line  29: arr[offset + i] = args[i];
                                                            ;   Col    9: ^
                                                            ;                        StatementBoundary  #2
    MOV           rsi, rbx                                  ;     s53(rsi).var    =  MOV            s7(rbx).var
    MOV           rdi, r14                                  ;     s54(rdi).var    =  MOV            s5(r14).var
    MOV           rdx, 0x000055A6793BE038                   ;     arg3(s56)(rdx).u64 = MOV          0xXXXXXXXX (ScriptContext).u64
    MOV           rax, Op_Add                               ;     s59(rax).u64    =  MOV            Op_Add.u64
    CALL          rax                                       ;     s55(rax).var    =  CALL           s59(rax).u64
    MOV           r12, rax                                  ;     s19(r12).var    =  MOV            s55(rax).var
    MOV           rsi, rbx                                  ;     s43(rsi).var    =  MOV            s7(rbx).var
    MOV           rdi, r15                                  ;     s44(rdi).var    =  MOV            s4(r15).var
    XOR           r9, r9                                    ;     arg6(s46)(r9).i32 = XOR           arg6(s46)(r9).i32, arg6(s46)(r9).i32
    XOR           r8, r8                                    ;     arg5(s47)(r8).i32 = XOR           arg5(s47)(r8).i32, arg5(s47)(r8).i32
    XOR           rcx, rcx                                  ;     arg4(s48)(rcx).u32 = XOR          arg4(s48)(rcx).u32, arg4(s48)(rcx).u32
    MOV           rdx, 0x00007FDF9C3383E0                   ;     arg3(s49)(rdx).u64 = MOV          0xXXXXXXXX (FunctionBody [moveArgsIntoArray (#1.2), #3]).u64
    MOV           rax, ProfiledLdElem                       ;     s52(rax).u64    =  MOV            ProfiledLdElem.u64
    CALL          rax                                       ;     s45(rax).var    =  CALL           s52(rax).u64
    MOV           rsi, r12                                  ;     s35(rsi).var    =  MOV            s19(r12).var!
    MOV           r12, SYM(s6<-32>)                         ;     s6(r12).var     =  MOV            s6<-32>.var
    MOV           rdi, r12                                  ;     s36(rdi).var    =  MOV            s6(r12).var
    XOR           r8, r8                                    ;     arg5(s37)(r8).u32 = XOR           arg5(s37)(r8).u32, arg5(s37)(r8).u32
    MOV           rcx, 0x00007FDF9C3383E0                   ;     arg4(s38)(rcx).u64 = MOV          0xXXXXXXXX (FunctionBody [moveArgsIntoArray (#1.2), #3]).u64
    MOV           rdx, rax                                  ;     arg3(s39)(rdx).var = MOV          s34(rax).var
    MOV           rax, ProfiledStElem_DefaultFlags          ;     s42(rax).u64    =  MOV            ProfiledStElem_DefaultFlags.u64
    CALL          rax                                       ;                        CALL           s42(rax).u64
                                                            ; 
                                                            ; 
                                                            ;   Line  28: i++) {
                                                            ;   Col   38: ^
                                                            ;                        StatementBoundary  #3
    MOV           rdi, rbx                                  ;     s29(rdi).var    =  MOV            s7(rbx).var!
    MOV           rsi, 0x000055A6793BE038                   ;     arg2(s31)(rsi).u64 = MOV          0xXXXXXXXX (ScriptContext).u64
    MOV           rax, Op_Increment                         ;     s33(rax).u64    =  MOV            Op_Increment.u64
    CALL          rax                                       ;     s30(rax).var    =  CALL           s33(rax).u64
    MOV           rbx, rax                                  ;     s7(rbx).var     =  MOV            s30(rax).var
    MOV           r12, SYM(s87<-40>.u64)                    ;     s87(r12).u64    =  MOV            s87<-40>.u64
    JMP           L2                                        ;                        JMP            $L2
L3:                                                         ; $L3:
    MOV           r11, SYM(s15<-17>.u8)                     ;     s15(r11).u8     =  MOV            s15<-17>.u8
    MOV           rdi, rbp                                  ;     s24(rdi).u64    =  MOV            (rbp).u64
    MOVZX         rdx, r11                                  ;     arg3(s25)(rdx).u32 = MOVZX        s23(r11).u8
    XOR           rsi, rsi                                  ;     arg2(s26)(rsi).u32 = XOR          arg2(s26)(rsi).u32, arg2(s26)(rsi).u32
    MOV           rax, SimpleRecordLoopImplicitCallFlags    ;     s28(rax).u64    =  MOV            SimpleRecordLoopImplicitCallFlags.u64
    CALL          rax                                       ;                        CALL           s28(rax).u64
    MOV           rbx, 0x00007FDF9CB75030                   ;     s0(rbx).var     =  MOV            0xXXXXXXXX (undefined)[Undefined].var
                                                            ; 
                                                            ; 
                                                            ;   Line  31: }
                                                            ;   Col    1: ^
                                                            ;                        StatementBoundary  #4
                                                            ;                        StatementBoundary  #-1
    MOV           rdi, 0x00007FDF9C3383E0                   ;     arg1(s20)(rdi).u64 = MOV          0xXXXXXXXX (FunctionBody [moveArgsIntoArray (#1.2), #3]).u64
    MOV           rax, SimpleCleanImplicitCallFlags         ;     s21(rax).u64    =  MOV            SimpleCleanImplicitCallFlags.u64
    CALL          rax                                       ;                        CALL           s21(rax).u64
    MOV           rax, rbx                                  ;     s22(rax).i64    =  MOV            s0(rbx).var!
L12:                                                        ; $L12 (Epilogue):
    ADD           rsp, 56                                   ;     (rsp).i64       =  ADD            (rsp).i64, 56 (0x38).i64
    POP           rbx                                       ;     (rbx).i64       =  POP            
    POP           r12                                       ;     (r12).i64       =  POP            
    POP           r13                                       ;     (r13).i64       =  POP            
    POP           r14                                       ;     (r14).i64       =  POP            
    POP           r15                                       ;     (r15).i64       =  POP            
    MOV           rsp, rbp                                  ;     (rsp).i64       =  MOV            (rbp).i64
    POP           rbp                                       ;     (rbp).i64       =  POP            
    RET           0, rax                                    ;                        RET            0 (0x0).i32, (rax).i64
                                                            ;                        FunctionExit   
                                                            ;                        StatementBoundary  #-1
L15:                                                        ; $L15: [helper]
    MOV           rdx, 0x00007FDF9CB75030                   ;     s96(rdx).u64    =  MOV            0xXXXXXXXX (undefined).var
    MOV           r13, rdx                                  ;     s6(r13).var     =  MOV            s96(rdx).u64
    MOV           SYM(s6<-32>), r13                         ;     s6<-32>.var     =  MOV            s6(r13).var
    ADD           rcx, 1                                    ;     s95(rcx).i64    =  ADD            s95(rcx).i64, 1 (0x1).i64
    JEQ           L17                                       ;                        JEQ            $L17
    MOV           r14, rdx                                  ;     s5(r14).var     =  MOV            s96(rdx).u64
    ADD           rcx, 1                                    ;     s95(rcx).i64    =  ADD            s95(rcx).i64, 1 (0x1).i64
    JEQ           L18                                       ;                        JEQ            $L18
    MOV           r15, rdx                                  ;     s4(r15).var     =  MOV            s96(rdx).u64
    JMP           L19                                       ;                        JMP            $L19
                                                            ; 
                                                            ; 
                                                            ;   Line  28: let i = 0; i < args.length; i++) {
                                                            ;   Col   10: ^
                                                            ;                        StatementBoundary  #0
L10:                                                        ; $L10: [helper]
L11:                                                        ; $L11: [helper]
    MOV           rdi, 0x000055A679491788                   ;     (rdi).u64       =  MOV            0xXXXXXXXX (BailOutRecord).u64
    MOV           rax, SaveAllRegistersAndBailOut           ;     (rax).u64       =  MOV            SaveAllRegistersAndBailOut.u64
    CALL          rax                                       ;                        CALL           (rax).u64                                      Bailout: #0007 (BailOnSimpleJitToFullJitLoopBody)
    JMP           L12                                       ;                        JMP            $L12
                                                            ;                        StatementBoundary  #-1
L22:                                                        ; $L22: [helper]
    MOV           rsi, 0x000055A6793BE038                   ;     (rsi).i64       =  MOV            0xXXXXXXXX (ScriptContext).u64
    MOV           rdi, 7200                                 ;     (rdi).i64       =  MOV            7200 (0x1C20).i64
    MOV           rax, ProbeCurrentStack                    ;     (rax).i64       =  MOV            ProbeCurrentStack.u64
    JMP           rax                                       ;                        JMP            (rax).i64
                                                            ;                        StatementBoundary  #-1
